// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mm_mm,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=528,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4474,HLS_SYN_LUT=6251,HLS_VERSION=2022_2}" *)

module mm (
        ap_clk,
        ap_rst_n,
        m_axi_A_port_AWVALID,
        m_axi_A_port_AWREADY,
        m_axi_A_port_AWADDR,
        m_axi_A_port_AWID,
        m_axi_A_port_AWLEN,
        m_axi_A_port_AWSIZE,
        m_axi_A_port_AWBURST,
        m_axi_A_port_AWLOCK,
        m_axi_A_port_AWCACHE,
        m_axi_A_port_AWPROT,
        m_axi_A_port_AWQOS,
        m_axi_A_port_AWREGION,
        m_axi_A_port_AWUSER,
        m_axi_A_port_WVALID,
        m_axi_A_port_WREADY,
        m_axi_A_port_WDATA,
        m_axi_A_port_WSTRB,
        m_axi_A_port_WLAST,
        m_axi_A_port_WID,
        m_axi_A_port_WUSER,
        m_axi_A_port_ARVALID,
        m_axi_A_port_ARREADY,
        m_axi_A_port_ARADDR,
        m_axi_A_port_ARID,
        m_axi_A_port_ARLEN,
        m_axi_A_port_ARSIZE,
        m_axi_A_port_ARBURST,
        m_axi_A_port_ARLOCK,
        m_axi_A_port_ARCACHE,
        m_axi_A_port_ARPROT,
        m_axi_A_port_ARQOS,
        m_axi_A_port_ARREGION,
        m_axi_A_port_ARUSER,
        m_axi_A_port_RVALID,
        m_axi_A_port_RREADY,
        m_axi_A_port_RDATA,
        m_axi_A_port_RLAST,
        m_axi_A_port_RID,
        m_axi_A_port_RUSER,
        m_axi_A_port_RRESP,
        m_axi_A_port_BVALID,
        m_axi_A_port_BREADY,
        m_axi_A_port_BRESP,
        m_axi_A_port_BID,
        m_axi_A_port_BUSER,
        m_axi_B_port_AWVALID,
        m_axi_B_port_AWREADY,
        m_axi_B_port_AWADDR,
        m_axi_B_port_AWID,
        m_axi_B_port_AWLEN,
        m_axi_B_port_AWSIZE,
        m_axi_B_port_AWBURST,
        m_axi_B_port_AWLOCK,
        m_axi_B_port_AWCACHE,
        m_axi_B_port_AWPROT,
        m_axi_B_port_AWQOS,
        m_axi_B_port_AWREGION,
        m_axi_B_port_AWUSER,
        m_axi_B_port_WVALID,
        m_axi_B_port_WREADY,
        m_axi_B_port_WDATA,
        m_axi_B_port_WSTRB,
        m_axi_B_port_WLAST,
        m_axi_B_port_WID,
        m_axi_B_port_WUSER,
        m_axi_B_port_ARVALID,
        m_axi_B_port_ARREADY,
        m_axi_B_port_ARADDR,
        m_axi_B_port_ARID,
        m_axi_B_port_ARLEN,
        m_axi_B_port_ARSIZE,
        m_axi_B_port_ARBURST,
        m_axi_B_port_ARLOCK,
        m_axi_B_port_ARCACHE,
        m_axi_B_port_ARPROT,
        m_axi_B_port_ARQOS,
        m_axi_B_port_ARREGION,
        m_axi_B_port_ARUSER,
        m_axi_B_port_RVALID,
        m_axi_B_port_RREADY,
        m_axi_B_port_RDATA,
        m_axi_B_port_RLAST,
        m_axi_B_port_RID,
        m_axi_B_port_RUSER,
        m_axi_B_port_RRESP,
        m_axi_B_port_BVALID,
        m_axi_B_port_BREADY,
        m_axi_B_port_BRESP,
        m_axi_B_port_BID,
        m_axi_B_port_BUSER,
        m_axi_AB_port_AWVALID,
        m_axi_AB_port_AWREADY,
        m_axi_AB_port_AWADDR,
        m_axi_AB_port_AWID,
        m_axi_AB_port_AWLEN,
        m_axi_AB_port_AWSIZE,
        m_axi_AB_port_AWBURST,
        m_axi_AB_port_AWLOCK,
        m_axi_AB_port_AWCACHE,
        m_axi_AB_port_AWPROT,
        m_axi_AB_port_AWQOS,
        m_axi_AB_port_AWREGION,
        m_axi_AB_port_AWUSER,
        m_axi_AB_port_WVALID,
        m_axi_AB_port_WREADY,
        m_axi_AB_port_WDATA,
        m_axi_AB_port_WSTRB,
        m_axi_AB_port_WLAST,
        m_axi_AB_port_WID,
        m_axi_AB_port_WUSER,
        m_axi_AB_port_ARVALID,
        m_axi_AB_port_ARREADY,
        m_axi_AB_port_ARADDR,
        m_axi_AB_port_ARID,
        m_axi_AB_port_ARLEN,
        m_axi_AB_port_ARSIZE,
        m_axi_AB_port_ARBURST,
        m_axi_AB_port_ARLOCK,
        m_axi_AB_port_ARCACHE,
        m_axi_AB_port_ARPROT,
        m_axi_AB_port_ARQOS,
        m_axi_AB_port_ARREGION,
        m_axi_AB_port_ARUSER,
        m_axi_AB_port_RVALID,
        m_axi_AB_port_RREADY,
        m_axi_AB_port_RDATA,
        m_axi_AB_port_RLAST,
        m_axi_AB_port_RID,
        m_axi_AB_port_RUSER,
        m_axi_AB_port_RRESP,
        m_axi_AB_port_BVALID,
        m_axi_AB_port_BREADY,
        m_axi_AB_port_BRESP,
        m_axi_AB_port_BID,
        m_axi_AB_port_BUSER,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state25 = 10'd512;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AB_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_AB_PORT_ADDR_WIDTH = 64;
parameter    C_M_AXI_AB_PORT_DATA_WIDTH = 32;
parameter    C_M_AXI_AB_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AB_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AB_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_AB_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_AB_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_AB_PORT_USER_VALUE = 0;
parameter    C_M_AXI_AB_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_AB_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_A_PORT_ADDR_WIDTH = 64;
parameter    C_M_AXI_A_PORT_DATA_WIDTH = 32;
parameter    C_M_AXI_A_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_USER_VALUE = 0;
parameter    C_M_AXI_A_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_A_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_B_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_B_PORT_ADDR_WIDTH = 64;
parameter    C_M_AXI_B_PORT_DATA_WIDTH = 32;
parameter    C_M_AXI_B_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_USER_VALUE = 0;
parameter    C_M_AXI_B_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_B_PORT_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AB_PORT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_A_PORT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_PORT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_A_port_AWVALID;
input   m_axi_A_port_AWREADY;
output  [C_M_AXI_A_PORT_ADDR_WIDTH - 1:0] m_axi_A_port_AWADDR;
output  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_AWID;
output  [7:0] m_axi_A_port_AWLEN;
output  [2:0] m_axi_A_port_AWSIZE;
output  [1:0] m_axi_A_port_AWBURST;
output  [1:0] m_axi_A_port_AWLOCK;
output  [3:0] m_axi_A_port_AWCACHE;
output  [2:0] m_axi_A_port_AWPROT;
output  [3:0] m_axi_A_port_AWQOS;
output  [3:0] m_axi_A_port_AWREGION;
output  [C_M_AXI_A_PORT_AWUSER_WIDTH - 1:0] m_axi_A_port_AWUSER;
output   m_axi_A_port_WVALID;
input   m_axi_A_port_WREADY;
output  [C_M_AXI_A_PORT_DATA_WIDTH - 1:0] m_axi_A_port_WDATA;
output  [C_M_AXI_A_PORT_WSTRB_WIDTH - 1:0] m_axi_A_port_WSTRB;
output   m_axi_A_port_WLAST;
output  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_WID;
output  [C_M_AXI_A_PORT_WUSER_WIDTH - 1:0] m_axi_A_port_WUSER;
output   m_axi_A_port_ARVALID;
input   m_axi_A_port_ARREADY;
output  [C_M_AXI_A_PORT_ADDR_WIDTH - 1:0] m_axi_A_port_ARADDR;
output  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_ARID;
output  [7:0] m_axi_A_port_ARLEN;
output  [2:0] m_axi_A_port_ARSIZE;
output  [1:0] m_axi_A_port_ARBURST;
output  [1:0] m_axi_A_port_ARLOCK;
output  [3:0] m_axi_A_port_ARCACHE;
output  [2:0] m_axi_A_port_ARPROT;
output  [3:0] m_axi_A_port_ARQOS;
output  [3:0] m_axi_A_port_ARREGION;
output  [C_M_AXI_A_PORT_ARUSER_WIDTH - 1:0] m_axi_A_port_ARUSER;
input   m_axi_A_port_RVALID;
output   m_axi_A_port_RREADY;
input  [C_M_AXI_A_PORT_DATA_WIDTH - 1:0] m_axi_A_port_RDATA;
input   m_axi_A_port_RLAST;
input  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_RID;
input  [C_M_AXI_A_PORT_RUSER_WIDTH - 1:0] m_axi_A_port_RUSER;
input  [1:0] m_axi_A_port_RRESP;
input   m_axi_A_port_BVALID;
output   m_axi_A_port_BREADY;
input  [1:0] m_axi_A_port_BRESP;
input  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_BID;
input  [C_M_AXI_A_PORT_BUSER_WIDTH - 1:0] m_axi_A_port_BUSER;
output   m_axi_B_port_AWVALID;
input   m_axi_B_port_AWREADY;
output  [C_M_AXI_B_PORT_ADDR_WIDTH - 1:0] m_axi_B_port_AWADDR;
output  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_AWID;
output  [7:0] m_axi_B_port_AWLEN;
output  [2:0] m_axi_B_port_AWSIZE;
output  [1:0] m_axi_B_port_AWBURST;
output  [1:0] m_axi_B_port_AWLOCK;
output  [3:0] m_axi_B_port_AWCACHE;
output  [2:0] m_axi_B_port_AWPROT;
output  [3:0] m_axi_B_port_AWQOS;
output  [3:0] m_axi_B_port_AWREGION;
output  [C_M_AXI_B_PORT_AWUSER_WIDTH - 1:0] m_axi_B_port_AWUSER;
output   m_axi_B_port_WVALID;
input   m_axi_B_port_WREADY;
output  [C_M_AXI_B_PORT_DATA_WIDTH - 1:0] m_axi_B_port_WDATA;
output  [C_M_AXI_B_PORT_WSTRB_WIDTH - 1:0] m_axi_B_port_WSTRB;
output   m_axi_B_port_WLAST;
output  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_WID;
output  [C_M_AXI_B_PORT_WUSER_WIDTH - 1:0] m_axi_B_port_WUSER;
output   m_axi_B_port_ARVALID;
input   m_axi_B_port_ARREADY;
output  [C_M_AXI_B_PORT_ADDR_WIDTH - 1:0] m_axi_B_port_ARADDR;
output  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_ARID;
output  [7:0] m_axi_B_port_ARLEN;
output  [2:0] m_axi_B_port_ARSIZE;
output  [1:0] m_axi_B_port_ARBURST;
output  [1:0] m_axi_B_port_ARLOCK;
output  [3:0] m_axi_B_port_ARCACHE;
output  [2:0] m_axi_B_port_ARPROT;
output  [3:0] m_axi_B_port_ARQOS;
output  [3:0] m_axi_B_port_ARREGION;
output  [C_M_AXI_B_PORT_ARUSER_WIDTH - 1:0] m_axi_B_port_ARUSER;
input   m_axi_B_port_RVALID;
output   m_axi_B_port_RREADY;
input  [C_M_AXI_B_PORT_DATA_WIDTH - 1:0] m_axi_B_port_RDATA;
input   m_axi_B_port_RLAST;
input  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_RID;
input  [C_M_AXI_B_PORT_RUSER_WIDTH - 1:0] m_axi_B_port_RUSER;
input  [1:0] m_axi_B_port_RRESP;
input   m_axi_B_port_BVALID;
output   m_axi_B_port_BREADY;
input  [1:0] m_axi_B_port_BRESP;
input  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_BID;
input  [C_M_AXI_B_PORT_BUSER_WIDTH - 1:0] m_axi_B_port_BUSER;
output   m_axi_AB_port_AWVALID;
input   m_axi_AB_port_AWREADY;
output  [C_M_AXI_AB_PORT_ADDR_WIDTH - 1:0] m_axi_AB_port_AWADDR;
output  [C_M_AXI_AB_PORT_ID_WIDTH - 1:0] m_axi_AB_port_AWID;
output  [7:0] m_axi_AB_port_AWLEN;
output  [2:0] m_axi_AB_port_AWSIZE;
output  [1:0] m_axi_AB_port_AWBURST;
output  [1:0] m_axi_AB_port_AWLOCK;
output  [3:0] m_axi_AB_port_AWCACHE;
output  [2:0] m_axi_AB_port_AWPROT;
output  [3:0] m_axi_AB_port_AWQOS;
output  [3:0] m_axi_AB_port_AWREGION;
output  [C_M_AXI_AB_PORT_AWUSER_WIDTH - 1:0] m_axi_AB_port_AWUSER;
output   m_axi_AB_port_WVALID;
input   m_axi_AB_port_WREADY;
output  [C_M_AXI_AB_PORT_DATA_WIDTH - 1:0] m_axi_AB_port_WDATA;
output  [C_M_AXI_AB_PORT_WSTRB_WIDTH - 1:0] m_axi_AB_port_WSTRB;
output   m_axi_AB_port_WLAST;
output  [C_M_AXI_AB_PORT_ID_WIDTH - 1:0] m_axi_AB_port_WID;
output  [C_M_AXI_AB_PORT_WUSER_WIDTH - 1:0] m_axi_AB_port_WUSER;
output   m_axi_AB_port_ARVALID;
input   m_axi_AB_port_ARREADY;
output  [C_M_AXI_AB_PORT_ADDR_WIDTH - 1:0] m_axi_AB_port_ARADDR;
output  [C_M_AXI_AB_PORT_ID_WIDTH - 1:0] m_axi_AB_port_ARID;
output  [7:0] m_axi_AB_port_ARLEN;
output  [2:0] m_axi_AB_port_ARSIZE;
output  [1:0] m_axi_AB_port_ARBURST;
output  [1:0] m_axi_AB_port_ARLOCK;
output  [3:0] m_axi_AB_port_ARCACHE;
output  [2:0] m_axi_AB_port_ARPROT;
output  [3:0] m_axi_AB_port_ARQOS;
output  [3:0] m_axi_AB_port_ARREGION;
output  [C_M_AXI_AB_PORT_ARUSER_WIDTH - 1:0] m_axi_AB_port_ARUSER;
input   m_axi_AB_port_RVALID;
output   m_axi_AB_port_RREADY;
input  [C_M_AXI_AB_PORT_DATA_WIDTH - 1:0] m_axi_AB_port_RDATA;
input   m_axi_AB_port_RLAST;
input  [C_M_AXI_AB_PORT_ID_WIDTH - 1:0] m_axi_AB_port_RID;
input  [C_M_AXI_AB_PORT_RUSER_WIDTH - 1:0] m_axi_AB_port_RUSER;
input  [1:0] m_axi_AB_port_RRESP;
input   m_axi_AB_port_BVALID;
output   m_axi_AB_port_BREADY;
input  [1:0] m_axi_AB_port_BRESP;
input  [C_M_AXI_AB_PORT_ID_WIDTH - 1:0] m_axi_AB_port_BID;
input  [C_M_AXI_AB_PORT_BUSER_WIDTH - 1:0] m_axi_AB_port_BUSER;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] A;
wire   [63:0] B;
wire   [63:0] AB;
reg    A_port_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln26_reg_1265;
reg    A_port_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
reg    B_port_blk_n_AR;
reg    B_port_blk_n_R;
reg    AB_port_blk_n_AW;
reg    ap_enable_reg_pp0_iter2;
reg    AB_port_blk_n_W;
reg    AB_port_blk_n_B;
reg   [63:0] AB_read_reg_1236;
reg   [63:0] B_read_reg_1241;
reg   [63:0] A_read_reg_1253;
wire   [0:0] icmp_ln26_fu_400_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    A_port_AWREADY;
wire    A_port_WREADY;
reg    A_port_ARVALID;
wire    A_port_ARREADY;
reg   [63:0] A_port_ARADDR;
wire    A_port_RVALID;
reg    A_port_RREADY;
wire   [31:0] A_port_RDATA;
wire   [8:0] A_port_RFIFONUM;
wire    A_port_BVALID;
wire    B_port_AWREADY;
wire    B_port_WREADY;
reg    B_port_ARVALID;
wire    B_port_ARREADY;
reg   [63:0] B_port_ARADDR;
wire    B_port_RVALID;
reg    B_port_RREADY;
wire   [31:0] B_port_RDATA;
wire   [8:0] B_port_RFIFONUM;
wire    B_port_BVALID;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_state10_io;
reg    AB_port_AWVALID;
wire    AB_port_AWREADY;
reg    AB_port_WVALID;
wire    AB_port_WREADY;
wire    AB_port_ARREADY;
wire    AB_port_RVALID;
wire   [31:0] AB_port_RDATA;
wire   [8:0] AB_port_RFIFONUM;
wire    AB_port_BVALID;
reg    AB_port_BREADY;
wire    ap_block_state18_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] select_ln26_1_fu_446_p3;
reg   [2:0] select_ln26_1_reg_1269;
reg   [2:0] select_ln26_1_reg_1269_pp0_iter1_reg;
reg   [63:0] A_port_addr_reg_1275;
wire   [2:0] trunc_ln30_fu_499_p1;
reg   [2:0] trunc_ln30_reg_1281;
reg   [2:0] trunc_ln30_reg_1281_pp0_iter1_reg;
reg   [63:0] B_port_addr_reg_1290;
wire   [5:0] sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3;
reg   [5:0] sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_state19_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] A_port_addr_1_reg_1306;
wire  signed [5:0] zext_ln30_1_cast_fu_611_p4;
reg  signed [5:0] zext_ln30_1_cast_reg_1312;
reg   [63:0] B_port_addr_1_reg_1318;
reg   [63:0] A_port_addr_2_reg_1324;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
reg    ap_block_state12_pp0_stage2_iter1;
wire    ap_block_state20_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_11001;
wire  signed [6:0] zext_ln30_2_cast_fu_691_p4;
reg  signed [6:0] zext_ln30_2_cast_reg_1330;
reg   [63:0] B_port_addr_2_reg_1335;
reg   [63:0] A_port_addr_3_reg_1341;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
reg    ap_block_state13_pp0_stage3_iter1;
wire    ap_block_state21_pp0_stage3_iter2;
reg    ap_block_pp0_stage3_11001;
reg   [63:0] B_port_addr_3_reg_1347;
reg   [63:0] A_port_addr_4_reg_1353;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_state6_io;
reg    ap_block_state14_pp0_stage4_iter1;
wire    ap_block_state22_pp0_stage4_iter2;
reg    ap_block_pp0_stage4_11001;
reg   [63:0] B_port_addr_4_reg_1359;
reg   [63:0] A_port_addr_5_reg_1365;
wire    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_state7_io;
reg    ap_block_state15_pp0_stage5_iter1;
wire    ap_block_state23_pp0_stage5_iter2;
reg    ap_block_pp0_stage5_11001;
reg   [63:0] B_port_addr_5_reg_1371;
reg   [63:0] A_port_addr_6_reg_1377;
wire    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_state8_io;
reg    ap_block_state16_pp0_stage6_iter1;
reg    ap_block_state24_pp0_stage6_iter2;
reg    ap_block_pp0_stage6_11001;
reg   [63:0] B_port_addr_6_reg_1383;
reg   [63:0] A_port_addr_7_reg_1389;
wire    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_state9_io;
reg    ap_block_state17_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
reg   [63:0] B_port_addr_7_reg_1395;
reg  signed [31:0] A_port_addr_read_reg_1401;
reg  signed [31:0] B_port_addr_read_reg_1406;
wire   [31:0] mul_ln30_fu_1111_p2;
reg   [31:0] mul_ln30_reg_1411;
reg  signed [31:0] A_port_addr_1_read_reg_1416;
reg  signed [31:0] B_port_addr_1_read_reg_1421;
reg  signed [31:0] A_port_addr_2_read_reg_1426;
reg  signed [31:0] B_port_addr_2_read_reg_1431;
wire   [31:0] add_ln30_8_fu_1119_p2;
reg   [31:0] add_ln30_8_reg_1436;
wire   [31:0] mul_ln30_2_fu_1124_p2;
reg   [31:0] mul_ln30_2_reg_1441;
reg  signed [31:0] A_port_addr_3_read_reg_1446;
reg  signed [31:0] B_port_addr_3_read_reg_1451;
reg  signed [31:0] A_port_addr_4_read_reg_1456;
reg  signed [31:0] B_port_addr_4_read_reg_1461;
wire   [31:0] add_ln30_9_fu_1132_p2;
reg   [31:0] add_ln30_9_reg_1466;
wire   [31:0] mul_ln30_4_fu_1137_p2;
reg   [31:0] mul_ln30_4_reg_1471;
reg  signed [31:0] A_port_addr_5_read_reg_1476;
reg  signed [31:0] B_port_addr_5_read_reg_1481;
wire   [31:0] mul_ln30_5_fu_1141_p2;
reg   [31:0] mul_ln30_5_reg_1486;
reg  signed [31:0] A_port_addr_6_read_reg_1491;
reg  signed [31:0] B_port_addr_6_read_reg_1496;
wire   [31:0] mul_ln30_6_fu_1145_p2;
reg   [31:0] mul_ln30_6_reg_1501;
reg  signed [31:0] A_port_addr_7_read_reg_1506;
reg  signed [31:0] B_port_addr_7_read_reg_1511;
reg   [63:0] AB_port_addr_reg_1516;
wire   [31:0] add_ln30_14_fu_1209_p2;
reg   [31:0] add_ln30_14_reg_1522;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage6_subdone;
wire  signed [63:0] sext_ln26_fu_481_p1;
wire  signed [63:0] sext_ln30_fu_530_p1;
wire  signed [63:0] sext_ln26_1_fu_601_p1;
wire  signed [63:0] sext_ln30_1_fu_639_p1;
wire  signed [63:0] sext_ln26_2_fu_681_p1;
wire  signed [63:0] sext_ln30_2_fu_719_p1;
wire  signed [63:0] sext_ln26_3_fu_761_p1;
wire  signed [63:0] sext_ln30_4_fu_793_p1;
wire  signed [63:0] sext_ln26_4_fu_835_p1;
wire  signed [63:0] sext_ln30_5_fu_873_p1;
wire  signed [63:0] sext_ln26_5_fu_915_p1;
wire  signed [63:0] sext_ln30_6_fu_953_p1;
wire  signed [63:0] sext_ln26_6_fu_995_p1;
wire  signed [63:0] sext_ln30_8_fu_1027_p1;
wire  signed [63:0] sext_ln26_7_fu_1069_p1;
wire  signed [63:0] sext_ln30_10_fu_1101_p1;
wire  signed [63:0] sext_ln32_fu_1176_p1;
reg    ap_block_pp0_stage1_01001;
reg   [3:0] j_fu_144;
wire   [3:0] add_ln27_fu_540_p2;
reg   [3:0] i_fu_148;
wire   [3:0] select_ln26_2_fu_485_p3;
reg   [6:0] indvar_flatten_fu_152;
wire   [6:0] add_ln26_fu_406_p2;
wire   [0:0] icmp_ln27_fu_418_p2;
wire   [3:0] add_ln26_9_fu_432_p2;
wire   [2:0] trunc_ln26_fu_438_p1;
wire   [2:0] trunc_ln26_1_fu_442_p1;
wire   [7:0] sext_ln30_mid2_v_v_v_v_v_fu_454_p3;
wire   [63:0] zext_ln26_fu_462_p1;
wire   [63:0] add_ln26_1_fu_466_p2;
wire   [61:0] sext_ln30_mid2_v_fu_471_p4;
wire   [3:0] select_ln26_fu_424_p3;
wire   [4:0] shl_ln30_2_fu_503_p3;
wire   [63:0] zext_ln30_fu_511_p1;
wire   [63:0] add_ln30_fu_515_p2;
wire   [61:0] trunc_ln30_2_fu_520_p4;
wire   [5:0] or_ln26_fu_568_p2;
wire   [7:0] sext_ln30_2_mid2_v_v_v_v_v_fu_574_p3;
wire   [63:0] zext_ln26_1_fu_582_p1;
wire   [63:0] add_ln26_2_fu_586_p2;
wire   [61:0] sext_ln30_2_mid2_v_fu_591_p4;
wire   [63:0] zext_ln30_1_fu_620_p1;
wire   [63:0] add_ln30_1_fu_624_p2;
wire   [61:0] trunc_ln30_4_fu_629_p4;
wire   [5:0] or_ln26_1_fu_649_p2;
wire   [7:0] sext_ln30_4_mid2_v_v_v_v_v_fu_654_p3;
wire   [63:0] zext_ln26_2_fu_662_p1;
wire   [63:0] add_ln26_3_fu_666_p2;
wire   [61:0] sext_ln30_4_mid2_v_fu_671_p4;
wire   [63:0] zext_ln30_2_fu_700_p1;
wire   [63:0] add_ln30_2_fu_704_p2;
wire   [61:0] trunc_ln30_6_fu_709_p4;
wire   [5:0] or_ln26_2_fu_729_p2;
wire   [7:0] sext_ln30_6_mid2_v_v_v_v_v_fu_734_p3;
wire   [63:0] zext_ln26_3_fu_742_p1;
wire   [63:0] add_ln26_4_fu_746_p2;
wire   [61:0] sext_ln30_6_mid2_v_fu_751_p4;
wire  signed [6:0] sext_ln30_3_fu_771_p1;
wire   [63:0] zext_ln30_3_fu_774_p1;
wire   [63:0] add_ln30_3_fu_778_p2;
wire   [61:0] trunc_ln30_8_fu_783_p4;
wire   [5:0] or_ln26_3_fu_803_p2;
wire   [7:0] sext_ln30_8_mid2_v_v_v_v_v_fu_808_p3;
wire   [63:0] zext_ln26_4_fu_816_p1;
wire   [63:0] add_ln26_5_fu_820_p2;
wire   [61:0] sext_ln30_8_mid2_v_fu_825_p4;
wire   [7:0] zext_ln30_4_cast_fu_845_p4;
wire   [63:0] zext_ln30_4_fu_854_p1;
wire   [63:0] add_ln30_4_fu_858_p2;
wire   [61:0] trunc_ln30_s_fu_863_p4;
wire   [5:0] or_ln26_4_fu_883_p2;
wire   [7:0] sext_ln30_10_mid2_v_v_v_v_v_fu_888_p3;
wire   [63:0] zext_ln26_5_fu_896_p1;
wire   [63:0] add_ln26_6_fu_900_p2;
wire   [61:0] sext_ln30_10_mid2_v_fu_905_p4;
wire   [7:0] zext_ln30_5_cast_fu_925_p4;
wire   [63:0] zext_ln30_5_fu_934_p1;
wire   [63:0] add_ln30_5_fu_938_p2;
wire   [61:0] trunc_ln30_3_fu_943_p4;
wire   [5:0] or_ln26_5_fu_963_p2;
wire   [7:0] sext_ln30_12_mid2_v_v_v_v_v_fu_968_p3;
wire   [63:0] zext_ln26_6_fu_976_p1;
wire   [63:0] add_ln26_7_fu_980_p2;
wire   [61:0] sext_ln30_12_mid2_v_fu_985_p4;
wire  signed [7:0] sext_ln30_7_fu_1005_p1;
wire   [63:0] zext_ln30_6_fu_1008_p1;
wire   [63:0] add_ln30_6_fu_1012_p2;
wire   [61:0] trunc_ln30_5_fu_1017_p4;
wire   [5:0] or_ln26_6_fu_1037_p2;
wire   [7:0] sext_ln30_14_mid2_v_v_v_v_v_fu_1042_p3;
wire   [63:0] zext_ln26_7_fu_1050_p1;
wire   [63:0] add_ln26_8_fu_1054_p2;
wire   [61:0] sext_ln30_14_mid2_v_fu_1059_p4;
wire  signed [7:0] sext_ln30_9_fu_1079_p1;
wire   [63:0] zext_ln30_7_fu_1082_p1;
wire   [63:0] add_ln30_7_fu_1086_p2;
wire   [61:0] trunc_ln30_7_fu_1091_p4;
wire   [31:0] mul_ln30_1_fu_1115_p2;
wire   [31:0] mul_ln30_3_fu_1128_p2;
wire   [7:0] shl_ln_fu_1149_p4;
wire   [63:0] zext_ln32_fu_1157_p1;
wire   [63:0] add_ln32_fu_1161_p2;
wire   [61:0] trunc_ln_fu_1166_p4;
wire   [31:0] mul_ln30_7_fu_1186_p2;
wire   [31:0] add_ln30_12_fu_1198_p2;
wire   [31:0] add_ln30_11_fu_1194_p2;
wire   [31:0] add_ln30_13_fu_1203_p2;
wire   [31:0] add_ln30_10_fu_1190_p2;
wire    ap_CS_fsm_state25;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state25_blk;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

mm_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .B(B),
    .AB(AB),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mm_AB_port_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AB_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AB_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AB_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AB_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AB_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AB_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AB_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AB_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AB_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AB_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AB_PORT_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
AB_port_m_axi_U(
    .AWVALID(m_axi_AB_port_AWVALID),
    .AWREADY(m_axi_AB_port_AWREADY),
    .AWADDR(m_axi_AB_port_AWADDR),
    .AWID(m_axi_AB_port_AWID),
    .AWLEN(m_axi_AB_port_AWLEN),
    .AWSIZE(m_axi_AB_port_AWSIZE),
    .AWBURST(m_axi_AB_port_AWBURST),
    .AWLOCK(m_axi_AB_port_AWLOCK),
    .AWCACHE(m_axi_AB_port_AWCACHE),
    .AWPROT(m_axi_AB_port_AWPROT),
    .AWQOS(m_axi_AB_port_AWQOS),
    .AWREGION(m_axi_AB_port_AWREGION),
    .AWUSER(m_axi_AB_port_AWUSER),
    .WVALID(m_axi_AB_port_WVALID),
    .WREADY(m_axi_AB_port_WREADY),
    .WDATA(m_axi_AB_port_WDATA),
    .WSTRB(m_axi_AB_port_WSTRB),
    .WLAST(m_axi_AB_port_WLAST),
    .WID(m_axi_AB_port_WID),
    .WUSER(m_axi_AB_port_WUSER),
    .ARVALID(m_axi_AB_port_ARVALID),
    .ARREADY(m_axi_AB_port_ARREADY),
    .ARADDR(m_axi_AB_port_ARADDR),
    .ARID(m_axi_AB_port_ARID),
    .ARLEN(m_axi_AB_port_ARLEN),
    .ARSIZE(m_axi_AB_port_ARSIZE),
    .ARBURST(m_axi_AB_port_ARBURST),
    .ARLOCK(m_axi_AB_port_ARLOCK),
    .ARCACHE(m_axi_AB_port_ARCACHE),
    .ARPROT(m_axi_AB_port_ARPROT),
    .ARQOS(m_axi_AB_port_ARQOS),
    .ARREGION(m_axi_AB_port_ARREGION),
    .ARUSER(m_axi_AB_port_ARUSER),
    .RVALID(m_axi_AB_port_RVALID),
    .RREADY(m_axi_AB_port_RREADY),
    .RDATA(m_axi_AB_port_RDATA),
    .RLAST(m_axi_AB_port_RLAST),
    .RID(m_axi_AB_port_RID),
    .RUSER(m_axi_AB_port_RUSER),
    .RRESP(m_axi_AB_port_RRESP),
    .BVALID(m_axi_AB_port_BVALID),
    .BREADY(m_axi_AB_port_BREADY),
    .BRESP(m_axi_AB_port_BRESP),
    .BID(m_axi_AB_port_BID),
    .BUSER(m_axi_AB_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(AB_port_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(AB_port_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(AB_port_RDATA),
    .I_RFIFONUM(AB_port_RFIFONUM),
    .I_AWVALID(AB_port_AWVALID),
    .I_AWREADY(AB_port_AWREADY),
    .I_AWADDR(AB_port_addr_reg_1516),
    .I_AWLEN(32'd1),
    .I_WVALID(AB_port_WVALID),
    .I_WREADY(AB_port_WREADY),
    .I_WDATA(add_ln30_14_reg_1522),
    .I_WSTRB(4'd15),
    .I_BVALID(AB_port_BVALID),
    .I_BREADY(AB_port_BREADY)
);

mm_A_port_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_PORT_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
A_port_m_axi_U(
    .AWVALID(m_axi_A_port_AWVALID),
    .AWREADY(m_axi_A_port_AWREADY),
    .AWADDR(m_axi_A_port_AWADDR),
    .AWID(m_axi_A_port_AWID),
    .AWLEN(m_axi_A_port_AWLEN),
    .AWSIZE(m_axi_A_port_AWSIZE),
    .AWBURST(m_axi_A_port_AWBURST),
    .AWLOCK(m_axi_A_port_AWLOCK),
    .AWCACHE(m_axi_A_port_AWCACHE),
    .AWPROT(m_axi_A_port_AWPROT),
    .AWQOS(m_axi_A_port_AWQOS),
    .AWREGION(m_axi_A_port_AWREGION),
    .AWUSER(m_axi_A_port_AWUSER),
    .WVALID(m_axi_A_port_WVALID),
    .WREADY(m_axi_A_port_WREADY),
    .WDATA(m_axi_A_port_WDATA),
    .WSTRB(m_axi_A_port_WSTRB),
    .WLAST(m_axi_A_port_WLAST),
    .WID(m_axi_A_port_WID),
    .WUSER(m_axi_A_port_WUSER),
    .ARVALID(m_axi_A_port_ARVALID),
    .ARREADY(m_axi_A_port_ARREADY),
    .ARADDR(m_axi_A_port_ARADDR),
    .ARID(m_axi_A_port_ARID),
    .ARLEN(m_axi_A_port_ARLEN),
    .ARSIZE(m_axi_A_port_ARSIZE),
    .ARBURST(m_axi_A_port_ARBURST),
    .ARLOCK(m_axi_A_port_ARLOCK),
    .ARCACHE(m_axi_A_port_ARCACHE),
    .ARPROT(m_axi_A_port_ARPROT),
    .ARQOS(m_axi_A_port_ARQOS),
    .ARREGION(m_axi_A_port_ARREGION),
    .ARUSER(m_axi_A_port_ARUSER),
    .RVALID(m_axi_A_port_RVALID),
    .RREADY(m_axi_A_port_RREADY),
    .RDATA(m_axi_A_port_RDATA),
    .RLAST(m_axi_A_port_RLAST),
    .RID(m_axi_A_port_RID),
    .RUSER(m_axi_A_port_RUSER),
    .RRESP(m_axi_A_port_RRESP),
    .BVALID(m_axi_A_port_BVALID),
    .BREADY(m_axi_A_port_BREADY),
    .BRESP(m_axi_A_port_BRESP),
    .BID(m_axi_A_port_BID),
    .BUSER(m_axi_A_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(A_port_ARVALID),
    .I_ARREADY(A_port_ARREADY),
    .I_ARADDR(A_port_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(A_port_RVALID),
    .I_RREADY(A_port_RREADY),
    .I_RDATA(A_port_RDATA),
    .I_RFIFONUM(A_port_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(A_port_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(A_port_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(A_port_BVALID),
    .I_BREADY(1'b0)
);

mm_B_port_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B_PORT_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
B_port_m_axi_U(
    .AWVALID(m_axi_B_port_AWVALID),
    .AWREADY(m_axi_B_port_AWREADY),
    .AWADDR(m_axi_B_port_AWADDR),
    .AWID(m_axi_B_port_AWID),
    .AWLEN(m_axi_B_port_AWLEN),
    .AWSIZE(m_axi_B_port_AWSIZE),
    .AWBURST(m_axi_B_port_AWBURST),
    .AWLOCK(m_axi_B_port_AWLOCK),
    .AWCACHE(m_axi_B_port_AWCACHE),
    .AWPROT(m_axi_B_port_AWPROT),
    .AWQOS(m_axi_B_port_AWQOS),
    .AWREGION(m_axi_B_port_AWREGION),
    .AWUSER(m_axi_B_port_AWUSER),
    .WVALID(m_axi_B_port_WVALID),
    .WREADY(m_axi_B_port_WREADY),
    .WDATA(m_axi_B_port_WDATA),
    .WSTRB(m_axi_B_port_WSTRB),
    .WLAST(m_axi_B_port_WLAST),
    .WID(m_axi_B_port_WID),
    .WUSER(m_axi_B_port_WUSER),
    .ARVALID(m_axi_B_port_ARVALID),
    .ARREADY(m_axi_B_port_ARREADY),
    .ARADDR(m_axi_B_port_ARADDR),
    .ARID(m_axi_B_port_ARID),
    .ARLEN(m_axi_B_port_ARLEN),
    .ARSIZE(m_axi_B_port_ARSIZE),
    .ARBURST(m_axi_B_port_ARBURST),
    .ARLOCK(m_axi_B_port_ARLOCK),
    .ARCACHE(m_axi_B_port_ARCACHE),
    .ARPROT(m_axi_B_port_ARPROT),
    .ARQOS(m_axi_B_port_ARQOS),
    .ARREGION(m_axi_B_port_ARREGION),
    .ARUSER(m_axi_B_port_ARUSER),
    .RVALID(m_axi_B_port_RVALID),
    .RREADY(m_axi_B_port_RREADY),
    .RDATA(m_axi_B_port_RDATA),
    .RLAST(m_axi_B_port_RLAST),
    .RID(m_axi_B_port_RID),
    .RUSER(m_axi_B_port_RUSER),
    .RRESP(m_axi_B_port_RRESP),
    .BVALID(m_axi_B_port_BVALID),
    .BREADY(m_axi_B_port_BREADY),
    .BRESP(m_axi_B_port_BRESP),
    .BID(m_axi_B_port_BID),
    .BUSER(m_axi_B_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(B_port_ARVALID),
    .I_ARREADY(B_port_ARREADY),
    .I_ARADDR(B_port_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(B_port_RVALID),
    .I_RREADY(B_port_RREADY),
    .I_RDATA(B_port_RDATA),
    .I_RFIFONUM(B_port_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(B_port_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(B_port_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(B_port_BVALID),
    .I_BREADY(1'b0)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(B_port_addr_read_reg_1406),
    .din1(A_port_addr_read_reg_1401),
    .dout(mul_ln30_fu_1111_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(B_port_addr_1_read_reg_1421),
    .din1(A_port_addr_1_read_reg_1416),
    .dout(mul_ln30_1_fu_1115_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(B_port_addr_2_read_reg_1431),
    .din1(A_port_addr_2_read_reg_1426),
    .dout(mul_ln30_2_fu_1124_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(B_port_addr_3_read_reg_1451),
    .din1(A_port_addr_3_read_reg_1446),
    .dout(mul_ln30_3_fu_1128_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(B_port_addr_4_read_reg_1461),
    .din1(A_port_addr_4_read_reg_1456),
    .dout(mul_ln30_4_fu_1137_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(B_port_addr_5_read_reg_1481),
    .din1(A_port_addr_5_read_reg_1476),
    .dout(mul_ln30_5_fu_1141_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(B_port_addr_6_read_reg_1496),
    .din1(A_port_addr_6_read_reg_1491),
    .dout(mul_ln30_6_fu_1145_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(B_port_addr_7_read_reg_1511),
    .din1(A_port_addr_7_read_reg_1506),
    .dout(mul_ln30_7_fu_1186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_148 <= 4'd0;
    end else if (((icmp_ln26_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_fu_148 <= select_ln26_2_fu_485_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_152 <= 7'd0;
    end else if (((icmp_ln26_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_fu_152 <= add_ln26_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_144 <= 4'd0;
    end else if (((icmp_ln26_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_fu_144 <= add_ln27_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        AB_port_addr_reg_1516 <= sext_ln32_fu_1176_p1;
        A_port_addr_7_read_reg_1506 <= A_port_RDATA;
        B_port_addr_7_read_reg_1511 <= B_port_RDATA;
        mul_ln30_6_reg_1501 <= mul_ln30_6_fu_1145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        AB_read_reg_1236 <= AB;
        A_read_reg_1253 <= A;
        B_read_reg_1241 <= B;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        A_port_addr_1_read_reg_1416 <= A_port_RDATA;
        B_port_addr_1_read_reg_1421 <= B_port_RDATA;
        mul_ln30_reg_1411 <= mul_ln30_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        A_port_addr_1_reg_1306 <= sext_ln26_1_fu_601_p1;
        B_port_addr_1_reg_1318 <= sext_ln30_1_fu_639_p1;
        sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296[5 : 3] <= sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3[5 : 3];
        zext_ln30_1_cast_reg_1312[4 : 2] <= zext_ln30_1_cast_fu_611_p4[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        A_port_addr_2_read_reg_1426 <= A_port_RDATA;
        B_port_addr_2_read_reg_1431 <= B_port_RDATA;
        add_ln30_8_reg_1436 <= add_ln30_8_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        A_port_addr_2_reg_1324 <= sext_ln26_2_fu_681_p1;
        B_port_addr_2_reg_1335 <= sext_ln30_2_fu_719_p1;
        zext_ln30_2_cast_reg_1330[4 : 2] <= zext_ln30_2_cast_fu_691_p4[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        A_port_addr_3_read_reg_1446 <= A_port_RDATA;
        B_port_addr_3_read_reg_1451 <= B_port_RDATA;
        mul_ln30_2_reg_1441 <= mul_ln30_2_fu_1124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        A_port_addr_3_reg_1341 <= sext_ln26_3_fu_761_p1;
        B_port_addr_3_reg_1347 <= sext_ln30_4_fu_793_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        A_port_addr_4_read_reg_1456 <= A_port_RDATA;
        B_port_addr_4_read_reg_1461 <= B_port_RDATA;
        add_ln30_9_reg_1466 <= add_ln30_9_fu_1132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        A_port_addr_4_reg_1353 <= sext_ln26_4_fu_835_p1;
        B_port_addr_4_reg_1359 <= sext_ln30_5_fu_873_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        A_port_addr_5_read_reg_1476 <= A_port_RDATA;
        B_port_addr_5_read_reg_1481 <= B_port_RDATA;
        mul_ln30_4_reg_1471 <= mul_ln30_4_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        A_port_addr_5_reg_1365 <= sext_ln26_5_fu_915_p1;
        B_port_addr_5_reg_1371 <= sext_ln30_6_fu_953_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        A_port_addr_6_read_reg_1491 <= A_port_RDATA;
        B_port_addr_6_read_reg_1496 <= B_port_RDATA;
        mul_ln30_5_reg_1486 <= mul_ln30_5_fu_1141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        A_port_addr_6_reg_1377 <= sext_ln26_6_fu_995_p1;
        B_port_addr_6_reg_1383 <= sext_ln30_8_fu_1027_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        A_port_addr_7_reg_1389 <= sext_ln26_7_fu_1069_p1;
        B_port_addr_7_reg_1395 <= sext_ln30_10_fu_1101_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_port_addr_read_reg_1401 <= A_port_RDATA;
        B_port_addr_read_reg_1406 <= B_port_RDATA;
        add_ln30_14_reg_1522 <= add_ln30_14_fu_1209_p2;
        icmp_ln26_reg_1265 <= icmp_ln26_fu_400_p2;
        select_ln26_1_reg_1269_pp0_iter1_reg <= select_ln26_1_reg_1269;
        trunc_ln30_reg_1281_pp0_iter1_reg <= trunc_ln30_reg_1281;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_port_addr_reg_1275 <= sext_ln26_fu_481_p1;
        B_port_addr_reg_1290 <= sext_ln30_fu_530_p1;
        select_ln26_1_reg_1269 <= select_ln26_1_fu_446_p3;
        trunc_ln30_reg_1281 <= trunc_ln30_fu_499_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_port_AWVALID = 1'b1;
    end else begin
        AB_port_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        AB_port_BREADY = 1'b1;
    end else begin
        AB_port_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        AB_port_WVALID = 1'b1;
    end else begin
        AB_port_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        AB_port_blk_n_AW = m_axi_AB_port_AWREADY;
    end else begin
        AB_port_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        AB_port_blk_n_B = m_axi_AB_port_BVALID;
    end else begin
        AB_port_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        AB_port_blk_n_W = m_axi_AB_port_WREADY;
    end else begin
        AB_port_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_port_ARADDR = A_port_addr_7_reg_1389;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_port_ARADDR = A_port_addr_6_reg_1377;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_port_ARADDR = A_port_addr_5_reg_1365;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_port_ARADDR = A_port_addr_4_reg_1353;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_port_ARADDR = A_port_addr_3_reg_1341;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_port_ARADDR = A_port_addr_2_reg_1324;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_port_ARADDR = A_port_addr_1_reg_1306;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_port_ARADDR = A_port_addr_reg_1275;
    end else begin
        A_port_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        A_port_ARVALID = 1'b1;
    end else begin
        A_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        A_port_RREADY = 1'b1;
    end else begin
        A_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        A_port_blk_n_AR = m_axi_A_port_ARREADY;
    end else begin
        A_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        A_port_blk_n_R = m_axi_A_port_RVALID;
    end else begin
        A_port_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_port_ARADDR = B_port_addr_7_reg_1395;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_port_ARADDR = B_port_addr_6_reg_1383;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_port_ARADDR = B_port_addr_5_reg_1371;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_port_ARADDR = B_port_addr_4_reg_1359;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_port_ARADDR = B_port_addr_3_reg_1347;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_port_ARADDR = B_port_addr_2_reg_1335;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_port_ARADDR = B_port_addr_1_reg_1318;
    end else if (((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_port_ARADDR = B_port_addr_reg_1290;
    end else begin
        B_port_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        B_port_ARVALID = 1'b1;
    end else begin
        B_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        B_port_RREADY = 1'b1;
    end else begin
        B_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln26_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        B_port_blk_n_AR = m_axi_B_port_ARREADY;
    end else begin
        B_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        B_port_blk_n_R = m_axi_B_port_RVALID;
    end else begin
        B_port_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln26_fu_400_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln26_fu_400_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln26_fu_400_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone)) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_466_p2 = (zext_ln26_fu_462_p1 + A_read_reg_1253);

assign add_ln26_2_fu_586_p2 = (zext_ln26_1_fu_582_p1 + A_read_reg_1253);

assign add_ln26_3_fu_666_p2 = (zext_ln26_2_fu_662_p1 + A_read_reg_1253);

assign add_ln26_4_fu_746_p2 = (zext_ln26_3_fu_742_p1 + A_read_reg_1253);

assign add_ln26_5_fu_820_p2 = (zext_ln26_4_fu_816_p1 + A_read_reg_1253);

assign add_ln26_6_fu_900_p2 = (zext_ln26_5_fu_896_p1 + A_read_reg_1253);

assign add_ln26_7_fu_980_p2 = (zext_ln26_6_fu_976_p1 + A_read_reg_1253);

assign add_ln26_8_fu_1054_p2 = (zext_ln26_7_fu_1050_p1 + A_read_reg_1253);

assign add_ln26_9_fu_432_p2 = (i_fu_148 + 4'd1);

assign add_ln26_fu_406_p2 = (indvar_flatten_fu_152 + 7'd1);

assign add_ln27_fu_540_p2 = (select_ln26_fu_424_p3 + 4'd1);

assign add_ln30_10_fu_1190_p2 = (add_ln30_9_reg_1466 + add_ln30_8_reg_1436);

assign add_ln30_11_fu_1194_p2 = (mul_ln30_4_reg_1471 + mul_ln30_5_reg_1486);

assign add_ln30_12_fu_1198_p2 = (mul_ln30_6_reg_1501 + mul_ln30_7_fu_1186_p2);

assign add_ln30_13_fu_1203_p2 = (add_ln30_12_fu_1198_p2 + add_ln30_11_fu_1194_p2);

assign add_ln30_14_fu_1209_p2 = (add_ln30_13_fu_1203_p2 + add_ln30_10_fu_1190_p2);

assign add_ln30_1_fu_624_p2 = (zext_ln30_1_fu_620_p1 + B_read_reg_1241);

assign add_ln30_2_fu_704_p2 = (zext_ln30_2_fu_700_p1 + B_read_reg_1241);

assign add_ln30_3_fu_778_p2 = (zext_ln30_3_fu_774_p1 + B_read_reg_1241);

assign add_ln30_4_fu_858_p2 = (zext_ln30_4_fu_854_p1 + B_read_reg_1241);

assign add_ln30_5_fu_938_p2 = (zext_ln30_5_fu_934_p1 + B_read_reg_1241);

assign add_ln30_6_fu_1012_p2 = (zext_ln30_6_fu_1008_p1 + B_read_reg_1241);

assign add_ln30_7_fu_1086_p2 = (zext_ln30_7_fu_1082_p1 + B_read_reg_1241);

assign add_ln30_8_fu_1119_p2 = (mul_ln30_1_fu_1115_p2 + mul_ln30_reg_1411);

assign add_ln30_9_fu_1132_p2 = (mul_ln30_2_reg_1441 + mul_ln30_3_fu_1128_p2);

assign add_ln30_fu_515_p2 = (zext_ln30_fu_511_p1 + B_read_reg_1241);

assign add_ln32_fu_1161_p2 = (zext_ln32_fu_1157_p1 + AB_read_reg_1236);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == AB_port_AWREADY)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID) | (1'b1 == ap_block_state10_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == AB_port_AWREADY)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID) | (1'b1 == ap_block_state10_io))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == AB_port_WREADY)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == AB_port_WREADY)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == AB_port_BVALID)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == AB_port_BVALID)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID))));
end

always @ (*) begin
    ap_block_state10_io = ((1'b0 == B_port_ARREADY) | (1'b0 == A_port_ARREADY));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

always @ (*) begin
    ap_block_state14_pp0_stage4_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

always @ (*) begin
    ap_block_state15_pp0_stage5_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

always @ (*) begin
    ap_block_state16_pp0_stage6_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

always @ (*) begin
    ap_block_state17_pp0_stage7_iter1 = ((1'b0 == B_port_RVALID) | (1'b0 == A_port_RVALID));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp0_stage6_iter2 = (1'b0 == AB_port_BVALID);
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((1'b0 == B_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)) | ((1'b0 == A_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((1'b0 == B_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)) | ((1'b0 == A_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((1'b0 == B_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)) | ((1'b0 == A_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = (((1'b0 == B_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)) | ((1'b0 == A_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)));
end

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = (((1'b0 == B_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)) | ((1'b0 == A_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)));
end

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = (((1'b0 == B_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)) | ((1'b0 == A_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)));
end

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = (((1'b0 == B_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)) | ((1'b0 == A_port_ARREADY) & (icmp_ln26_reg_1265 == 1'd0)));
end

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln26_fu_400_p2 = ((indvar_flatten_fu_152 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_418_p2 = ((j_fu_144 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln26_1_fu_649_p2 = (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 | 6'd2);

assign or_ln26_2_fu_729_p2 = (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 | 6'd3);

assign or_ln26_3_fu_803_p2 = (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 | 6'd4);

assign or_ln26_4_fu_883_p2 = (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 | 6'd5);

assign or_ln26_5_fu_963_p2 = (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 | 6'd6);

assign or_ln26_6_fu_1037_p2 = (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 | 6'd7);

assign or_ln26_fu_568_p2 = (sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3 | 6'd1);

assign select_ln26_1_fu_446_p3 = ((icmp_ln27_fu_418_p2[0:0] == 1'b1) ? trunc_ln26_fu_438_p1 : trunc_ln26_1_fu_442_p1);

assign select_ln26_2_fu_485_p3 = ((icmp_ln27_fu_418_p2[0:0] == 1'b1) ? add_ln26_9_fu_432_p2 : i_fu_148);

assign select_ln26_fu_424_p3 = ((icmp_ln27_fu_418_p2[0:0] == 1'b1) ? 4'd0 : j_fu_144);

assign sext_ln26_1_fu_601_p1 = $signed(sext_ln30_2_mid2_v_fu_591_p4);

assign sext_ln26_2_fu_681_p1 = $signed(sext_ln30_4_mid2_v_fu_671_p4);

assign sext_ln26_3_fu_761_p1 = $signed(sext_ln30_6_mid2_v_fu_751_p4);

assign sext_ln26_4_fu_835_p1 = $signed(sext_ln30_8_mid2_v_fu_825_p4);

assign sext_ln26_5_fu_915_p1 = $signed(sext_ln30_10_mid2_v_fu_905_p4);

assign sext_ln26_6_fu_995_p1 = $signed(sext_ln30_12_mid2_v_fu_985_p4);

assign sext_ln26_7_fu_1069_p1 = $signed(sext_ln30_14_mid2_v_fu_1059_p4);

assign sext_ln26_fu_481_p1 = $signed(sext_ln30_mid2_v_fu_471_p4);

assign sext_ln30_10_fu_1101_p1 = $signed(trunc_ln30_7_fu_1091_p4);

assign sext_ln30_10_mid2_v_fu_905_p4 = {{add_ln26_6_fu_900_p2[63:2]}};

assign sext_ln30_10_mid2_v_v_v_v_v_fu_888_p3 = {{or_ln26_4_fu_883_p2}, {2'd0}};

assign sext_ln30_12_mid2_v_fu_985_p4 = {{add_ln26_7_fu_980_p2[63:2]}};

assign sext_ln30_12_mid2_v_v_v_v_v_fu_968_p3 = {{or_ln26_5_fu_963_p2}, {2'd0}};

assign sext_ln30_14_mid2_v_fu_1059_p4 = {{add_ln26_8_fu_1054_p2[63:2]}};

assign sext_ln30_14_mid2_v_v_v_v_v_fu_1042_p3 = {{or_ln26_6_fu_1037_p2}, {2'd0}};

assign sext_ln30_1_fu_639_p1 = $signed(trunc_ln30_4_fu_629_p4);

assign sext_ln30_2_fu_719_p1 = $signed(trunc_ln30_6_fu_709_p4);

assign sext_ln30_2_mid2_v_fu_591_p4 = {{add_ln26_2_fu_586_p2[63:2]}};

assign sext_ln30_2_mid2_v_v_v_v_v_fu_574_p3 = {{or_ln26_fu_568_p2}, {2'd0}};

assign sext_ln30_3_fu_771_p1 = zext_ln30_1_cast_reg_1312;

assign sext_ln30_4_fu_793_p1 = $signed(trunc_ln30_8_fu_783_p4);

assign sext_ln30_4_mid2_v_fu_671_p4 = {{add_ln26_3_fu_666_p2[63:2]}};

assign sext_ln30_4_mid2_v_v_v_v_v_fu_654_p3 = {{or_ln26_1_fu_649_p2}, {2'd0}};

assign sext_ln30_5_fu_873_p1 = $signed(trunc_ln30_s_fu_863_p4);

assign sext_ln30_6_fu_953_p1 = $signed(trunc_ln30_3_fu_943_p4);

assign sext_ln30_6_mid2_v_fu_751_p4 = {{add_ln26_4_fu_746_p2[63:2]}};

assign sext_ln30_6_mid2_v_v_v_v_v_fu_734_p3 = {{or_ln26_2_fu_729_p2}, {2'd0}};

assign sext_ln30_7_fu_1005_p1 = zext_ln30_2_cast_reg_1330;

assign sext_ln30_8_fu_1027_p1 = $signed(trunc_ln30_5_fu_1017_p4);

assign sext_ln30_8_mid2_v_fu_825_p4 = {{add_ln26_5_fu_820_p2[63:2]}};

assign sext_ln30_8_mid2_v_v_v_v_v_fu_808_p3 = {{or_ln26_3_fu_803_p2}, {2'd0}};

assign sext_ln30_9_fu_1079_p1 = zext_ln30_1_cast_reg_1312;

assign sext_ln30_fu_530_p1 = $signed(trunc_ln30_2_fu_520_p4);

assign sext_ln30_mid2_v_fu_471_p4 = {{add_ln26_1_fu_466_p2[63:2]}};

assign sext_ln30_mid2_v_v_v_v_v_fu_454_p3 = {{select_ln26_1_fu_446_p3}, {5'd0}};

assign sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3 = {{select_ln26_1_reg_1269}, {3'd0}};

assign sext_ln32_fu_1176_p1 = $signed(trunc_ln_fu_1166_p4);

assign shl_ln30_2_fu_503_p3 = {{trunc_ln30_fu_499_p1}, {2'd0}};

assign shl_ln_fu_1149_p4 = {{{select_ln26_1_reg_1269_pp0_iter1_reg}, {trunc_ln30_reg_1281_pp0_iter1_reg}}, {2'd0}};

assign trunc_ln26_1_fu_442_p1 = i_fu_148[2:0];

assign trunc_ln26_fu_438_p1 = add_ln26_9_fu_432_p2[2:0];

assign trunc_ln30_2_fu_520_p4 = {{add_ln30_fu_515_p2[63:2]}};

assign trunc_ln30_3_fu_943_p4 = {{add_ln30_5_fu_938_p2[63:2]}};

assign trunc_ln30_4_fu_629_p4 = {{add_ln30_1_fu_624_p2[63:2]}};

assign trunc_ln30_5_fu_1017_p4 = {{add_ln30_6_fu_1012_p2[63:2]}};

assign trunc_ln30_6_fu_709_p4 = {{add_ln30_2_fu_704_p2[63:2]}};

assign trunc_ln30_7_fu_1091_p4 = {{add_ln30_7_fu_1086_p2[63:2]}};

assign trunc_ln30_8_fu_783_p4 = {{add_ln30_3_fu_778_p2[63:2]}};

assign trunc_ln30_fu_499_p1 = select_ln26_fu_424_p3[2:0];

assign trunc_ln30_s_fu_863_p4 = {{add_ln30_4_fu_858_p2[63:2]}};

assign trunc_ln_fu_1166_p4 = {{add_ln32_fu_1161_p2[63:2]}};

assign zext_ln26_1_fu_582_p1 = sext_ln30_2_mid2_v_v_v_v_v_fu_574_p3;

assign zext_ln26_2_fu_662_p1 = sext_ln30_4_mid2_v_v_v_v_v_fu_654_p3;

assign zext_ln26_3_fu_742_p1 = sext_ln30_6_mid2_v_v_v_v_v_fu_734_p3;

assign zext_ln26_4_fu_816_p1 = sext_ln30_8_mid2_v_v_v_v_v_fu_808_p3;

assign zext_ln26_5_fu_896_p1 = sext_ln30_10_mid2_v_v_v_v_v_fu_888_p3;

assign zext_ln26_6_fu_976_p1 = sext_ln30_12_mid2_v_v_v_v_v_fu_968_p3;

assign zext_ln26_7_fu_1050_p1 = sext_ln30_14_mid2_v_v_v_v_v_fu_1042_p3;

assign zext_ln26_fu_462_p1 = sext_ln30_mid2_v_v_v_v_v_fu_454_p3;

assign zext_ln30_1_cast_fu_611_p4 = {{{{1'd1}, {trunc_ln30_reg_1281}}}, {2'd0}};

assign zext_ln30_1_fu_620_p1 = $unsigned(zext_ln30_1_cast_fu_611_p4);

assign zext_ln30_2_cast_fu_691_p4 = {{{{2'd2}, {trunc_ln30_reg_1281}}}, {2'd0}};

assign zext_ln30_2_fu_700_p1 = $unsigned(zext_ln30_2_cast_fu_691_p4);

assign zext_ln30_3_fu_774_p1 = $unsigned(sext_ln30_3_fu_771_p1);

assign zext_ln30_4_cast_fu_845_p4 = {{{{3'd4}, {trunc_ln30_reg_1281}}}, {2'd0}};

assign zext_ln30_4_fu_854_p1 = zext_ln30_4_cast_fu_845_p4;

assign zext_ln30_5_cast_fu_925_p4 = {{{{3'd5}, {trunc_ln30_reg_1281}}}, {2'd0}};

assign zext_ln30_5_fu_934_p1 = zext_ln30_5_cast_fu_925_p4;

assign zext_ln30_6_fu_1008_p1 = $unsigned(sext_ln30_7_fu_1005_p1);

assign zext_ln30_7_fu_1082_p1 = $unsigned(sext_ln30_9_fu_1079_p1);

assign zext_ln30_fu_511_p1 = shl_ln30_2_fu_503_p3;

assign zext_ln32_fu_1157_p1 = shl_ln_fu_1149_p4;

always @ (posedge ap_clk) begin
    sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296[2:0] <= 3'b000;
    zext_ln30_1_cast_reg_1312[1:0] <= 2'b00;
    zext_ln30_1_cast_reg_1312[5] <= 1'b1;
    zext_ln30_2_cast_reg_1330[1:0] <= 2'b00;
    zext_ln30_2_cast_reg_1330[6:5] <= 2'b10;
end

endmodule //mm
