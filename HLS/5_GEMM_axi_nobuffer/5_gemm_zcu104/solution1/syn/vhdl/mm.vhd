-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm is
generic (
    C_M_AXI_A_PORT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_A_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_AB_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AB_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AB_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_AB_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AB_PORT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_PORT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_PORT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_A_port_AWVALID : OUT STD_LOGIC;
    m_axi_A_port_AWREADY : IN STD_LOGIC;
    m_axi_A_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_A_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_A_port_WVALID : OUT STD_LOGIC;
    m_axi_A_port_WREADY : IN STD_LOGIC;
    m_axi_A_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_DATA_WIDTH-1 downto 0);
    m_axi_A_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_A_port_WLAST : OUT STD_LOGIC;
    m_axi_A_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_A_port_ARVALID : OUT STD_LOGIC;
    m_axi_A_port_ARREADY : IN STD_LOGIC;
    m_axi_A_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_A_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_A_port_RVALID : IN STD_LOGIC;
    m_axi_A_port_RREADY : OUT STD_LOGIC;
    m_axi_A_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_DATA_WIDTH-1 downto 0);
    m_axi_A_port_RLAST : IN STD_LOGIC;
    m_axi_A_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_A_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_BVALID : IN STD_LOGIC;
    m_axi_A_port_BREADY : OUT STD_LOGIC;
    m_axi_A_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_BUSER_WIDTH-1 downto 0);
    m_axi_B_port_AWVALID : OUT STD_LOGIC;
    m_axi_B_port_AWREADY : IN STD_LOGIC;
    m_axi_B_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_B_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_B_port_WVALID : OUT STD_LOGIC;
    m_axi_B_port_WREADY : IN STD_LOGIC;
    m_axi_B_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_DATA_WIDTH-1 downto 0);
    m_axi_B_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_B_port_WLAST : OUT STD_LOGIC;
    m_axi_B_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_B_port_ARVALID : OUT STD_LOGIC;
    m_axi_B_port_ARREADY : IN STD_LOGIC;
    m_axi_B_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_B_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_B_port_RVALID : IN STD_LOGIC;
    m_axi_B_port_RREADY : OUT STD_LOGIC;
    m_axi_B_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_DATA_WIDTH-1 downto 0);
    m_axi_B_port_RLAST : IN STD_LOGIC;
    m_axi_B_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_B_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_BVALID : IN STD_LOGIC;
    m_axi_B_port_BREADY : OUT STD_LOGIC;
    m_axi_B_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_BUSER_WIDTH-1 downto 0);
    m_axi_AB_port_AWVALID : OUT STD_LOGIC;
    m_axi_AB_port_AWREADY : IN STD_LOGIC;
    m_axi_AB_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_AB_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AB_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_AB_port_WVALID : OUT STD_LOGIC;
    m_axi_AB_port_WREADY : IN STD_LOGIC;
    m_axi_AB_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_DATA_WIDTH-1 downto 0);
    m_axi_AB_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_AB_port_WLAST : OUT STD_LOGIC;
    m_axi_AB_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_AB_port_ARVALID : OUT STD_LOGIC;
    m_axi_AB_port_ARREADY : IN STD_LOGIC;
    m_axi_AB_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_AB_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AB_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_AB_port_RVALID : IN STD_LOGIC;
    m_axi_AB_port_RREADY : OUT STD_LOGIC;
    m_axi_AB_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_DATA_WIDTH-1 downto 0);
    m_axi_AB_port_RLAST : IN STD_LOGIC;
    m_axi_AB_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_AB_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_BVALID : IN STD_LOGIC;
    m_axi_AB_port_BREADY : OUT STD_LOGIC;
    m_axi_AB_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mm_mm,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=528,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4474,HLS_SYN_LUT=6251,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal B : STD_LOGIC_VECTOR (63 downto 0);
    signal AB : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln26_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_port_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal B_port_blk_n_AR : STD_LOGIC;
    signal B_port_blk_n_R : STD_LOGIC;
    signal AB_port_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal AB_port_blk_n_W : STD_LOGIC;
    signal AB_port_blk_n_B : STD_LOGIC;
    signal AB_read_reg_1236 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_read_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_read_reg_1253 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln26_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal A_port_AWREADY : STD_LOGIC;
    signal A_port_WREADY : STD_LOGIC;
    signal A_port_ARVALID : STD_LOGIC;
    signal A_port_ARREADY : STD_LOGIC;
    signal A_port_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_RVALID : STD_LOGIC;
    signal A_port_RREADY : STD_LOGIC;
    signal A_port_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal A_port_BVALID : STD_LOGIC;
    signal B_port_AWREADY : STD_LOGIC;
    signal B_port_WREADY : STD_LOGIC;
    signal B_port_ARVALID : STD_LOGIC;
    signal B_port_ARREADY : STD_LOGIC;
    signal B_port_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal B_port_RVALID : STD_LOGIC;
    signal B_port_RREADY : STD_LOGIC;
    signal B_port_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal B_port_BVALID : STD_LOGIC;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal AB_port_AWVALID : STD_LOGIC;
    signal AB_port_AWREADY : STD_LOGIC;
    signal AB_port_WVALID : STD_LOGIC;
    signal AB_port_WREADY : STD_LOGIC;
    signal AB_port_ARREADY : STD_LOGIC;
    signal AB_port_RVALID : STD_LOGIC;
    signal AB_port_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_port_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal AB_port_BVALID : STD_LOGIC;
    signal AB_port_BREADY : STD_LOGIC;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln26_1_fu_446_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln26_1_reg_1269 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln26_1_reg_1269_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal A_port_addr_reg_1275 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_fu_499_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln30_reg_1281 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln30_reg_1281_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal B_port_addr_reg_1290 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal A_port_addr_1_reg_1306 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_cast_fu_611_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_1_cast_reg_1312 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_port_addr_1_reg_1318 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_addr_2_reg_1324 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal zext_ln30_2_cast_fu_691_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_2_cast_reg_1330 : STD_LOGIC_VECTOR (6 downto 0);
    signal B_port_addr_2_reg_1335 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_addr_3_reg_1341 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal B_port_addr_3_reg_1347 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_addr_4_reg_1353 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal B_port_addr_4_reg_1359 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_addr_5_reg_1365 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state15_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal B_port_addr_5_reg_1371 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_addr_6_reg_1377 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state16_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal B_port_addr_6_reg_1383 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_addr_7_reg_1389 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state17_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal B_port_addr_7_reg_1395 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_addr_read_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_read_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_1111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_reg_1411 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_addr_1_read_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_1_read_reg_1421 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_addr_2_read_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_2_read_reg_1431 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_8_fu_1119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_8_reg_1436 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_2_fu_1124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_2_reg_1441 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_addr_3_read_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_3_read_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_addr_4_read_reg_1456 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_4_read_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_9_fu_1132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_9_reg_1466 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_4_fu_1137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_4_reg_1471 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_addr_5_read_reg_1476 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_5_read_reg_1481 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_5_fu_1141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_5_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_addr_6_read_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_6_read_reg_1496 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_6_fu_1145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_6_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_addr_7_read_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_addr_7_read_reg_1511 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_port_addr_reg_1516 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_14_fu_1209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_14_reg_1522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal sext_ln26_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_1_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_1_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_2_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_2_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_3_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_4_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_4_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_5_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_5_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_6_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_6_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_8_fu_1027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_7_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_10_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_fu_1176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal j_fu_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_148 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln26_2_fu_485_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_152 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_fu_406_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln27_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_9_fu_432_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln26_fu_438_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln26_1_fu_442_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln30_mid2_v_v_v_v_v_fu_454_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_1_fu_466_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_mid2_v_fu_471_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln26_fu_424_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln30_2_fu_503_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_2_fu_520_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln26_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_2_mid2_v_v_v_v_v_fu_574_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_1_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_2_fu_586_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_2_mid2_v_fu_591_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln30_1_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_1_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_4_fu_629_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln26_1_fu_649_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_4_mid2_v_v_v_v_v_fu_654_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_2_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_3_fu_666_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_4_mid2_v_fu_671_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln30_2_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_2_fu_704_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_6_fu_709_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln26_2_fu_729_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_6_mid2_v_v_v_v_v_fu_734_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_3_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_4_fu_746_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_6_mid2_v_fu_751_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln30_3_fu_771_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_3_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_3_fu_778_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_8_fu_783_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln26_3_fu_803_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_8_mid2_v_v_v_v_v_fu_808_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_4_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_5_fu_820_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_8_mid2_v_fu_825_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln30_4_cast_fu_845_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_4_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_4_fu_858_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_s_fu_863_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln26_4_fu_883_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_10_mid2_v_v_v_v_v_fu_888_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_5_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_6_fu_900_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_10_mid2_v_fu_905_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln30_5_cast_fu_925_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_5_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_5_fu_938_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_3_fu_943_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln26_5_fu_963_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_12_mid2_v_v_v_v_v_fu_968_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_6_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_7_fu_980_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_12_mid2_v_fu_985_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln30_7_fu_1005_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_6_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_6_fu_1012_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_5_fu_1017_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln26_6_fu_1037_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln30_14_mid2_v_v_v_v_v_fu_1042_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_7_fu_1050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_8_fu_1054_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_14_mid2_v_fu_1059_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln30_9_fu_1079_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_7_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_7_fu_1086_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_7_fu_1091_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln30_1_fu_1115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_3_fu_1128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_1149_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_fu_1161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_1166_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln30_7_fu_1186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_12_fu_1198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_11_fu_1194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_13_fu_1203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_10_fu_1190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        B : OUT STD_LOGIC_VECTOR (63 downto 0);
        AB : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component mm_AB_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component mm_A_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component mm_B_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    CONTROL_BUS_s_axi_U : component mm_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        B => B,
        AB => AB,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AB_port_m_axi_U : component mm_AB_port_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AB_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AB_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AB_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AB_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AB_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AB_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AB_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AB_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AB_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AB_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AB_PORT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_AB_port_AWVALID,
        AWREADY => m_axi_AB_port_AWREADY,
        AWADDR => m_axi_AB_port_AWADDR,
        AWID => m_axi_AB_port_AWID,
        AWLEN => m_axi_AB_port_AWLEN,
        AWSIZE => m_axi_AB_port_AWSIZE,
        AWBURST => m_axi_AB_port_AWBURST,
        AWLOCK => m_axi_AB_port_AWLOCK,
        AWCACHE => m_axi_AB_port_AWCACHE,
        AWPROT => m_axi_AB_port_AWPROT,
        AWQOS => m_axi_AB_port_AWQOS,
        AWREGION => m_axi_AB_port_AWREGION,
        AWUSER => m_axi_AB_port_AWUSER,
        WVALID => m_axi_AB_port_WVALID,
        WREADY => m_axi_AB_port_WREADY,
        WDATA => m_axi_AB_port_WDATA,
        WSTRB => m_axi_AB_port_WSTRB,
        WLAST => m_axi_AB_port_WLAST,
        WID => m_axi_AB_port_WID,
        WUSER => m_axi_AB_port_WUSER,
        ARVALID => m_axi_AB_port_ARVALID,
        ARREADY => m_axi_AB_port_ARREADY,
        ARADDR => m_axi_AB_port_ARADDR,
        ARID => m_axi_AB_port_ARID,
        ARLEN => m_axi_AB_port_ARLEN,
        ARSIZE => m_axi_AB_port_ARSIZE,
        ARBURST => m_axi_AB_port_ARBURST,
        ARLOCK => m_axi_AB_port_ARLOCK,
        ARCACHE => m_axi_AB_port_ARCACHE,
        ARPROT => m_axi_AB_port_ARPROT,
        ARQOS => m_axi_AB_port_ARQOS,
        ARREGION => m_axi_AB_port_ARREGION,
        ARUSER => m_axi_AB_port_ARUSER,
        RVALID => m_axi_AB_port_RVALID,
        RREADY => m_axi_AB_port_RREADY,
        RDATA => m_axi_AB_port_RDATA,
        RLAST => m_axi_AB_port_RLAST,
        RID => m_axi_AB_port_RID,
        RUSER => m_axi_AB_port_RUSER,
        RRESP => m_axi_AB_port_RRESP,
        BVALID => m_axi_AB_port_BVALID,
        BREADY => m_axi_AB_port_BREADY,
        BRESP => m_axi_AB_port_BRESP,
        BID => m_axi_AB_port_BID,
        BUSER => m_axi_AB_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => AB_port_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => AB_port_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => AB_port_RDATA,
        I_RFIFONUM => AB_port_RFIFONUM,
        I_AWVALID => AB_port_AWVALID,
        I_AWREADY => AB_port_AWREADY,
        I_AWADDR => AB_port_addr_reg_1516,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => AB_port_WVALID,
        I_WREADY => AB_port_WREADY,
        I_WDATA => add_ln30_14_reg_1522,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => AB_port_BVALID,
        I_BREADY => AB_port_BREADY);

    A_port_m_axi_U : component mm_A_port_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_PORT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_A_port_AWVALID,
        AWREADY => m_axi_A_port_AWREADY,
        AWADDR => m_axi_A_port_AWADDR,
        AWID => m_axi_A_port_AWID,
        AWLEN => m_axi_A_port_AWLEN,
        AWSIZE => m_axi_A_port_AWSIZE,
        AWBURST => m_axi_A_port_AWBURST,
        AWLOCK => m_axi_A_port_AWLOCK,
        AWCACHE => m_axi_A_port_AWCACHE,
        AWPROT => m_axi_A_port_AWPROT,
        AWQOS => m_axi_A_port_AWQOS,
        AWREGION => m_axi_A_port_AWREGION,
        AWUSER => m_axi_A_port_AWUSER,
        WVALID => m_axi_A_port_WVALID,
        WREADY => m_axi_A_port_WREADY,
        WDATA => m_axi_A_port_WDATA,
        WSTRB => m_axi_A_port_WSTRB,
        WLAST => m_axi_A_port_WLAST,
        WID => m_axi_A_port_WID,
        WUSER => m_axi_A_port_WUSER,
        ARVALID => m_axi_A_port_ARVALID,
        ARREADY => m_axi_A_port_ARREADY,
        ARADDR => m_axi_A_port_ARADDR,
        ARID => m_axi_A_port_ARID,
        ARLEN => m_axi_A_port_ARLEN,
        ARSIZE => m_axi_A_port_ARSIZE,
        ARBURST => m_axi_A_port_ARBURST,
        ARLOCK => m_axi_A_port_ARLOCK,
        ARCACHE => m_axi_A_port_ARCACHE,
        ARPROT => m_axi_A_port_ARPROT,
        ARQOS => m_axi_A_port_ARQOS,
        ARREGION => m_axi_A_port_ARREGION,
        ARUSER => m_axi_A_port_ARUSER,
        RVALID => m_axi_A_port_RVALID,
        RREADY => m_axi_A_port_RREADY,
        RDATA => m_axi_A_port_RDATA,
        RLAST => m_axi_A_port_RLAST,
        RID => m_axi_A_port_RID,
        RUSER => m_axi_A_port_RUSER,
        RRESP => m_axi_A_port_RRESP,
        BVALID => m_axi_A_port_BVALID,
        BREADY => m_axi_A_port_BREADY,
        BRESP => m_axi_A_port_BRESP,
        BID => m_axi_A_port_BID,
        BUSER => m_axi_A_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_port_ARVALID,
        I_ARREADY => A_port_ARREADY,
        I_ARADDR => A_port_ARADDR,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => A_port_RVALID,
        I_RREADY => A_port_RREADY,
        I_RDATA => A_port_RDATA,
        I_RFIFONUM => A_port_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => A_port_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => A_port_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => A_port_BVALID,
        I_BREADY => ap_const_logic_0);

    B_port_m_axi_U : component mm_B_port_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_PORT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_B_port_AWVALID,
        AWREADY => m_axi_B_port_AWREADY,
        AWADDR => m_axi_B_port_AWADDR,
        AWID => m_axi_B_port_AWID,
        AWLEN => m_axi_B_port_AWLEN,
        AWSIZE => m_axi_B_port_AWSIZE,
        AWBURST => m_axi_B_port_AWBURST,
        AWLOCK => m_axi_B_port_AWLOCK,
        AWCACHE => m_axi_B_port_AWCACHE,
        AWPROT => m_axi_B_port_AWPROT,
        AWQOS => m_axi_B_port_AWQOS,
        AWREGION => m_axi_B_port_AWREGION,
        AWUSER => m_axi_B_port_AWUSER,
        WVALID => m_axi_B_port_WVALID,
        WREADY => m_axi_B_port_WREADY,
        WDATA => m_axi_B_port_WDATA,
        WSTRB => m_axi_B_port_WSTRB,
        WLAST => m_axi_B_port_WLAST,
        WID => m_axi_B_port_WID,
        WUSER => m_axi_B_port_WUSER,
        ARVALID => m_axi_B_port_ARVALID,
        ARREADY => m_axi_B_port_ARREADY,
        ARADDR => m_axi_B_port_ARADDR,
        ARID => m_axi_B_port_ARID,
        ARLEN => m_axi_B_port_ARLEN,
        ARSIZE => m_axi_B_port_ARSIZE,
        ARBURST => m_axi_B_port_ARBURST,
        ARLOCK => m_axi_B_port_ARLOCK,
        ARCACHE => m_axi_B_port_ARCACHE,
        ARPROT => m_axi_B_port_ARPROT,
        ARQOS => m_axi_B_port_ARQOS,
        ARREGION => m_axi_B_port_ARREGION,
        ARUSER => m_axi_B_port_ARUSER,
        RVALID => m_axi_B_port_RVALID,
        RREADY => m_axi_B_port_RREADY,
        RDATA => m_axi_B_port_RDATA,
        RLAST => m_axi_B_port_RLAST,
        RID => m_axi_B_port_RID,
        RUSER => m_axi_B_port_RUSER,
        RRESP => m_axi_B_port_RRESP,
        BVALID => m_axi_B_port_BVALID,
        BREADY => m_axi_B_port_BREADY,
        BRESP => m_axi_B_port_BRESP,
        BID => m_axi_B_port_BID,
        BUSER => m_axi_B_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B_port_ARVALID,
        I_ARREADY => B_port_ARREADY,
        I_ARADDR => B_port_ARADDR,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => B_port_RVALID,
        I_RREADY => B_port_RREADY,
        I_RDATA => B_port_RDATA,
        I_RFIFONUM => B_port_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => B_port_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => B_port_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => B_port_BVALID,
        I_BREADY => ap_const_logic_0);

    mul_32s_32s_32_1_1_U1 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_read_reg_1406,
        din1 => A_port_addr_read_reg_1401,
        dout => mul_ln30_fu_1111_p2);

    mul_32s_32s_32_1_1_U2 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_1_read_reg_1421,
        din1 => A_port_addr_1_read_reg_1416,
        dout => mul_ln30_1_fu_1115_p2);

    mul_32s_32s_32_1_1_U3 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_2_read_reg_1431,
        din1 => A_port_addr_2_read_reg_1426,
        dout => mul_ln30_2_fu_1124_p2);

    mul_32s_32s_32_1_1_U4 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_3_read_reg_1451,
        din1 => A_port_addr_3_read_reg_1446,
        dout => mul_ln30_3_fu_1128_p2);

    mul_32s_32s_32_1_1_U5 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_4_read_reg_1461,
        din1 => A_port_addr_4_read_reg_1456,
        dout => mul_ln30_4_fu_1137_p2);

    mul_32s_32s_32_1_1_U6 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_5_read_reg_1481,
        din1 => A_port_addr_5_read_reg_1476,
        dout => mul_ln30_5_fu_1141_p2);

    mul_32s_32s_32_1_1_U7 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_6_read_reg_1496,
        din1 => A_port_addr_6_read_reg_1491,
        dout => mul_ln30_6_fu_1145_p2);

    mul_32s_32s_32_1_1_U8 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_port_addr_7_read_reg_1511,
        din1 => A_port_addr_7_read_reg_1506,
        dout => mul_ln30_7_fu_1186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_148 <= ap_const_lv4_0;
            elsif (((icmp_ln26_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_fu_148 <= select_ln26_2_fu_485_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_152 <= ap_const_lv7_0;
            elsif (((icmp_ln26_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_fu_152 <= add_ln26_fu_406_p2;
            end if; 
        end if;
    end process;

    j_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_144 <= ap_const_lv4_0;
            elsif (((icmp_ln26_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_fu_144 <= add_ln27_fu_540_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                AB_port_addr_reg_1516 <= sext_ln32_fu_1176_p1;
                A_port_addr_7_read_reg_1506 <= A_port_RDATA;
                B_port_addr_7_read_reg_1511 <= B_port_RDATA;
                mul_ln30_6_reg_1501 <= mul_ln30_6_fu_1145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                AB_read_reg_1236 <= AB;
                A_read_reg_1253 <= A;
                B_read_reg_1241 <= B;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                A_port_addr_1_read_reg_1416 <= A_port_RDATA;
                B_port_addr_1_read_reg_1421 <= B_port_RDATA;
                mul_ln30_reg_1411 <= mul_ln30_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                A_port_addr_1_reg_1306 <= sext_ln26_1_fu_601_p1;
                B_port_addr_1_reg_1318 <= sext_ln30_1_fu_639_p1;
                    sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296(5 downto 3) <= sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3(5 downto 3);
                    zext_ln30_1_cast_reg_1312(4 downto 2) <= zext_ln30_1_cast_fu_611_p4(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                A_port_addr_2_read_reg_1426 <= A_port_RDATA;
                B_port_addr_2_read_reg_1431 <= B_port_RDATA;
                add_ln30_8_reg_1436 <= add_ln30_8_fu_1119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                A_port_addr_2_reg_1324 <= sext_ln26_2_fu_681_p1;
                B_port_addr_2_reg_1335 <= sext_ln30_2_fu_719_p1;
                    zext_ln30_2_cast_reg_1330(4 downto 2) <= zext_ln30_2_cast_fu_691_p4(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                A_port_addr_3_read_reg_1446 <= A_port_RDATA;
                B_port_addr_3_read_reg_1451 <= B_port_RDATA;
                mul_ln30_2_reg_1441 <= mul_ln30_2_fu_1124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                A_port_addr_3_reg_1341 <= sext_ln26_3_fu_761_p1;
                B_port_addr_3_reg_1347 <= sext_ln30_4_fu_793_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                A_port_addr_4_read_reg_1456 <= A_port_RDATA;
                B_port_addr_4_read_reg_1461 <= B_port_RDATA;
                add_ln30_9_reg_1466 <= add_ln30_9_fu_1132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                A_port_addr_4_reg_1353 <= sext_ln26_4_fu_835_p1;
                B_port_addr_4_reg_1359 <= sext_ln30_5_fu_873_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                A_port_addr_5_read_reg_1476 <= A_port_RDATA;
                B_port_addr_5_read_reg_1481 <= B_port_RDATA;
                mul_ln30_4_reg_1471 <= mul_ln30_4_fu_1137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                A_port_addr_5_reg_1365 <= sext_ln26_5_fu_915_p1;
                B_port_addr_5_reg_1371 <= sext_ln30_6_fu_953_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                A_port_addr_6_read_reg_1491 <= A_port_RDATA;
                B_port_addr_6_read_reg_1496 <= B_port_RDATA;
                mul_ln30_5_reg_1486 <= mul_ln30_5_fu_1141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                A_port_addr_6_reg_1377 <= sext_ln26_6_fu_995_p1;
                B_port_addr_6_reg_1383 <= sext_ln30_8_fu_1027_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                A_port_addr_7_reg_1389 <= sext_ln26_7_fu_1069_p1;
                B_port_addr_7_reg_1395 <= sext_ln30_10_fu_1101_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A_port_addr_read_reg_1401 <= A_port_RDATA;
                B_port_addr_read_reg_1406 <= B_port_RDATA;
                add_ln30_14_reg_1522 <= add_ln30_14_fu_1209_p2;
                icmp_ln26_reg_1265 <= icmp_ln26_fu_400_p2;
                select_ln26_1_reg_1269_pp0_iter1_reg <= select_ln26_1_reg_1269;
                trunc_ln30_reg_1281_pp0_iter1_reg <= trunc_ln30_reg_1281;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A_port_addr_reg_1275 <= sext_ln26_fu_481_p1;
                B_port_addr_reg_1290 <= sext_ln30_fu_530_p1;
                select_ln26_1_reg_1269 <= select_ln26_1_fu_446_p3;
                trunc_ln30_reg_1281 <= trunc_ln30_fu_499_p1;
            end if;
        end if;
    end process;
    sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296(2 downto 0) <= "000";
    zext_ln30_1_cast_reg_1312(1 downto 0) <= "00";
    zext_ln30_1_cast_reg_1312(5) <= '1';
    zext_ln30_2_cast_reg_1330(1 downto 0) <= "00";
    zext_ln30_2_cast_reg_1330(6 downto 5) <= "10";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter2, icmp_ln26_fu_400_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln26_fu_400_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln26_fu_400_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    AB_port_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AB_port_AWVALID <= ap_const_logic_1;
        else 
            AB_port_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    AB_port_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter2, ap_block_pp0_stage6_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then 
            AB_port_BREADY <= ap_const_logic_1;
        else 
            AB_port_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    AB_port_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            AB_port_WVALID <= ap_const_logic_1;
        else 
            AB_port_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    AB_port_blk_n_AW_assign_proc : process(m_axi_AB_port_AWREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            AB_port_blk_n_AW <= m_axi_AB_port_AWREADY;
        else 
            AB_port_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    AB_port_blk_n_B_assign_proc : process(m_axi_AB_port_BVALID, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            AB_port_blk_n_B <= m_axi_AB_port_BVALID;
        else 
            AB_port_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    AB_port_blk_n_W_assign_proc : process(m_axi_AB_port_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            AB_port_blk_n_W <= m_axi_AB_port_WREADY;
        else 
            AB_port_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    A_port_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln26_reg_1265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0_11001, A_port_addr_reg_1275, ap_block_pp0_stage1_11001, A_port_addr_1_reg_1306, A_port_addr_2_reg_1324, ap_block_pp0_stage2_11001, A_port_addr_3_reg_1341, ap_block_pp0_stage3_11001, A_port_addr_4_reg_1353, ap_block_pp0_stage4_11001, A_port_addr_5_reg_1365, ap_block_pp0_stage5_11001, A_port_addr_6_reg_1377, ap_block_pp0_stage6_11001, A_port_addr_7_reg_1389, ap_block_pp0_stage7_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_port_ARADDR <= A_port_addr_7_reg_1389;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_port_ARADDR <= A_port_addr_6_reg_1377;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_port_ARADDR <= A_port_addr_5_reg_1365;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_port_ARADDR <= A_port_addr_4_reg_1353;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_port_ARADDR <= A_port_addr_3_reg_1341;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_port_ARADDR <= A_port_addr_2_reg_1324;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_port_ARADDR <= A_port_addr_1_reg_1306;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_port_ARADDR <= A_port_addr_reg_1275;
        else 
            A_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_port_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln26_reg_1265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            A_port_ARVALID <= ap_const_logic_1;
        else 
            A_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_port_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            A_port_RREADY <= ap_const_logic_1;
        else 
            A_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_port_blk_n_AR_assign_proc : process(m_axi_A_port_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln26_reg_1265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            A_port_blk_n_AR <= m_axi_A_port_ARREADY;
        else 
            A_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_port_blk_n_R_assign_proc : process(m_axi_A_port_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            A_port_blk_n_R <= m_axi_A_port_RVALID;
        else 
            A_port_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    B_port_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln26_reg_1265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0_11001, B_port_addr_reg_1290, ap_block_pp0_stage1_11001, B_port_addr_1_reg_1318, ap_block_pp0_stage2_11001, B_port_addr_2_reg_1335, ap_block_pp0_stage3_11001, B_port_addr_3_reg_1347, ap_block_pp0_stage4_11001, B_port_addr_4_reg_1359, ap_block_pp0_stage5_11001, B_port_addr_5_reg_1371, ap_block_pp0_stage6_11001, B_port_addr_6_reg_1383, ap_block_pp0_stage7_11001, B_port_addr_7_reg_1395)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_port_ARADDR <= B_port_addr_7_reg_1395;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_port_ARADDR <= B_port_addr_6_reg_1383;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_port_ARADDR <= B_port_addr_5_reg_1371;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_port_ARADDR <= B_port_addr_4_reg_1359;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_port_ARADDR <= B_port_addr_3_reg_1347;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_port_ARADDR <= B_port_addr_2_reg_1335;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_port_ARADDR <= B_port_addr_1_reg_1318;
        elsif (((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_port_ARADDR <= B_port_addr_reg_1290;
        else 
            B_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_port_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln26_reg_1265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            B_port_ARVALID <= ap_const_logic_1;
        else 
            B_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    B_port_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            B_port_RREADY <= ap_const_logic_1;
        else 
            B_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    B_port_blk_n_AR_assign_proc : process(m_axi_B_port_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln26_reg_1265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln26_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            B_port_blk_n_AR <= m_axi_B_port_ARREADY;
        else 
            B_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B_port_blk_n_R_assign_proc : process(m_axi_B_port_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            B_port_blk_n_R <= m_axi_B_port_RVALID;
        else 
            B_port_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln26_1_fu_466_p2 <= std_logic_vector(unsigned(zext_ln26_fu_462_p1) + unsigned(A_read_reg_1253));
    add_ln26_2_fu_586_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_582_p1) + unsigned(A_read_reg_1253));
    add_ln26_3_fu_666_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_662_p1) + unsigned(A_read_reg_1253));
    add_ln26_4_fu_746_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_742_p1) + unsigned(A_read_reg_1253));
    add_ln26_5_fu_820_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_816_p1) + unsigned(A_read_reg_1253));
    add_ln26_6_fu_900_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_896_p1) + unsigned(A_read_reg_1253));
    add_ln26_7_fu_980_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_976_p1) + unsigned(A_read_reg_1253));
    add_ln26_8_fu_1054_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_1050_p1) + unsigned(A_read_reg_1253));
    add_ln26_9_fu_432_p2 <= std_logic_vector(unsigned(i_fu_148) + unsigned(ap_const_lv4_1));
    add_ln26_fu_406_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_152) + unsigned(ap_const_lv7_1));
    add_ln27_fu_540_p2 <= std_logic_vector(unsigned(select_ln26_fu_424_p3) + unsigned(ap_const_lv4_1));
    add_ln30_10_fu_1190_p2 <= std_logic_vector(unsigned(add_ln30_9_reg_1466) + unsigned(add_ln30_8_reg_1436));
    add_ln30_11_fu_1194_p2 <= std_logic_vector(unsigned(mul_ln30_4_reg_1471) + unsigned(mul_ln30_5_reg_1486));
    add_ln30_12_fu_1198_p2 <= std_logic_vector(unsigned(mul_ln30_6_reg_1501) + unsigned(mul_ln30_7_fu_1186_p2));
    add_ln30_13_fu_1203_p2 <= std_logic_vector(unsigned(add_ln30_12_fu_1198_p2) + unsigned(add_ln30_11_fu_1194_p2));
    add_ln30_14_fu_1209_p2 <= std_logic_vector(unsigned(add_ln30_13_fu_1203_p2) + unsigned(add_ln30_10_fu_1190_p2));
    add_ln30_1_fu_624_p2 <= std_logic_vector(unsigned(zext_ln30_1_fu_620_p1) + unsigned(B_read_reg_1241));
    add_ln30_2_fu_704_p2 <= std_logic_vector(unsigned(zext_ln30_2_fu_700_p1) + unsigned(B_read_reg_1241));
    add_ln30_3_fu_778_p2 <= std_logic_vector(unsigned(zext_ln30_3_fu_774_p1) + unsigned(B_read_reg_1241));
    add_ln30_4_fu_858_p2 <= std_logic_vector(unsigned(zext_ln30_4_fu_854_p1) + unsigned(B_read_reg_1241));
    add_ln30_5_fu_938_p2 <= std_logic_vector(unsigned(zext_ln30_5_fu_934_p1) + unsigned(B_read_reg_1241));
    add_ln30_6_fu_1012_p2 <= std_logic_vector(unsigned(zext_ln30_6_fu_1008_p1) + unsigned(B_read_reg_1241));
    add_ln30_7_fu_1086_p2 <= std_logic_vector(unsigned(zext_ln30_7_fu_1082_p1) + unsigned(B_read_reg_1241));
    add_ln30_8_fu_1119_p2 <= std_logic_vector(unsigned(mul_ln30_1_fu_1115_p2) + unsigned(mul_ln30_reg_1411));
    add_ln30_9_fu_1132_p2 <= std_logic_vector(unsigned(mul_ln30_2_reg_1441) + unsigned(mul_ln30_3_fu_1128_p2));
    add_ln30_fu_515_p2 <= std_logic_vector(unsigned(zext_ln30_fu_511_p1) + unsigned(B_read_reg_1241));
    add_ln32_fu_1161_p2 <= std_logic_vector(unsigned(zext_ln32_fu_1157_p1) + unsigned(AB_read_reg_1236));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state25 <= ap_CS_fsm(9);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, A_port_RVALID, B_port_RVALID, ap_block_state10_io, AB_port_AWREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = AB_port_AWREADY)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID) or (ap_const_boolean_1 = ap_block_state10_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, A_port_RVALID, B_port_RVALID, ap_block_state10_io, AB_port_AWREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = AB_port_AWREADY)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID) or (ap_const_boolean_1 = ap_block_state10_io))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, A_port_RVALID, B_port_RVALID, AB_port_WREADY, ap_block_state3_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = AB_port_WREADY)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, A_port_RVALID, B_port_RVALID, AB_port_WREADY, ap_block_state3_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = AB_port_WREADY)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state6_io)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state6_io)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state7_io)
    begin
                ap_block_pp0_stage5_11001 <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state7_io)
    begin
                ap_block_pp0_stage5_subdone <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, A_port_RVALID, B_port_RVALID, AB_port_BVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage6_11001 <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = AB_port_BVALID)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, A_port_RVALID, B_port_RVALID, AB_port_BVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage6_subdone <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = AB_port_BVALID)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state9_io)
    begin
                ap_block_pp0_stage7_11001 <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, A_port_RVALID, B_port_RVALID, ap_block_state9_io)
    begin
                ap_block_pp0_stage7_subdone <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID))));
    end process;


    ap_block_state10_io_assign_proc : process(A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state10_io <= ((ap_const_logic_0 = B_port_ARREADY) or (ap_const_logic_0 = A_port_ARREADY));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;


    ap_block_state11_pp0_stage1_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state11_pp0_stage1_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;


    ap_block_state12_pp0_stage2_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state12_pp0_stage2_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;


    ap_block_state13_pp0_stage3_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state13_pp0_stage3_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;


    ap_block_state14_pp0_stage4_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state14_pp0_stage4_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;


    ap_block_state15_pp0_stage5_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state15_pp0_stage5_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;


    ap_block_state16_pp0_stage6_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state16_pp0_stage6_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;


    ap_block_state17_pp0_stage7_iter1_assign_proc : process(A_port_RVALID, B_port_RVALID)
    begin
                ap_block_state17_pp0_stage7_iter1 <= ((ap_const_logic_0 = B_port_RVALID) or (ap_const_logic_0 = A_port_RVALID));
    end process;

        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_pp0_stage6_iter2_assign_proc : process(AB_port_BVALID)
    begin
                ap_block_state24_pp0_stage6_iter2 <= (ap_const_logic_0 = AB_port_BVALID);
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(icmp_ln26_reg_1265, A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state3_io <= (((ap_const_logic_0 = B_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)) or ((ap_const_logic_0 = A_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(icmp_ln26_reg_1265, A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state4_io <= (((ap_const_logic_0 = B_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)) or ((ap_const_logic_0 = A_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln26_reg_1265, A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state5_io <= (((ap_const_logic_0 = B_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)) or ((ap_const_logic_0 = A_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)));
    end process;

        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(icmp_ln26_reg_1265, A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state6_io <= (((ap_const_logic_0 = B_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)) or ((ap_const_logic_0 = A_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)));
    end process;

        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(icmp_ln26_reg_1265, A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state7_io <= (((ap_const_logic_0 = B_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)) or ((ap_const_logic_0 = A_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)));
    end process;

        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(icmp_ln26_reg_1265, A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state8_io <= (((ap_const_logic_0 = B_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)) or ((ap_const_logic_0 = A_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)));
    end process;

        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(icmp_ln26_reg_1265, A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state9_io <= (((ap_const_logic_0 = B_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)) or ((ap_const_logic_0 = A_port_ARREADY) and (icmp_ln26_reg_1265 = ap_const_lv1_0)));
    end process;

        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln26_fu_400_p2)
    begin
        if ((icmp_ln26_fu_400_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln26_fu_400_p2 <= "1" when (indvar_flatten_fu_152 = ap_const_lv7_40) else "0";
    icmp_ln27_fu_418_p2 <= "1" when (j_fu_144 = ap_const_lv4_8) else "0";
    or_ln26_1_fu_649_p2 <= (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 or ap_const_lv6_2);
    or_ln26_2_fu_729_p2 <= (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 or ap_const_lv6_3);
    or_ln26_3_fu_803_p2 <= (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 or ap_const_lv6_4);
    or_ln26_4_fu_883_p2 <= (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 or ap_const_lv6_5);
    or_ln26_5_fu_963_p2 <= (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 or ap_const_lv6_6);
    or_ln26_6_fu_1037_p2 <= (sext_ln30_mid2_v_v_v_v_v_v_v_reg_1296 or ap_const_lv6_7);
    or_ln26_fu_568_p2 <= (sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3 or ap_const_lv6_1);
    select_ln26_1_fu_446_p3 <= 
        trunc_ln26_fu_438_p1 when (icmp_ln27_fu_418_p2(0) = '1') else 
        trunc_ln26_1_fu_442_p1;
    select_ln26_2_fu_485_p3 <= 
        add_ln26_9_fu_432_p2 when (icmp_ln27_fu_418_p2(0) = '1') else 
        i_fu_148;
    select_ln26_fu_424_p3 <= 
        ap_const_lv4_0 when (icmp_ln27_fu_418_p2(0) = '1') else 
        j_fu_144;
        sext_ln26_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_2_mid2_v_fu_591_p4),64));

        sext_ln26_2_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_4_mid2_v_fu_671_p4),64));

        sext_ln26_3_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_6_mid2_v_fu_751_p4),64));

        sext_ln26_4_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_8_mid2_v_fu_825_p4),64));

        sext_ln26_5_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_10_mid2_v_fu_905_p4),64));

        sext_ln26_6_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_12_mid2_v_fu_985_p4),64));

        sext_ln26_7_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_14_mid2_v_fu_1059_p4),64));

        sext_ln26_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_mid2_v_fu_471_p4),64));

        sext_ln30_10_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_7_fu_1091_p4),64));

    sext_ln30_10_mid2_v_fu_905_p4 <= add_ln26_6_fu_900_p2(63 downto 2);
    sext_ln30_10_mid2_v_v_v_v_v_fu_888_p3 <= (or_ln26_4_fu_883_p2 & ap_const_lv2_0);
    sext_ln30_12_mid2_v_fu_985_p4 <= add_ln26_7_fu_980_p2(63 downto 2);
    sext_ln30_12_mid2_v_v_v_v_v_fu_968_p3 <= (or_ln26_5_fu_963_p2 & ap_const_lv2_0);
    sext_ln30_14_mid2_v_fu_1059_p4 <= add_ln26_8_fu_1054_p2(63 downto 2);
    sext_ln30_14_mid2_v_v_v_v_v_fu_1042_p3 <= (or_ln26_6_fu_1037_p2 & ap_const_lv2_0);
        sext_ln30_1_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_4_fu_629_p4),64));

        sext_ln30_2_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_6_fu_709_p4),64));

    sext_ln30_2_mid2_v_fu_591_p4 <= add_ln26_2_fu_586_p2(63 downto 2);
    sext_ln30_2_mid2_v_v_v_v_v_fu_574_p3 <= (or_ln26_fu_568_p2 & ap_const_lv2_0);
        sext_ln30_3_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln30_1_cast_reg_1312),7));

        sext_ln30_4_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_8_fu_783_p4),64));

    sext_ln30_4_mid2_v_fu_671_p4 <= add_ln26_3_fu_666_p2(63 downto 2);
    sext_ln30_4_mid2_v_v_v_v_v_fu_654_p3 <= (or_ln26_1_fu_649_p2 & ap_const_lv2_0);
        sext_ln30_5_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_s_fu_863_p4),64));

        sext_ln30_6_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_3_fu_943_p4),64));

    sext_ln30_6_mid2_v_fu_751_p4 <= add_ln26_4_fu_746_p2(63 downto 2);
    sext_ln30_6_mid2_v_v_v_v_v_fu_734_p3 <= (or_ln26_2_fu_729_p2 & ap_const_lv2_0);
        sext_ln30_7_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln30_2_cast_reg_1330),8));

        sext_ln30_8_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_5_fu_1017_p4),64));

    sext_ln30_8_mid2_v_fu_825_p4 <= add_ln26_5_fu_820_p2(63 downto 2);
    sext_ln30_8_mid2_v_v_v_v_v_fu_808_p3 <= (or_ln26_3_fu_803_p2 & ap_const_lv2_0);
        sext_ln30_9_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln30_1_cast_reg_1312),8));

        sext_ln30_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_2_fu_520_p4),64));

    sext_ln30_mid2_v_fu_471_p4 <= add_ln26_1_fu_466_p2(63 downto 2);
    sext_ln30_mid2_v_v_v_v_v_fu_454_p3 <= (select_ln26_1_fu_446_p3 & ap_const_lv5_0);
    sext_ln30_mid2_v_v_v_v_v_v_v_fu_561_p3 <= (select_ln26_1_reg_1269 & ap_const_lv3_0);
        sext_ln32_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1166_p4),64));

    shl_ln30_2_fu_503_p3 <= (trunc_ln30_fu_499_p1 & ap_const_lv2_0);
    shl_ln_fu_1149_p4 <= ((select_ln26_1_reg_1269_pp0_iter1_reg & trunc_ln30_reg_1281_pp0_iter1_reg) & ap_const_lv2_0);
    trunc_ln26_1_fu_442_p1 <= i_fu_148(3 - 1 downto 0);
    trunc_ln26_fu_438_p1 <= add_ln26_9_fu_432_p2(3 - 1 downto 0);
    trunc_ln30_2_fu_520_p4 <= add_ln30_fu_515_p2(63 downto 2);
    trunc_ln30_3_fu_943_p4 <= add_ln30_5_fu_938_p2(63 downto 2);
    trunc_ln30_4_fu_629_p4 <= add_ln30_1_fu_624_p2(63 downto 2);
    trunc_ln30_5_fu_1017_p4 <= add_ln30_6_fu_1012_p2(63 downto 2);
    trunc_ln30_6_fu_709_p4 <= add_ln30_2_fu_704_p2(63 downto 2);
    trunc_ln30_7_fu_1091_p4 <= add_ln30_7_fu_1086_p2(63 downto 2);
    trunc_ln30_8_fu_783_p4 <= add_ln30_3_fu_778_p2(63 downto 2);
    trunc_ln30_fu_499_p1 <= select_ln26_fu_424_p3(3 - 1 downto 0);
    trunc_ln30_s_fu_863_p4 <= add_ln30_4_fu_858_p2(63 downto 2);
    trunc_ln_fu_1166_p4 <= add_ln32_fu_1161_p2(63 downto 2);
    zext_ln26_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_2_mid2_v_v_v_v_v_fu_574_p3),64));
    zext_ln26_2_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_4_mid2_v_v_v_v_v_fu_654_p3),64));
    zext_ln26_3_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_6_mid2_v_v_v_v_v_fu_734_p3),64));
    zext_ln26_4_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_8_mid2_v_v_v_v_v_fu_808_p3),64));
    zext_ln26_5_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_10_mid2_v_v_v_v_v_fu_888_p3),64));
    zext_ln26_6_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_12_mid2_v_v_v_v_v_fu_968_p3),64));
    zext_ln26_7_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_14_mid2_v_v_v_v_v_fu_1042_p3),64));
    zext_ln26_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_mid2_v_v_v_v_v_fu_454_p3),64));
    zext_ln30_1_cast_fu_611_p4 <= ((ap_const_lv1_1 & trunc_ln30_reg_1281) & ap_const_lv2_0);
    zext_ln30_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30_1_cast_fu_611_p4),64));
    zext_ln30_2_cast_fu_691_p4 <= ((ap_const_lv2_2 & trunc_ln30_reg_1281) & ap_const_lv2_0);
    zext_ln30_2_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30_2_cast_fu_691_p4),64));
    zext_ln30_3_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_3_fu_771_p1),64));
    zext_ln30_4_cast_fu_845_p4 <= ((ap_const_lv3_4 & trunc_ln30_reg_1281) & ap_const_lv2_0);
    zext_ln30_4_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30_4_cast_fu_845_p4),64));
    zext_ln30_5_cast_fu_925_p4 <= ((ap_const_lv3_5 & trunc_ln30_reg_1281) & ap_const_lv2_0);
    zext_ln30_5_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30_5_cast_fu_925_p4),64));
    zext_ln30_6_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_7_fu_1005_p1),64));
    zext_ln30_7_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_9_fu_1079_p1),64));
    zext_ln30_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln30_2_fu_503_p3),64));
    zext_ln32_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1149_p4),64));
end behav;
