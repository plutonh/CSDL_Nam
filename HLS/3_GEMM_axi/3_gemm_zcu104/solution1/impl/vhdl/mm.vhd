-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm is
generic (
    C_M_AXI_A_PORT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_A_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_PORT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PORT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_AB_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AB_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AB_PORT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AB_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_AB_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AB_PORT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_PORT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_PORT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_A_port_AWVALID : OUT STD_LOGIC;
    m_axi_A_port_AWREADY : IN STD_LOGIC;
    m_axi_A_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_A_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_A_port_WVALID : OUT STD_LOGIC;
    m_axi_A_port_WREADY : IN STD_LOGIC;
    m_axi_A_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_DATA_WIDTH-1 downto 0);
    m_axi_A_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_A_port_WLAST : OUT STD_LOGIC;
    m_axi_A_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_A_port_ARVALID : OUT STD_LOGIC;
    m_axi_A_port_ARREADY : IN STD_LOGIC;
    m_axi_A_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_A_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_A_port_RVALID : IN STD_LOGIC;
    m_axi_A_port_RREADY : OUT STD_LOGIC;
    m_axi_A_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_DATA_WIDTH-1 downto 0);
    m_axi_A_port_RLAST : IN STD_LOGIC;
    m_axi_A_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_A_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_BVALID : IN STD_LOGIC;
    m_axi_A_port_BREADY : OUT STD_LOGIC;
    m_axi_A_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_ID_WIDTH-1 downto 0);
    m_axi_A_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_PORT_BUSER_WIDTH-1 downto 0);
    m_axi_B_port_AWVALID : OUT STD_LOGIC;
    m_axi_B_port_AWREADY : IN STD_LOGIC;
    m_axi_B_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_B_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_B_port_WVALID : OUT STD_LOGIC;
    m_axi_B_port_WREADY : IN STD_LOGIC;
    m_axi_B_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_DATA_WIDTH-1 downto 0);
    m_axi_B_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_B_port_WLAST : OUT STD_LOGIC;
    m_axi_B_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_B_port_ARVALID : OUT STD_LOGIC;
    m_axi_B_port_ARREADY : IN STD_LOGIC;
    m_axi_B_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_B_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_B_port_RVALID : IN STD_LOGIC;
    m_axi_B_port_RREADY : OUT STD_LOGIC;
    m_axi_B_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_DATA_WIDTH-1 downto 0);
    m_axi_B_port_RLAST : IN STD_LOGIC;
    m_axi_B_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_B_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_BVALID : IN STD_LOGIC;
    m_axi_B_port_BREADY : OUT STD_LOGIC;
    m_axi_B_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_ID_WIDTH-1 downto 0);
    m_axi_B_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_PORT_BUSER_WIDTH-1 downto 0);
    m_axi_AB_port_AWVALID : OUT STD_LOGIC;
    m_axi_AB_port_AWREADY : IN STD_LOGIC;
    m_axi_AB_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_AB_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AB_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_AB_port_WVALID : OUT STD_LOGIC;
    m_axi_AB_port_WREADY : IN STD_LOGIC;
    m_axi_AB_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_DATA_WIDTH-1 downto 0);
    m_axi_AB_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_AB_port_WLAST : OUT STD_LOGIC;
    m_axi_AB_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_AB_port_ARVALID : OUT STD_LOGIC;
    m_axi_AB_port_ARREADY : IN STD_LOGIC;
    m_axi_AB_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_AB_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AB_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_AB_port_RVALID : IN STD_LOGIC;
    m_axi_AB_port_RREADY : OUT STD_LOGIC;
    m_axi_AB_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_DATA_WIDTH-1 downto 0);
    m_axi_AB_port_RLAST : IN STD_LOGIC;
    m_axi_AB_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_AB_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_BVALID : IN STD_LOGIC;
    m_axi_AB_port_BREADY : OUT STD_LOGIC;
    m_axi_AB_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_ID_WIDTH-1 downto 0);
    m_axi_AB_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AB_PORT_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mm_mm,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=170,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5536,HLS_SYN_LUT=8808,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal B : STD_LOGIC_VECTOR (63 downto 0);
    signal AB : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal B_port_blk_n_AR : STD_LOGIC;
    signal AB_port_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal AB_port_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln_reg_1323 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln1_reg_1329 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln2_reg_1335 : STD_LOGIC_VECTOR (61 downto 0);
    signal A_buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_ce0 : STD_LOGIC;
    signal A_buff_we0 : STD_LOGIC;
    signal A_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_buff_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_1_ce0 : STD_LOGIC;
    signal A_buff_1_we0 : STD_LOGIC;
    signal A_buff_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_buff_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_2_ce0 : STD_LOGIC;
    signal A_buff_2_we0 : STD_LOGIC;
    signal A_buff_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_buff_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_3_ce0 : STD_LOGIC;
    signal A_buff_3_we0 : STD_LOGIC;
    signal A_buff_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_buff_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_4_ce0 : STD_LOGIC;
    signal A_buff_4_we0 : STD_LOGIC;
    signal A_buff_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_buff_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_5_ce0 : STD_LOGIC;
    signal A_buff_5_we0 : STD_LOGIC;
    signal A_buff_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_buff_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_6_ce0 : STD_LOGIC;
    signal A_buff_6_we0 : STD_LOGIC;
    signal A_buff_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_buff_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_buff_7_ce0 : STD_LOGIC;
    signal A_buff_7_we0 : STD_LOGIC;
    signal A_buff_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_ce0 : STD_LOGIC;
    signal AB_buff_we0 : STD_LOGIC;
    signal AB_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_1_ce0 : STD_LOGIC;
    signal AB_buff_1_we0 : STD_LOGIC;
    signal AB_buff_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_2_ce0 : STD_LOGIC;
    signal AB_buff_2_we0 : STD_LOGIC;
    signal AB_buff_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_3_ce0 : STD_LOGIC;
    signal AB_buff_3_we0 : STD_LOGIC;
    signal AB_buff_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_4_ce0 : STD_LOGIC;
    signal AB_buff_4_we0 : STD_LOGIC;
    signal AB_buff_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_5_ce0 : STD_LOGIC;
    signal AB_buff_5_we0 : STD_LOGIC;
    signal AB_buff_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_6_ce0 : STD_LOGIC;
    signal AB_buff_6_we0 : STD_LOGIC;
    signal AB_buff_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_buff_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal AB_buff_7_ce0 : STD_LOGIC;
    signal AB_buff_7_we0 : STD_LOGIC;
    signal AB_buff_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_ap_start : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_ap_done : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_ap_idle : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_ap_ready : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWVALID : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_WVALID : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_WLAST : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARVALID : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_RREADY : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_m_axi_A_port_BREADY : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_1_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_1_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_2_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_2_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_3_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_3_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_4_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_4_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_5_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_5_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_6_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_6_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_1_fu_438_A_buff_7_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_7_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_A_buff_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_ap_start : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_ap_done : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_ap_idle : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_ap_ready : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWVALID : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_WVALID : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_WLAST : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARVALID : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_RREADY : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_m_axi_B_port_BREADY : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_63_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_63_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_62_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_62_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_61_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_61_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_60_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_60_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_59_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_59_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_58_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_58_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_57_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_57_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_56_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_56_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_55_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_55_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_54_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_54_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_53_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_53_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_52_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_52_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_51_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_51_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_50_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_50_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_49_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_49_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_48_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_48_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_47_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_47_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_46_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_46_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_45_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_45_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_44_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_44_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_43_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_43_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_42_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_42_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_41_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_41_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_40_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_40_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_39_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_39_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_38_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_38_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_37_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_37_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_36_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_36_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_35_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_35_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_34_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_34_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_33_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_33_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_32_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_32_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_31_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_31_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_30_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_30_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_29_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_29_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_28_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_28_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_27_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_27_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_26_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_26_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_25_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_25_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_24_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_24_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_23_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_23_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_22_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_22_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_21_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_21_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_20_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_20_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_19_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_19_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_18_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_18_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_17_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_17_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_16_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_16_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_15_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_15_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_14_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_14_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_13_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_13_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_12_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_12_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_11_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_11_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_10_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_10_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_9_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_9_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_8_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_8_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_7_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_7_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_6_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_5_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_5_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_4_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_4_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_3_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_2_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_1_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_2_fu_453_B_buff_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_2_fu_453_B_buff_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_ap_start : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_ap_done : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_ap_idle : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_ap_ready : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_7_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_7_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_6_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_6_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_5_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_5_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_4_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_4_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_3_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_3_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_2_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_2_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_1_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_1_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_AB_buff_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_AB_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_A_buff_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_1_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_A_buff_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_2_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_A_buff_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_3_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_A_buff_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_4_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_A_buff_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_5_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_A_buff_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_6_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_row_fu_524_A_buff_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_row_fu_524_A_buff_7_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_ap_start : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_ap_done : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_ap_idle : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_ap_ready : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWVALID : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WVALID : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WLAST : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARVALID : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_RREADY : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_m_axi_AB_port_BREADY : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_1_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_2_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_3_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_4_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_5_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_6_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_4_fu_608_AB_buff_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_Pipeline_4_fu_608_AB_buff_7_ce0 : STD_LOGIC;
    signal AB_port_AWVALID : STD_LOGIC;
    signal AB_port_AWREADY : STD_LOGIC;
    signal AB_port_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal AB_port_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_port_WVALID : STD_LOGIC;
    signal AB_port_WREADY : STD_LOGIC;
    signal AB_port_ARREADY : STD_LOGIC;
    signal AB_port_RVALID : STD_LOGIC;
    signal AB_port_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_port_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal AB_port_BVALID : STD_LOGIC;
    signal AB_port_BREADY : STD_LOGIC;
    signal A_port_AWREADY : STD_LOGIC;
    signal A_port_WREADY : STD_LOGIC;
    signal A_port_ARVALID : STD_LOGIC;
    signal A_port_ARREADY : STD_LOGIC;
    signal A_port_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal A_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_RVALID : STD_LOGIC;
    signal A_port_RREADY : STD_LOGIC;
    signal A_port_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal A_port_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal A_port_BVALID : STD_LOGIC;
    signal B_port_AWREADY : STD_LOGIC;
    signal B_port_WREADY : STD_LOGIC;
    signal B_port_ARVALID : STD_LOGIC;
    signal B_port_ARREADY : STD_LOGIC;
    signal B_port_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal B_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_RVALID : STD_LOGIC;
    signal B_port_RREADY : STD_LOGIC;
    signal B_port_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal B_port_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal B_port_BVALID : STD_LOGIC;
    signal grp_mm_Pipeline_1_fu_438_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_mm_Pipeline_2_fu_453_ap_start_reg : STD_LOGIC := '0';
    signal grp_mm_Pipeline_row_fu_524_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_mm_Pipeline_4_fu_608_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sext_ln34_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln53_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mm_mm_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_A_port_AWVALID : OUT STD_LOGIC;
        m_axi_A_port_AWREADY : IN STD_LOGIC;
        m_axi_A_port_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_port_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_port_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_WVALID : OUT STD_LOGIC;
        m_axi_A_port_WREADY : IN STD_LOGIC;
        m_axi_A_port_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_port_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_port_WLAST : OUT STD_LOGIC;
        m_axi_A_port_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_ARVALID : OUT STD_LOGIC;
        m_axi_A_port_ARREADY : IN STD_LOGIC;
        m_axi_A_port_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_port_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_port_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_RVALID : IN STD_LOGIC;
        m_axi_A_port_RREADY : OUT STD_LOGIC;
        m_axi_A_port_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_port_RLAST : IN STD_LOGIC;
        m_axi_A_port_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_A_port_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_port_BVALID : IN STD_LOGIC;
        m_axi_A_port_BREADY : OUT STD_LOGIC;
        m_axi_A_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_port_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_port_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln34 : IN STD_LOGIC_VECTOR (61 downto 0);
        A_buff_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_ce0 : OUT STD_LOGIC;
        A_buff_we0 : OUT STD_LOGIC;
        A_buff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_1_ce0 : OUT STD_LOGIC;
        A_buff_1_we0 : OUT STD_LOGIC;
        A_buff_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_2_ce0 : OUT STD_LOGIC;
        A_buff_2_we0 : OUT STD_LOGIC;
        A_buff_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_3_ce0 : OUT STD_LOGIC;
        A_buff_3_we0 : OUT STD_LOGIC;
        A_buff_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_4_ce0 : OUT STD_LOGIC;
        A_buff_4_we0 : OUT STD_LOGIC;
        A_buff_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_5_ce0 : OUT STD_LOGIC;
        A_buff_5_we0 : OUT STD_LOGIC;
        A_buff_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_6_ce0 : OUT STD_LOGIC;
        A_buff_6_we0 : OUT STD_LOGIC;
        A_buff_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_7_ce0 : OUT STD_LOGIC;
        A_buff_7_we0 : OUT STD_LOGIC;
        A_buff_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_mm_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_B_port_AWVALID : OUT STD_LOGIC;
        m_axi_B_port_AWREADY : IN STD_LOGIC;
        m_axi_B_port_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_port_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_port_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_WVALID : OUT STD_LOGIC;
        m_axi_B_port_WREADY : IN STD_LOGIC;
        m_axi_B_port_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_port_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_port_WLAST : OUT STD_LOGIC;
        m_axi_B_port_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_ARVALID : OUT STD_LOGIC;
        m_axi_B_port_ARREADY : IN STD_LOGIC;
        m_axi_B_port_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_port_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_port_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_RVALID : IN STD_LOGIC;
        m_axi_B_port_RREADY : OUT STD_LOGIC;
        m_axi_B_port_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_port_RLAST : IN STD_LOGIC;
        m_axi_B_port_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_B_port_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_port_BVALID : IN STD_LOGIC;
        m_axi_B_port_BREADY : OUT STD_LOGIC;
        m_axi_B_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_port_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_port_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln35 : IN STD_LOGIC_VECTOR (61 downto 0);
        B_buff_63_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_63_out_ap_vld : OUT STD_LOGIC;
        B_buff_62_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_62_out_ap_vld : OUT STD_LOGIC;
        B_buff_61_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_61_out_ap_vld : OUT STD_LOGIC;
        B_buff_60_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_60_out_ap_vld : OUT STD_LOGIC;
        B_buff_59_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_59_out_ap_vld : OUT STD_LOGIC;
        B_buff_58_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_58_out_ap_vld : OUT STD_LOGIC;
        B_buff_57_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_57_out_ap_vld : OUT STD_LOGIC;
        B_buff_56_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_56_out_ap_vld : OUT STD_LOGIC;
        B_buff_55_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_55_out_ap_vld : OUT STD_LOGIC;
        B_buff_54_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_54_out_ap_vld : OUT STD_LOGIC;
        B_buff_53_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_53_out_ap_vld : OUT STD_LOGIC;
        B_buff_52_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_52_out_ap_vld : OUT STD_LOGIC;
        B_buff_51_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_51_out_ap_vld : OUT STD_LOGIC;
        B_buff_50_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_50_out_ap_vld : OUT STD_LOGIC;
        B_buff_49_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_49_out_ap_vld : OUT STD_LOGIC;
        B_buff_48_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_48_out_ap_vld : OUT STD_LOGIC;
        B_buff_47_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_47_out_ap_vld : OUT STD_LOGIC;
        B_buff_46_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_46_out_ap_vld : OUT STD_LOGIC;
        B_buff_45_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_45_out_ap_vld : OUT STD_LOGIC;
        B_buff_44_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_44_out_ap_vld : OUT STD_LOGIC;
        B_buff_43_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_43_out_ap_vld : OUT STD_LOGIC;
        B_buff_42_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_42_out_ap_vld : OUT STD_LOGIC;
        B_buff_41_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_41_out_ap_vld : OUT STD_LOGIC;
        B_buff_40_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_40_out_ap_vld : OUT STD_LOGIC;
        B_buff_39_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_39_out_ap_vld : OUT STD_LOGIC;
        B_buff_38_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_38_out_ap_vld : OUT STD_LOGIC;
        B_buff_37_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_37_out_ap_vld : OUT STD_LOGIC;
        B_buff_36_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_36_out_ap_vld : OUT STD_LOGIC;
        B_buff_35_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_35_out_ap_vld : OUT STD_LOGIC;
        B_buff_34_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_34_out_ap_vld : OUT STD_LOGIC;
        B_buff_33_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_33_out_ap_vld : OUT STD_LOGIC;
        B_buff_32_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_32_out_ap_vld : OUT STD_LOGIC;
        B_buff_31_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_31_out_ap_vld : OUT STD_LOGIC;
        B_buff_30_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_30_out_ap_vld : OUT STD_LOGIC;
        B_buff_29_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_29_out_ap_vld : OUT STD_LOGIC;
        B_buff_28_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_28_out_ap_vld : OUT STD_LOGIC;
        B_buff_27_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_27_out_ap_vld : OUT STD_LOGIC;
        B_buff_26_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_26_out_ap_vld : OUT STD_LOGIC;
        B_buff_25_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_25_out_ap_vld : OUT STD_LOGIC;
        B_buff_24_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_24_out_ap_vld : OUT STD_LOGIC;
        B_buff_23_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_23_out_ap_vld : OUT STD_LOGIC;
        B_buff_22_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_22_out_ap_vld : OUT STD_LOGIC;
        B_buff_21_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_21_out_ap_vld : OUT STD_LOGIC;
        B_buff_20_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_20_out_ap_vld : OUT STD_LOGIC;
        B_buff_19_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_19_out_ap_vld : OUT STD_LOGIC;
        B_buff_18_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_18_out_ap_vld : OUT STD_LOGIC;
        B_buff_17_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_17_out_ap_vld : OUT STD_LOGIC;
        B_buff_16_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_16_out_ap_vld : OUT STD_LOGIC;
        B_buff_15_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_15_out_ap_vld : OUT STD_LOGIC;
        B_buff_14_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_14_out_ap_vld : OUT STD_LOGIC;
        B_buff_13_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_13_out_ap_vld : OUT STD_LOGIC;
        B_buff_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_12_out_ap_vld : OUT STD_LOGIC;
        B_buff_11_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_11_out_ap_vld : OUT STD_LOGIC;
        B_buff_10_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_10_out_ap_vld : OUT STD_LOGIC;
        B_buff_9_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_9_out_ap_vld : OUT STD_LOGIC;
        B_buff_8_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_8_out_ap_vld : OUT STD_LOGIC;
        B_buff_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_7_out_ap_vld : OUT STD_LOGIC;
        B_buff_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_6_out_ap_vld : OUT STD_LOGIC;
        B_buff_5_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_5_out_ap_vld : OUT STD_LOGIC;
        B_buff_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_4_out_ap_vld : OUT STD_LOGIC;
        B_buff_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_3_out_ap_vld : OUT STD_LOGIC;
        B_buff_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_2_out_ap_vld : OUT STD_LOGIC;
        B_buff_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_1_out_ap_vld : OUT STD_LOGIC;
        B_buff_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_buff_out_ap_vld : OUT STD_LOGIC );
    end component;


    component mm_mm_Pipeline_row IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AB_buff_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_7_ce0 : OUT STD_LOGIC;
        AB_buff_7_we0 : OUT STD_LOGIC;
        AB_buff_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_6_ce0 : OUT STD_LOGIC;
        AB_buff_6_we0 : OUT STD_LOGIC;
        AB_buff_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_5_ce0 : OUT STD_LOGIC;
        AB_buff_5_we0 : OUT STD_LOGIC;
        AB_buff_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_4_ce0 : OUT STD_LOGIC;
        AB_buff_4_we0 : OUT STD_LOGIC;
        AB_buff_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_3_ce0 : OUT STD_LOGIC;
        AB_buff_3_we0 : OUT STD_LOGIC;
        AB_buff_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_2_ce0 : OUT STD_LOGIC;
        AB_buff_2_we0 : OUT STD_LOGIC;
        AB_buff_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_1_ce0 : OUT STD_LOGIC;
        AB_buff_1_we0 : OUT STD_LOGIC;
        AB_buff_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_ce0 : OUT STD_LOGIC;
        AB_buff_we0 : OUT STD_LOGIC;
        AB_buff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_buff_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_ce0 : OUT STD_LOGIC;
        A_buff_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        A_buff_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_1_ce0 : OUT STD_LOGIC;
        A_buff_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        A_buff_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_2_ce0 : OUT STD_LOGIC;
        A_buff_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_16_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        A_buff_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_3_ce0 : OUT STD_LOGIC;
        A_buff_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_24_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        A_buff_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_4_ce0 : OUT STD_LOGIC;
        A_buff_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_32_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        A_buff_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_5_ce0 : OUT STD_LOGIC;
        A_buff_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_40_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        A_buff_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_6_ce0 : OUT STD_LOGIC;
        A_buff_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_48_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        A_buff_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_buff_7_ce0 : OUT STD_LOGIC;
        A_buff_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_56_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_17_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_25_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_33_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_41_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_49_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_57_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_18_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_26_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_34_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_42_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_50_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_58_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_11_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_19_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_27_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_35_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_43_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_51_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_59_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_12_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_20_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_28_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_36_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_44_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_52_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_60_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_13_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_21_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_29_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_37_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_45_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_53_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_61_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_14_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_22_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_30_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_38_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_46_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_54_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_62_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_15_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_23_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_31_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_39_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_47_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_55_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        B_buff_63_reload : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_mm_Pipeline_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_AB_port_AWVALID : OUT STD_LOGIC;
        m_axi_AB_port_AWREADY : IN STD_LOGIC;
        m_axi_AB_port_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_AB_port_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_AB_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_port_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_WVALID : OUT STD_LOGIC;
        m_axi_AB_port_WREADY : IN STD_LOGIC;
        m_axi_AB_port_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_AB_port_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_port_WLAST : OUT STD_LOGIC;
        m_axi_AB_port_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_ARVALID : OUT STD_LOGIC;
        m_axi_AB_port_ARREADY : IN STD_LOGIC;
        m_axi_AB_port_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_AB_port_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_AB_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_port_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_RVALID : IN STD_LOGIC;
        m_axi_AB_port_RREADY : OUT STD_LOGIC;
        m_axi_AB_port_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_AB_port_RLAST : IN STD_LOGIC;
        m_axi_AB_port_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_AB_port_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_port_BVALID : IN STD_LOGIC;
        m_axi_AB_port_BREADY : OUT STD_LOGIC;
        m_axi_AB_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_port_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_port_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln53 : IN STD_LOGIC_VECTOR (61 downto 0);
        AB_buff_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_ce0 : OUT STD_LOGIC;
        AB_buff_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_1_ce0 : OUT STD_LOGIC;
        AB_buff_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_2_ce0 : OUT STD_LOGIC;
        AB_buff_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_3_ce0 : OUT STD_LOGIC;
        AB_buff_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_4_ce0 : OUT STD_LOGIC;
        AB_buff_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_5_ce0 : OUT STD_LOGIC;
        AB_buff_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_6_ce0 : OUT STD_LOGIC;
        AB_buff_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_buff_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        AB_buff_7_ce0 : OUT STD_LOGIC;
        AB_buff_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_A_buff_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        B : OUT STD_LOGIC_VECTOR (63 downto 0);
        AB : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component mm_AB_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component mm_A_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component mm_B_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    A_buff_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_address0,
        ce0 => A_buff_ce0,
        we0 => A_buff_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_d0,
        q0 => A_buff_q0);

    A_buff_1_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_1_address0,
        ce0 => A_buff_1_ce0,
        we0 => A_buff_1_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_1_d0,
        q0 => A_buff_1_q0);

    A_buff_2_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_2_address0,
        ce0 => A_buff_2_ce0,
        we0 => A_buff_2_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_2_d0,
        q0 => A_buff_2_q0);

    A_buff_3_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_3_address0,
        ce0 => A_buff_3_ce0,
        we0 => A_buff_3_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_3_d0,
        q0 => A_buff_3_q0);

    A_buff_4_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_4_address0,
        ce0 => A_buff_4_ce0,
        we0 => A_buff_4_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_4_d0,
        q0 => A_buff_4_q0);

    A_buff_5_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_5_address0,
        ce0 => A_buff_5_ce0,
        we0 => A_buff_5_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_5_d0,
        q0 => A_buff_5_q0);

    A_buff_6_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_6_address0,
        ce0 => A_buff_6_ce0,
        we0 => A_buff_6_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_6_d0,
        q0 => A_buff_6_q0);

    A_buff_7_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buff_7_address0,
        ce0 => A_buff_7_ce0,
        we0 => A_buff_7_we0,
        d0 => grp_mm_Pipeline_1_fu_438_A_buff_7_d0,
        q0 => A_buff_7_q0);

    AB_buff_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_address0,
        ce0 => AB_buff_ce0,
        we0 => AB_buff_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_d0,
        q0 => AB_buff_q0);

    AB_buff_1_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_1_address0,
        ce0 => AB_buff_1_ce0,
        we0 => AB_buff_1_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_1_d0,
        q0 => AB_buff_1_q0);

    AB_buff_2_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_2_address0,
        ce0 => AB_buff_2_ce0,
        we0 => AB_buff_2_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_2_d0,
        q0 => AB_buff_2_q0);

    AB_buff_3_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_3_address0,
        ce0 => AB_buff_3_ce0,
        we0 => AB_buff_3_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_3_d0,
        q0 => AB_buff_3_q0);

    AB_buff_4_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_4_address0,
        ce0 => AB_buff_4_ce0,
        we0 => AB_buff_4_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_4_d0,
        q0 => AB_buff_4_q0);

    AB_buff_5_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_5_address0,
        ce0 => AB_buff_5_ce0,
        we0 => AB_buff_5_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_5_d0,
        q0 => AB_buff_5_q0);

    AB_buff_6_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_6_address0,
        ce0 => AB_buff_6_ce0,
        we0 => AB_buff_6_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_6_d0,
        q0 => AB_buff_6_q0);

    AB_buff_7_U : component mm_A_buff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => AB_buff_7_address0,
        ce0 => AB_buff_7_ce0,
        we0 => AB_buff_7_we0,
        d0 => grp_mm_Pipeline_row_fu_524_AB_buff_7_d0,
        q0 => AB_buff_7_q0);

    grp_mm_Pipeline_1_fu_438 : component mm_mm_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mm_Pipeline_1_fu_438_ap_start,
        ap_done => grp_mm_Pipeline_1_fu_438_ap_done,
        ap_idle => grp_mm_Pipeline_1_fu_438_ap_idle,
        ap_ready => grp_mm_Pipeline_1_fu_438_ap_ready,
        m_axi_A_port_AWVALID => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWVALID,
        m_axi_A_port_AWREADY => ap_const_logic_0,
        m_axi_A_port_AWADDR => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWADDR,
        m_axi_A_port_AWID => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWID,
        m_axi_A_port_AWLEN => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWLEN,
        m_axi_A_port_AWSIZE => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWSIZE,
        m_axi_A_port_AWBURST => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWBURST,
        m_axi_A_port_AWLOCK => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWLOCK,
        m_axi_A_port_AWCACHE => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWCACHE,
        m_axi_A_port_AWPROT => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWPROT,
        m_axi_A_port_AWQOS => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWQOS,
        m_axi_A_port_AWREGION => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWREGION,
        m_axi_A_port_AWUSER => grp_mm_Pipeline_1_fu_438_m_axi_A_port_AWUSER,
        m_axi_A_port_WVALID => grp_mm_Pipeline_1_fu_438_m_axi_A_port_WVALID,
        m_axi_A_port_WREADY => ap_const_logic_0,
        m_axi_A_port_WDATA => grp_mm_Pipeline_1_fu_438_m_axi_A_port_WDATA,
        m_axi_A_port_WSTRB => grp_mm_Pipeline_1_fu_438_m_axi_A_port_WSTRB,
        m_axi_A_port_WLAST => grp_mm_Pipeline_1_fu_438_m_axi_A_port_WLAST,
        m_axi_A_port_WID => grp_mm_Pipeline_1_fu_438_m_axi_A_port_WID,
        m_axi_A_port_WUSER => grp_mm_Pipeline_1_fu_438_m_axi_A_port_WUSER,
        m_axi_A_port_ARVALID => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARVALID,
        m_axi_A_port_ARREADY => A_port_ARREADY,
        m_axi_A_port_ARADDR => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARADDR,
        m_axi_A_port_ARID => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARID,
        m_axi_A_port_ARLEN => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARLEN,
        m_axi_A_port_ARSIZE => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARSIZE,
        m_axi_A_port_ARBURST => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARBURST,
        m_axi_A_port_ARLOCK => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARLOCK,
        m_axi_A_port_ARCACHE => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARCACHE,
        m_axi_A_port_ARPROT => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARPROT,
        m_axi_A_port_ARQOS => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARQOS,
        m_axi_A_port_ARREGION => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARREGION,
        m_axi_A_port_ARUSER => grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARUSER,
        m_axi_A_port_RVALID => A_port_RVALID,
        m_axi_A_port_RREADY => grp_mm_Pipeline_1_fu_438_m_axi_A_port_RREADY,
        m_axi_A_port_RDATA => A_port_RDATA,
        m_axi_A_port_RLAST => ap_const_logic_0,
        m_axi_A_port_RID => ap_const_lv1_0,
        m_axi_A_port_RFIFONUM => A_port_RFIFONUM,
        m_axi_A_port_RUSER => ap_const_lv1_0,
        m_axi_A_port_RRESP => ap_const_lv2_0,
        m_axi_A_port_BVALID => ap_const_logic_0,
        m_axi_A_port_BREADY => grp_mm_Pipeline_1_fu_438_m_axi_A_port_BREADY,
        m_axi_A_port_BRESP => ap_const_lv2_0,
        m_axi_A_port_BID => ap_const_lv1_0,
        m_axi_A_port_BUSER => ap_const_lv1_0,
        sext_ln34 => trunc_ln_reg_1323,
        A_buff_address0 => grp_mm_Pipeline_1_fu_438_A_buff_address0,
        A_buff_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_ce0,
        A_buff_we0 => grp_mm_Pipeline_1_fu_438_A_buff_we0,
        A_buff_d0 => grp_mm_Pipeline_1_fu_438_A_buff_d0,
        A_buff_1_address0 => grp_mm_Pipeline_1_fu_438_A_buff_1_address0,
        A_buff_1_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_1_ce0,
        A_buff_1_we0 => grp_mm_Pipeline_1_fu_438_A_buff_1_we0,
        A_buff_1_d0 => grp_mm_Pipeline_1_fu_438_A_buff_1_d0,
        A_buff_2_address0 => grp_mm_Pipeline_1_fu_438_A_buff_2_address0,
        A_buff_2_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_2_ce0,
        A_buff_2_we0 => grp_mm_Pipeline_1_fu_438_A_buff_2_we0,
        A_buff_2_d0 => grp_mm_Pipeline_1_fu_438_A_buff_2_d0,
        A_buff_3_address0 => grp_mm_Pipeline_1_fu_438_A_buff_3_address0,
        A_buff_3_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_3_ce0,
        A_buff_3_we0 => grp_mm_Pipeline_1_fu_438_A_buff_3_we0,
        A_buff_3_d0 => grp_mm_Pipeline_1_fu_438_A_buff_3_d0,
        A_buff_4_address0 => grp_mm_Pipeline_1_fu_438_A_buff_4_address0,
        A_buff_4_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_4_ce0,
        A_buff_4_we0 => grp_mm_Pipeline_1_fu_438_A_buff_4_we0,
        A_buff_4_d0 => grp_mm_Pipeline_1_fu_438_A_buff_4_d0,
        A_buff_5_address0 => grp_mm_Pipeline_1_fu_438_A_buff_5_address0,
        A_buff_5_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_5_ce0,
        A_buff_5_we0 => grp_mm_Pipeline_1_fu_438_A_buff_5_we0,
        A_buff_5_d0 => grp_mm_Pipeline_1_fu_438_A_buff_5_d0,
        A_buff_6_address0 => grp_mm_Pipeline_1_fu_438_A_buff_6_address0,
        A_buff_6_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_6_ce0,
        A_buff_6_we0 => grp_mm_Pipeline_1_fu_438_A_buff_6_we0,
        A_buff_6_d0 => grp_mm_Pipeline_1_fu_438_A_buff_6_d0,
        A_buff_7_address0 => grp_mm_Pipeline_1_fu_438_A_buff_7_address0,
        A_buff_7_ce0 => grp_mm_Pipeline_1_fu_438_A_buff_7_ce0,
        A_buff_7_we0 => grp_mm_Pipeline_1_fu_438_A_buff_7_we0,
        A_buff_7_d0 => grp_mm_Pipeline_1_fu_438_A_buff_7_d0);

    grp_mm_Pipeline_2_fu_453 : component mm_mm_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mm_Pipeline_2_fu_453_ap_start,
        ap_done => grp_mm_Pipeline_2_fu_453_ap_done,
        ap_idle => grp_mm_Pipeline_2_fu_453_ap_idle,
        ap_ready => grp_mm_Pipeline_2_fu_453_ap_ready,
        m_axi_B_port_AWVALID => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWVALID,
        m_axi_B_port_AWREADY => ap_const_logic_0,
        m_axi_B_port_AWADDR => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWADDR,
        m_axi_B_port_AWID => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWID,
        m_axi_B_port_AWLEN => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWLEN,
        m_axi_B_port_AWSIZE => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWSIZE,
        m_axi_B_port_AWBURST => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWBURST,
        m_axi_B_port_AWLOCK => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWLOCK,
        m_axi_B_port_AWCACHE => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWCACHE,
        m_axi_B_port_AWPROT => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWPROT,
        m_axi_B_port_AWQOS => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWQOS,
        m_axi_B_port_AWREGION => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWREGION,
        m_axi_B_port_AWUSER => grp_mm_Pipeline_2_fu_453_m_axi_B_port_AWUSER,
        m_axi_B_port_WVALID => grp_mm_Pipeline_2_fu_453_m_axi_B_port_WVALID,
        m_axi_B_port_WREADY => ap_const_logic_0,
        m_axi_B_port_WDATA => grp_mm_Pipeline_2_fu_453_m_axi_B_port_WDATA,
        m_axi_B_port_WSTRB => grp_mm_Pipeline_2_fu_453_m_axi_B_port_WSTRB,
        m_axi_B_port_WLAST => grp_mm_Pipeline_2_fu_453_m_axi_B_port_WLAST,
        m_axi_B_port_WID => grp_mm_Pipeline_2_fu_453_m_axi_B_port_WID,
        m_axi_B_port_WUSER => grp_mm_Pipeline_2_fu_453_m_axi_B_port_WUSER,
        m_axi_B_port_ARVALID => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARVALID,
        m_axi_B_port_ARREADY => B_port_ARREADY,
        m_axi_B_port_ARADDR => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARADDR,
        m_axi_B_port_ARID => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARID,
        m_axi_B_port_ARLEN => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARLEN,
        m_axi_B_port_ARSIZE => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARSIZE,
        m_axi_B_port_ARBURST => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARBURST,
        m_axi_B_port_ARLOCK => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARLOCK,
        m_axi_B_port_ARCACHE => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARCACHE,
        m_axi_B_port_ARPROT => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARPROT,
        m_axi_B_port_ARQOS => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARQOS,
        m_axi_B_port_ARREGION => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARREGION,
        m_axi_B_port_ARUSER => grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARUSER,
        m_axi_B_port_RVALID => B_port_RVALID,
        m_axi_B_port_RREADY => grp_mm_Pipeline_2_fu_453_m_axi_B_port_RREADY,
        m_axi_B_port_RDATA => B_port_RDATA,
        m_axi_B_port_RLAST => ap_const_logic_0,
        m_axi_B_port_RID => ap_const_lv1_0,
        m_axi_B_port_RFIFONUM => B_port_RFIFONUM,
        m_axi_B_port_RUSER => ap_const_lv1_0,
        m_axi_B_port_RRESP => ap_const_lv2_0,
        m_axi_B_port_BVALID => ap_const_logic_0,
        m_axi_B_port_BREADY => grp_mm_Pipeline_2_fu_453_m_axi_B_port_BREADY,
        m_axi_B_port_BRESP => ap_const_lv2_0,
        m_axi_B_port_BID => ap_const_lv1_0,
        m_axi_B_port_BUSER => ap_const_lv1_0,
        sext_ln35 => trunc_ln1_reg_1329,
        B_buff_63_out => grp_mm_Pipeline_2_fu_453_B_buff_63_out,
        B_buff_63_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_63_out_ap_vld,
        B_buff_62_out => grp_mm_Pipeline_2_fu_453_B_buff_62_out,
        B_buff_62_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_62_out_ap_vld,
        B_buff_61_out => grp_mm_Pipeline_2_fu_453_B_buff_61_out,
        B_buff_61_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_61_out_ap_vld,
        B_buff_60_out => grp_mm_Pipeline_2_fu_453_B_buff_60_out,
        B_buff_60_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_60_out_ap_vld,
        B_buff_59_out => grp_mm_Pipeline_2_fu_453_B_buff_59_out,
        B_buff_59_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_59_out_ap_vld,
        B_buff_58_out => grp_mm_Pipeline_2_fu_453_B_buff_58_out,
        B_buff_58_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_58_out_ap_vld,
        B_buff_57_out => grp_mm_Pipeline_2_fu_453_B_buff_57_out,
        B_buff_57_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_57_out_ap_vld,
        B_buff_56_out => grp_mm_Pipeline_2_fu_453_B_buff_56_out,
        B_buff_56_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_56_out_ap_vld,
        B_buff_55_out => grp_mm_Pipeline_2_fu_453_B_buff_55_out,
        B_buff_55_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_55_out_ap_vld,
        B_buff_54_out => grp_mm_Pipeline_2_fu_453_B_buff_54_out,
        B_buff_54_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_54_out_ap_vld,
        B_buff_53_out => grp_mm_Pipeline_2_fu_453_B_buff_53_out,
        B_buff_53_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_53_out_ap_vld,
        B_buff_52_out => grp_mm_Pipeline_2_fu_453_B_buff_52_out,
        B_buff_52_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_52_out_ap_vld,
        B_buff_51_out => grp_mm_Pipeline_2_fu_453_B_buff_51_out,
        B_buff_51_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_51_out_ap_vld,
        B_buff_50_out => grp_mm_Pipeline_2_fu_453_B_buff_50_out,
        B_buff_50_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_50_out_ap_vld,
        B_buff_49_out => grp_mm_Pipeline_2_fu_453_B_buff_49_out,
        B_buff_49_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_49_out_ap_vld,
        B_buff_48_out => grp_mm_Pipeline_2_fu_453_B_buff_48_out,
        B_buff_48_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_48_out_ap_vld,
        B_buff_47_out => grp_mm_Pipeline_2_fu_453_B_buff_47_out,
        B_buff_47_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_47_out_ap_vld,
        B_buff_46_out => grp_mm_Pipeline_2_fu_453_B_buff_46_out,
        B_buff_46_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_46_out_ap_vld,
        B_buff_45_out => grp_mm_Pipeline_2_fu_453_B_buff_45_out,
        B_buff_45_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_45_out_ap_vld,
        B_buff_44_out => grp_mm_Pipeline_2_fu_453_B_buff_44_out,
        B_buff_44_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_44_out_ap_vld,
        B_buff_43_out => grp_mm_Pipeline_2_fu_453_B_buff_43_out,
        B_buff_43_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_43_out_ap_vld,
        B_buff_42_out => grp_mm_Pipeline_2_fu_453_B_buff_42_out,
        B_buff_42_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_42_out_ap_vld,
        B_buff_41_out => grp_mm_Pipeline_2_fu_453_B_buff_41_out,
        B_buff_41_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_41_out_ap_vld,
        B_buff_40_out => grp_mm_Pipeline_2_fu_453_B_buff_40_out,
        B_buff_40_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_40_out_ap_vld,
        B_buff_39_out => grp_mm_Pipeline_2_fu_453_B_buff_39_out,
        B_buff_39_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_39_out_ap_vld,
        B_buff_38_out => grp_mm_Pipeline_2_fu_453_B_buff_38_out,
        B_buff_38_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_38_out_ap_vld,
        B_buff_37_out => grp_mm_Pipeline_2_fu_453_B_buff_37_out,
        B_buff_37_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_37_out_ap_vld,
        B_buff_36_out => grp_mm_Pipeline_2_fu_453_B_buff_36_out,
        B_buff_36_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_36_out_ap_vld,
        B_buff_35_out => grp_mm_Pipeline_2_fu_453_B_buff_35_out,
        B_buff_35_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_35_out_ap_vld,
        B_buff_34_out => grp_mm_Pipeline_2_fu_453_B_buff_34_out,
        B_buff_34_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_34_out_ap_vld,
        B_buff_33_out => grp_mm_Pipeline_2_fu_453_B_buff_33_out,
        B_buff_33_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_33_out_ap_vld,
        B_buff_32_out => grp_mm_Pipeline_2_fu_453_B_buff_32_out,
        B_buff_32_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_32_out_ap_vld,
        B_buff_31_out => grp_mm_Pipeline_2_fu_453_B_buff_31_out,
        B_buff_31_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_31_out_ap_vld,
        B_buff_30_out => grp_mm_Pipeline_2_fu_453_B_buff_30_out,
        B_buff_30_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_30_out_ap_vld,
        B_buff_29_out => grp_mm_Pipeline_2_fu_453_B_buff_29_out,
        B_buff_29_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_29_out_ap_vld,
        B_buff_28_out => grp_mm_Pipeline_2_fu_453_B_buff_28_out,
        B_buff_28_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_28_out_ap_vld,
        B_buff_27_out => grp_mm_Pipeline_2_fu_453_B_buff_27_out,
        B_buff_27_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_27_out_ap_vld,
        B_buff_26_out => grp_mm_Pipeline_2_fu_453_B_buff_26_out,
        B_buff_26_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_26_out_ap_vld,
        B_buff_25_out => grp_mm_Pipeline_2_fu_453_B_buff_25_out,
        B_buff_25_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_25_out_ap_vld,
        B_buff_24_out => grp_mm_Pipeline_2_fu_453_B_buff_24_out,
        B_buff_24_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_24_out_ap_vld,
        B_buff_23_out => grp_mm_Pipeline_2_fu_453_B_buff_23_out,
        B_buff_23_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_23_out_ap_vld,
        B_buff_22_out => grp_mm_Pipeline_2_fu_453_B_buff_22_out,
        B_buff_22_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_22_out_ap_vld,
        B_buff_21_out => grp_mm_Pipeline_2_fu_453_B_buff_21_out,
        B_buff_21_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_21_out_ap_vld,
        B_buff_20_out => grp_mm_Pipeline_2_fu_453_B_buff_20_out,
        B_buff_20_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_20_out_ap_vld,
        B_buff_19_out => grp_mm_Pipeline_2_fu_453_B_buff_19_out,
        B_buff_19_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_19_out_ap_vld,
        B_buff_18_out => grp_mm_Pipeline_2_fu_453_B_buff_18_out,
        B_buff_18_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_18_out_ap_vld,
        B_buff_17_out => grp_mm_Pipeline_2_fu_453_B_buff_17_out,
        B_buff_17_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_17_out_ap_vld,
        B_buff_16_out => grp_mm_Pipeline_2_fu_453_B_buff_16_out,
        B_buff_16_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_16_out_ap_vld,
        B_buff_15_out => grp_mm_Pipeline_2_fu_453_B_buff_15_out,
        B_buff_15_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_15_out_ap_vld,
        B_buff_14_out => grp_mm_Pipeline_2_fu_453_B_buff_14_out,
        B_buff_14_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_14_out_ap_vld,
        B_buff_13_out => grp_mm_Pipeline_2_fu_453_B_buff_13_out,
        B_buff_13_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_13_out_ap_vld,
        B_buff_12_out => grp_mm_Pipeline_2_fu_453_B_buff_12_out,
        B_buff_12_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_12_out_ap_vld,
        B_buff_11_out => grp_mm_Pipeline_2_fu_453_B_buff_11_out,
        B_buff_11_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_11_out_ap_vld,
        B_buff_10_out => grp_mm_Pipeline_2_fu_453_B_buff_10_out,
        B_buff_10_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_10_out_ap_vld,
        B_buff_9_out => grp_mm_Pipeline_2_fu_453_B_buff_9_out,
        B_buff_9_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_9_out_ap_vld,
        B_buff_8_out => grp_mm_Pipeline_2_fu_453_B_buff_8_out,
        B_buff_8_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_8_out_ap_vld,
        B_buff_7_out => grp_mm_Pipeline_2_fu_453_B_buff_7_out,
        B_buff_7_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_7_out_ap_vld,
        B_buff_6_out => grp_mm_Pipeline_2_fu_453_B_buff_6_out,
        B_buff_6_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_6_out_ap_vld,
        B_buff_5_out => grp_mm_Pipeline_2_fu_453_B_buff_5_out,
        B_buff_5_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_5_out_ap_vld,
        B_buff_4_out => grp_mm_Pipeline_2_fu_453_B_buff_4_out,
        B_buff_4_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_4_out_ap_vld,
        B_buff_3_out => grp_mm_Pipeline_2_fu_453_B_buff_3_out,
        B_buff_3_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_3_out_ap_vld,
        B_buff_2_out => grp_mm_Pipeline_2_fu_453_B_buff_2_out,
        B_buff_2_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_2_out_ap_vld,
        B_buff_1_out => grp_mm_Pipeline_2_fu_453_B_buff_1_out,
        B_buff_1_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_1_out_ap_vld,
        B_buff_out => grp_mm_Pipeline_2_fu_453_B_buff_out,
        B_buff_out_ap_vld => grp_mm_Pipeline_2_fu_453_B_buff_out_ap_vld);

    grp_mm_Pipeline_row_fu_524 : component mm_mm_Pipeline_row
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mm_Pipeline_row_fu_524_ap_start,
        ap_done => grp_mm_Pipeline_row_fu_524_ap_done,
        ap_idle => grp_mm_Pipeline_row_fu_524_ap_idle,
        ap_ready => grp_mm_Pipeline_row_fu_524_ap_ready,
        AB_buff_7_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_7_address0,
        AB_buff_7_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_7_ce0,
        AB_buff_7_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_7_we0,
        AB_buff_7_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_7_d0,
        AB_buff_6_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_6_address0,
        AB_buff_6_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_6_ce0,
        AB_buff_6_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_6_we0,
        AB_buff_6_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_6_d0,
        AB_buff_5_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_5_address0,
        AB_buff_5_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_5_ce0,
        AB_buff_5_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_5_we0,
        AB_buff_5_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_5_d0,
        AB_buff_4_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_4_address0,
        AB_buff_4_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_4_ce0,
        AB_buff_4_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_4_we0,
        AB_buff_4_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_4_d0,
        AB_buff_3_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_3_address0,
        AB_buff_3_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_3_ce0,
        AB_buff_3_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_3_we0,
        AB_buff_3_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_3_d0,
        AB_buff_2_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_2_address0,
        AB_buff_2_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_2_ce0,
        AB_buff_2_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_2_we0,
        AB_buff_2_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_2_d0,
        AB_buff_1_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_1_address0,
        AB_buff_1_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_1_ce0,
        AB_buff_1_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_1_we0,
        AB_buff_1_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_1_d0,
        AB_buff_address0 => grp_mm_Pipeline_row_fu_524_AB_buff_address0,
        AB_buff_ce0 => grp_mm_Pipeline_row_fu_524_AB_buff_ce0,
        AB_buff_we0 => grp_mm_Pipeline_row_fu_524_AB_buff_we0,
        AB_buff_d0 => grp_mm_Pipeline_row_fu_524_AB_buff_d0,
        A_buff_address0 => grp_mm_Pipeline_row_fu_524_A_buff_address0,
        A_buff_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_ce0,
        A_buff_q0 => A_buff_q0,
        B_buff_reload => grp_mm_Pipeline_2_fu_453_B_buff_out,
        A_buff_1_address0 => grp_mm_Pipeline_row_fu_524_A_buff_1_address0,
        A_buff_1_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_1_ce0,
        A_buff_1_q0 => A_buff_1_q0,
        B_buff_8_reload => grp_mm_Pipeline_2_fu_453_B_buff_8_out,
        A_buff_2_address0 => grp_mm_Pipeline_row_fu_524_A_buff_2_address0,
        A_buff_2_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_2_ce0,
        A_buff_2_q0 => A_buff_2_q0,
        B_buff_16_reload => grp_mm_Pipeline_2_fu_453_B_buff_16_out,
        A_buff_3_address0 => grp_mm_Pipeline_row_fu_524_A_buff_3_address0,
        A_buff_3_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_3_ce0,
        A_buff_3_q0 => A_buff_3_q0,
        B_buff_24_reload => grp_mm_Pipeline_2_fu_453_B_buff_24_out,
        A_buff_4_address0 => grp_mm_Pipeline_row_fu_524_A_buff_4_address0,
        A_buff_4_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_4_ce0,
        A_buff_4_q0 => A_buff_4_q0,
        B_buff_32_reload => grp_mm_Pipeline_2_fu_453_B_buff_32_out,
        A_buff_5_address0 => grp_mm_Pipeline_row_fu_524_A_buff_5_address0,
        A_buff_5_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_5_ce0,
        A_buff_5_q0 => A_buff_5_q0,
        B_buff_40_reload => grp_mm_Pipeline_2_fu_453_B_buff_40_out,
        A_buff_6_address0 => grp_mm_Pipeline_row_fu_524_A_buff_6_address0,
        A_buff_6_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_6_ce0,
        A_buff_6_q0 => A_buff_6_q0,
        B_buff_48_reload => grp_mm_Pipeline_2_fu_453_B_buff_48_out,
        A_buff_7_address0 => grp_mm_Pipeline_row_fu_524_A_buff_7_address0,
        A_buff_7_ce0 => grp_mm_Pipeline_row_fu_524_A_buff_7_ce0,
        A_buff_7_q0 => A_buff_7_q0,
        B_buff_56_reload => grp_mm_Pipeline_2_fu_453_B_buff_56_out,
        B_buff_1_reload => grp_mm_Pipeline_2_fu_453_B_buff_1_out,
        B_buff_9_reload => grp_mm_Pipeline_2_fu_453_B_buff_9_out,
        B_buff_17_reload => grp_mm_Pipeline_2_fu_453_B_buff_17_out,
        B_buff_25_reload => grp_mm_Pipeline_2_fu_453_B_buff_25_out,
        B_buff_33_reload => grp_mm_Pipeline_2_fu_453_B_buff_33_out,
        B_buff_41_reload => grp_mm_Pipeline_2_fu_453_B_buff_41_out,
        B_buff_49_reload => grp_mm_Pipeline_2_fu_453_B_buff_49_out,
        B_buff_57_reload => grp_mm_Pipeline_2_fu_453_B_buff_57_out,
        B_buff_2_reload => grp_mm_Pipeline_2_fu_453_B_buff_2_out,
        B_buff_10_reload => grp_mm_Pipeline_2_fu_453_B_buff_10_out,
        B_buff_18_reload => grp_mm_Pipeline_2_fu_453_B_buff_18_out,
        B_buff_26_reload => grp_mm_Pipeline_2_fu_453_B_buff_26_out,
        B_buff_34_reload => grp_mm_Pipeline_2_fu_453_B_buff_34_out,
        B_buff_42_reload => grp_mm_Pipeline_2_fu_453_B_buff_42_out,
        B_buff_50_reload => grp_mm_Pipeline_2_fu_453_B_buff_50_out,
        B_buff_58_reload => grp_mm_Pipeline_2_fu_453_B_buff_58_out,
        B_buff_3_reload => grp_mm_Pipeline_2_fu_453_B_buff_3_out,
        B_buff_11_reload => grp_mm_Pipeline_2_fu_453_B_buff_11_out,
        B_buff_19_reload => grp_mm_Pipeline_2_fu_453_B_buff_19_out,
        B_buff_27_reload => grp_mm_Pipeline_2_fu_453_B_buff_27_out,
        B_buff_35_reload => grp_mm_Pipeline_2_fu_453_B_buff_35_out,
        B_buff_43_reload => grp_mm_Pipeline_2_fu_453_B_buff_43_out,
        B_buff_51_reload => grp_mm_Pipeline_2_fu_453_B_buff_51_out,
        B_buff_59_reload => grp_mm_Pipeline_2_fu_453_B_buff_59_out,
        B_buff_4_reload => grp_mm_Pipeline_2_fu_453_B_buff_4_out,
        B_buff_12_reload => grp_mm_Pipeline_2_fu_453_B_buff_12_out,
        B_buff_20_reload => grp_mm_Pipeline_2_fu_453_B_buff_20_out,
        B_buff_28_reload => grp_mm_Pipeline_2_fu_453_B_buff_28_out,
        B_buff_36_reload => grp_mm_Pipeline_2_fu_453_B_buff_36_out,
        B_buff_44_reload => grp_mm_Pipeline_2_fu_453_B_buff_44_out,
        B_buff_52_reload => grp_mm_Pipeline_2_fu_453_B_buff_52_out,
        B_buff_60_reload => grp_mm_Pipeline_2_fu_453_B_buff_60_out,
        B_buff_5_reload => grp_mm_Pipeline_2_fu_453_B_buff_5_out,
        B_buff_13_reload => grp_mm_Pipeline_2_fu_453_B_buff_13_out,
        B_buff_21_reload => grp_mm_Pipeline_2_fu_453_B_buff_21_out,
        B_buff_29_reload => grp_mm_Pipeline_2_fu_453_B_buff_29_out,
        B_buff_37_reload => grp_mm_Pipeline_2_fu_453_B_buff_37_out,
        B_buff_45_reload => grp_mm_Pipeline_2_fu_453_B_buff_45_out,
        B_buff_53_reload => grp_mm_Pipeline_2_fu_453_B_buff_53_out,
        B_buff_61_reload => grp_mm_Pipeline_2_fu_453_B_buff_61_out,
        B_buff_6_reload => grp_mm_Pipeline_2_fu_453_B_buff_6_out,
        B_buff_14_reload => grp_mm_Pipeline_2_fu_453_B_buff_14_out,
        B_buff_22_reload => grp_mm_Pipeline_2_fu_453_B_buff_22_out,
        B_buff_30_reload => grp_mm_Pipeline_2_fu_453_B_buff_30_out,
        B_buff_38_reload => grp_mm_Pipeline_2_fu_453_B_buff_38_out,
        B_buff_46_reload => grp_mm_Pipeline_2_fu_453_B_buff_46_out,
        B_buff_54_reload => grp_mm_Pipeline_2_fu_453_B_buff_54_out,
        B_buff_62_reload => grp_mm_Pipeline_2_fu_453_B_buff_62_out,
        B_buff_7_reload => grp_mm_Pipeline_2_fu_453_B_buff_7_out,
        B_buff_15_reload => grp_mm_Pipeline_2_fu_453_B_buff_15_out,
        B_buff_23_reload => grp_mm_Pipeline_2_fu_453_B_buff_23_out,
        B_buff_31_reload => grp_mm_Pipeline_2_fu_453_B_buff_31_out,
        B_buff_39_reload => grp_mm_Pipeline_2_fu_453_B_buff_39_out,
        B_buff_47_reload => grp_mm_Pipeline_2_fu_453_B_buff_47_out,
        B_buff_55_reload => grp_mm_Pipeline_2_fu_453_B_buff_55_out,
        B_buff_63_reload => grp_mm_Pipeline_2_fu_453_B_buff_63_out);

    grp_mm_Pipeline_4_fu_608 : component mm_mm_Pipeline_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mm_Pipeline_4_fu_608_ap_start,
        ap_done => grp_mm_Pipeline_4_fu_608_ap_done,
        ap_idle => grp_mm_Pipeline_4_fu_608_ap_idle,
        ap_ready => grp_mm_Pipeline_4_fu_608_ap_ready,
        m_axi_AB_port_AWVALID => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWVALID,
        m_axi_AB_port_AWREADY => AB_port_AWREADY,
        m_axi_AB_port_AWADDR => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWADDR,
        m_axi_AB_port_AWID => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWID,
        m_axi_AB_port_AWLEN => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWLEN,
        m_axi_AB_port_AWSIZE => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWSIZE,
        m_axi_AB_port_AWBURST => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWBURST,
        m_axi_AB_port_AWLOCK => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWLOCK,
        m_axi_AB_port_AWCACHE => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWCACHE,
        m_axi_AB_port_AWPROT => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWPROT,
        m_axi_AB_port_AWQOS => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWQOS,
        m_axi_AB_port_AWREGION => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWREGION,
        m_axi_AB_port_AWUSER => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWUSER,
        m_axi_AB_port_WVALID => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WVALID,
        m_axi_AB_port_WREADY => AB_port_WREADY,
        m_axi_AB_port_WDATA => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WDATA,
        m_axi_AB_port_WSTRB => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WSTRB,
        m_axi_AB_port_WLAST => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WLAST,
        m_axi_AB_port_WID => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WID,
        m_axi_AB_port_WUSER => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WUSER,
        m_axi_AB_port_ARVALID => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARVALID,
        m_axi_AB_port_ARREADY => ap_const_logic_0,
        m_axi_AB_port_ARADDR => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARADDR,
        m_axi_AB_port_ARID => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARID,
        m_axi_AB_port_ARLEN => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARLEN,
        m_axi_AB_port_ARSIZE => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARSIZE,
        m_axi_AB_port_ARBURST => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARBURST,
        m_axi_AB_port_ARLOCK => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARLOCK,
        m_axi_AB_port_ARCACHE => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARCACHE,
        m_axi_AB_port_ARPROT => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARPROT,
        m_axi_AB_port_ARQOS => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARQOS,
        m_axi_AB_port_ARREGION => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARREGION,
        m_axi_AB_port_ARUSER => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_ARUSER,
        m_axi_AB_port_RVALID => ap_const_logic_0,
        m_axi_AB_port_RREADY => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_RREADY,
        m_axi_AB_port_RDATA => ap_const_lv32_0,
        m_axi_AB_port_RLAST => ap_const_logic_0,
        m_axi_AB_port_RID => ap_const_lv1_0,
        m_axi_AB_port_RFIFONUM => ap_const_lv9_0,
        m_axi_AB_port_RUSER => ap_const_lv1_0,
        m_axi_AB_port_RRESP => ap_const_lv2_0,
        m_axi_AB_port_BVALID => AB_port_BVALID,
        m_axi_AB_port_BREADY => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_BREADY,
        m_axi_AB_port_BRESP => ap_const_lv2_0,
        m_axi_AB_port_BID => ap_const_lv1_0,
        m_axi_AB_port_BUSER => ap_const_lv1_0,
        sext_ln53 => trunc_ln2_reg_1335,
        AB_buff_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_address0,
        AB_buff_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_ce0,
        AB_buff_q0 => AB_buff_q0,
        AB_buff_1_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_1_address0,
        AB_buff_1_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_1_ce0,
        AB_buff_1_q0 => AB_buff_1_q0,
        AB_buff_2_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_2_address0,
        AB_buff_2_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_2_ce0,
        AB_buff_2_q0 => AB_buff_2_q0,
        AB_buff_3_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_3_address0,
        AB_buff_3_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_3_ce0,
        AB_buff_3_q0 => AB_buff_3_q0,
        AB_buff_4_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_4_address0,
        AB_buff_4_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_4_ce0,
        AB_buff_4_q0 => AB_buff_4_q0,
        AB_buff_5_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_5_address0,
        AB_buff_5_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_5_ce0,
        AB_buff_5_q0 => AB_buff_5_q0,
        AB_buff_6_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_6_address0,
        AB_buff_6_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_6_ce0,
        AB_buff_6_q0 => AB_buff_6_q0,
        AB_buff_7_address0 => grp_mm_Pipeline_4_fu_608_AB_buff_7_address0,
        AB_buff_7_ce0 => grp_mm_Pipeline_4_fu_608_AB_buff_7_ce0,
        AB_buff_7_q0 => AB_buff_7_q0);

    CONTROL_BUS_s_axi_U : component mm_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        B => B,
        AB => AB,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AB_port_m_axi_U : component mm_AB_port_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AB_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AB_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AB_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AB_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AB_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AB_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AB_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AB_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AB_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AB_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AB_PORT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_AB_port_AWVALID,
        AWREADY => m_axi_AB_port_AWREADY,
        AWADDR => m_axi_AB_port_AWADDR,
        AWID => m_axi_AB_port_AWID,
        AWLEN => m_axi_AB_port_AWLEN,
        AWSIZE => m_axi_AB_port_AWSIZE,
        AWBURST => m_axi_AB_port_AWBURST,
        AWLOCK => m_axi_AB_port_AWLOCK,
        AWCACHE => m_axi_AB_port_AWCACHE,
        AWPROT => m_axi_AB_port_AWPROT,
        AWQOS => m_axi_AB_port_AWQOS,
        AWREGION => m_axi_AB_port_AWREGION,
        AWUSER => m_axi_AB_port_AWUSER,
        WVALID => m_axi_AB_port_WVALID,
        WREADY => m_axi_AB_port_WREADY,
        WDATA => m_axi_AB_port_WDATA,
        WSTRB => m_axi_AB_port_WSTRB,
        WLAST => m_axi_AB_port_WLAST,
        WID => m_axi_AB_port_WID,
        WUSER => m_axi_AB_port_WUSER,
        ARVALID => m_axi_AB_port_ARVALID,
        ARREADY => m_axi_AB_port_ARREADY,
        ARADDR => m_axi_AB_port_ARADDR,
        ARID => m_axi_AB_port_ARID,
        ARLEN => m_axi_AB_port_ARLEN,
        ARSIZE => m_axi_AB_port_ARSIZE,
        ARBURST => m_axi_AB_port_ARBURST,
        ARLOCK => m_axi_AB_port_ARLOCK,
        ARCACHE => m_axi_AB_port_ARCACHE,
        ARPROT => m_axi_AB_port_ARPROT,
        ARQOS => m_axi_AB_port_ARQOS,
        ARREGION => m_axi_AB_port_ARREGION,
        ARUSER => m_axi_AB_port_ARUSER,
        RVALID => m_axi_AB_port_RVALID,
        RREADY => m_axi_AB_port_RREADY,
        RDATA => m_axi_AB_port_RDATA,
        RLAST => m_axi_AB_port_RLAST,
        RID => m_axi_AB_port_RID,
        RUSER => m_axi_AB_port_RUSER,
        RRESP => m_axi_AB_port_RRESP,
        BVALID => m_axi_AB_port_BVALID,
        BREADY => m_axi_AB_port_BREADY,
        BRESP => m_axi_AB_port_BRESP,
        BID => m_axi_AB_port_BID,
        BUSER => m_axi_AB_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => AB_port_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => AB_port_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => AB_port_RDATA,
        I_RFIFONUM => AB_port_RFIFONUM,
        I_AWVALID => AB_port_AWVALID,
        I_AWREADY => AB_port_AWREADY,
        I_AWADDR => AB_port_AWADDR,
        I_AWLEN => AB_port_AWLEN,
        I_WVALID => AB_port_WVALID,
        I_WREADY => AB_port_WREADY,
        I_WDATA => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WDATA,
        I_WSTRB => grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WSTRB,
        I_BVALID => AB_port_BVALID,
        I_BREADY => AB_port_BREADY);

    A_port_m_axi_U : component mm_A_port_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_PORT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_A_port_AWVALID,
        AWREADY => m_axi_A_port_AWREADY,
        AWADDR => m_axi_A_port_AWADDR,
        AWID => m_axi_A_port_AWID,
        AWLEN => m_axi_A_port_AWLEN,
        AWSIZE => m_axi_A_port_AWSIZE,
        AWBURST => m_axi_A_port_AWBURST,
        AWLOCK => m_axi_A_port_AWLOCK,
        AWCACHE => m_axi_A_port_AWCACHE,
        AWPROT => m_axi_A_port_AWPROT,
        AWQOS => m_axi_A_port_AWQOS,
        AWREGION => m_axi_A_port_AWREGION,
        AWUSER => m_axi_A_port_AWUSER,
        WVALID => m_axi_A_port_WVALID,
        WREADY => m_axi_A_port_WREADY,
        WDATA => m_axi_A_port_WDATA,
        WSTRB => m_axi_A_port_WSTRB,
        WLAST => m_axi_A_port_WLAST,
        WID => m_axi_A_port_WID,
        WUSER => m_axi_A_port_WUSER,
        ARVALID => m_axi_A_port_ARVALID,
        ARREADY => m_axi_A_port_ARREADY,
        ARADDR => m_axi_A_port_ARADDR,
        ARID => m_axi_A_port_ARID,
        ARLEN => m_axi_A_port_ARLEN,
        ARSIZE => m_axi_A_port_ARSIZE,
        ARBURST => m_axi_A_port_ARBURST,
        ARLOCK => m_axi_A_port_ARLOCK,
        ARCACHE => m_axi_A_port_ARCACHE,
        ARPROT => m_axi_A_port_ARPROT,
        ARQOS => m_axi_A_port_ARQOS,
        ARREGION => m_axi_A_port_ARREGION,
        ARUSER => m_axi_A_port_ARUSER,
        RVALID => m_axi_A_port_RVALID,
        RREADY => m_axi_A_port_RREADY,
        RDATA => m_axi_A_port_RDATA,
        RLAST => m_axi_A_port_RLAST,
        RID => m_axi_A_port_RID,
        RUSER => m_axi_A_port_RUSER,
        RRESP => m_axi_A_port_RRESP,
        BVALID => m_axi_A_port_BVALID,
        BREADY => m_axi_A_port_BREADY,
        BRESP => m_axi_A_port_BRESP,
        BID => m_axi_A_port_BID,
        BUSER => m_axi_A_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_port_ARVALID,
        I_ARREADY => A_port_ARREADY,
        I_ARADDR => A_port_ARADDR,
        I_ARLEN => A_port_ARLEN,
        I_RVALID => A_port_RVALID,
        I_RREADY => A_port_RREADY,
        I_RDATA => A_port_RDATA,
        I_RFIFONUM => A_port_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => A_port_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => A_port_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => A_port_BVALID,
        I_BREADY => ap_const_logic_0);

    B_port_m_axi_U : component mm_B_port_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_PORT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_B_port_AWVALID,
        AWREADY => m_axi_B_port_AWREADY,
        AWADDR => m_axi_B_port_AWADDR,
        AWID => m_axi_B_port_AWID,
        AWLEN => m_axi_B_port_AWLEN,
        AWSIZE => m_axi_B_port_AWSIZE,
        AWBURST => m_axi_B_port_AWBURST,
        AWLOCK => m_axi_B_port_AWLOCK,
        AWCACHE => m_axi_B_port_AWCACHE,
        AWPROT => m_axi_B_port_AWPROT,
        AWQOS => m_axi_B_port_AWQOS,
        AWREGION => m_axi_B_port_AWREGION,
        AWUSER => m_axi_B_port_AWUSER,
        WVALID => m_axi_B_port_WVALID,
        WREADY => m_axi_B_port_WREADY,
        WDATA => m_axi_B_port_WDATA,
        WSTRB => m_axi_B_port_WSTRB,
        WLAST => m_axi_B_port_WLAST,
        WID => m_axi_B_port_WID,
        WUSER => m_axi_B_port_WUSER,
        ARVALID => m_axi_B_port_ARVALID,
        ARREADY => m_axi_B_port_ARREADY,
        ARADDR => m_axi_B_port_ARADDR,
        ARID => m_axi_B_port_ARID,
        ARLEN => m_axi_B_port_ARLEN,
        ARSIZE => m_axi_B_port_ARSIZE,
        ARBURST => m_axi_B_port_ARBURST,
        ARLOCK => m_axi_B_port_ARLOCK,
        ARCACHE => m_axi_B_port_ARCACHE,
        ARPROT => m_axi_B_port_ARPROT,
        ARQOS => m_axi_B_port_ARQOS,
        ARREGION => m_axi_B_port_ARREGION,
        ARUSER => m_axi_B_port_ARUSER,
        RVALID => m_axi_B_port_RVALID,
        RREADY => m_axi_B_port_RREADY,
        RDATA => m_axi_B_port_RDATA,
        RLAST => m_axi_B_port_RLAST,
        RID => m_axi_B_port_RID,
        RUSER => m_axi_B_port_RUSER,
        RRESP => m_axi_B_port_RRESP,
        BVALID => m_axi_B_port_BVALID,
        BREADY => m_axi_B_port_BREADY,
        BRESP => m_axi_B_port_BRESP,
        BID => m_axi_B_port_BID,
        BUSER => m_axi_B_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B_port_ARVALID,
        I_ARREADY => B_port_ARREADY,
        I_ARADDR => B_port_ARADDR,
        I_ARLEN => B_port_ARLEN,
        I_RVALID => B_port_RVALID,
        I_RREADY => B_port_RREADY,
        I_RDATA => B_port_RDATA,
        I_RFIFONUM => B_port_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => B_port_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => B_port_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => B_port_BVALID,
        I_BREADY => ap_const_logic_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mm_Pipeline_1_fu_438_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mm_Pipeline_1_fu_438_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_mm_Pipeline_1_fu_438_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mm_Pipeline_1_fu_438_ap_ready = ap_const_logic_1)) then 
                    grp_mm_Pipeline_1_fu_438_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mm_Pipeline_2_fu_453_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mm_Pipeline_2_fu_453_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_mm_Pipeline_2_fu_453_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mm_Pipeline_2_fu_453_ap_ready = ap_const_logic_1)) then 
                    grp_mm_Pipeline_2_fu_453_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mm_Pipeline_4_fu_608_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mm_Pipeline_4_fu_608_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_mm_Pipeline_4_fu_608_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mm_Pipeline_4_fu_608_ap_ready = ap_const_logic_1)) then 
                    grp_mm_Pipeline_4_fu_608_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mm_Pipeline_row_fu_524_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mm_Pipeline_row_fu_524_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_mm_Pipeline_row_fu_524_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mm_Pipeline_row_fu_524_ap_ready = ap_const_logic_1)) then 
                    grp_mm_Pipeline_row_fu_524_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln1_reg_1329 <= B(63 downto 2);
                trunc_ln2_reg_1335 <= AB(63 downto 2);
                trunc_ln_reg_1323 <= A(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state19, grp_mm_Pipeline_row_fu_524_ap_done, grp_mm_Pipeline_4_fu_608_ap_done, AB_port_AWREADY, AB_port_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_block_state2_io, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not(((grp_mm_Pipeline_row_fu_524_ap_done = ap_const_logic_0) or (ap_const_logic_0 = AB_port_AWREADY))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_mm_Pipeline_4_fu_608_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = AB_port_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    AB_buff_1_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_1_address0, grp_mm_Pipeline_4_fu_608_AB_buff_1_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_1_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_1_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_1_address0;
        else 
            AB_buff_1_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_1_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_1_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_1_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_1_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_1_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_1_ce0;
        else 
            AB_buff_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_1_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_1_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_1_we0;
        else 
            AB_buff_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_2_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_2_address0, grp_mm_Pipeline_4_fu_608_AB_buff_2_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_2_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_2_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_2_address0;
        else 
            AB_buff_2_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_2_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_2_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_2_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_2_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_2_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_2_ce0;
        else 
            AB_buff_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_2_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_2_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_2_we0;
        else 
            AB_buff_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_3_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_3_address0, grp_mm_Pipeline_4_fu_608_AB_buff_3_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_3_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_3_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_3_address0;
        else 
            AB_buff_3_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_3_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_3_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_3_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_3_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_3_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_3_ce0;
        else 
            AB_buff_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_3_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_3_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_3_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_3_we0;
        else 
            AB_buff_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_4_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_4_address0, grp_mm_Pipeline_4_fu_608_AB_buff_4_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_4_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_4_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_4_address0;
        else 
            AB_buff_4_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_4_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_4_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_4_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_4_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_4_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_4_ce0;
        else 
            AB_buff_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_4_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_4_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_4_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_4_we0;
        else 
            AB_buff_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_5_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_5_address0, grp_mm_Pipeline_4_fu_608_AB_buff_5_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_5_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_5_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_5_address0;
        else 
            AB_buff_5_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_5_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_5_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_5_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_5_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_5_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_5_ce0;
        else 
            AB_buff_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_5_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_5_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_5_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_5_we0;
        else 
            AB_buff_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_6_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_6_address0, grp_mm_Pipeline_4_fu_608_AB_buff_6_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_6_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_6_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_6_address0;
        else 
            AB_buff_6_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_6_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_6_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_6_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_6_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_6_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_6_ce0;
        else 
            AB_buff_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_6_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_6_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_6_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_6_we0;
        else 
            AB_buff_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_7_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_7_address0, grp_mm_Pipeline_4_fu_608_AB_buff_7_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_7_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_7_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_7_address0;
        else 
            AB_buff_7_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_7_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_7_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_7_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_7_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_7_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_7_ce0;
        else 
            AB_buff_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_7_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_7_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_7_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_7_we0;
        else 
            AB_buff_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_address0, grp_mm_Pipeline_4_fu_608_AB_buff_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_address0 <= grp_mm_Pipeline_4_fu_608_AB_buff_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_address0 <= grp_mm_Pipeline_row_fu_524_AB_buff_address0;
        else 
            AB_buff_address0 <= "XXX";
        end if; 
    end process;


    AB_buff_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_ce0, grp_mm_Pipeline_4_fu_608_AB_buff_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_buff_ce0 <= grp_mm_Pipeline_4_fu_608_AB_buff_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_ce0 <= grp_mm_Pipeline_row_fu_524_AB_buff_ce0;
        else 
            AB_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_buff_we0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_AB_buff_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_buff_we0 <= grp_mm_Pipeline_row_fu_524_AB_buff_we0;
        else 
            AB_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_port_AWADDR_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_ap_done, grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWADDR, AB_port_AWREADY, ap_CS_fsm_state13, ap_CS_fsm_state14, sext_ln53_fu_929_p1)
    begin
        if ((not(((grp_mm_Pipeline_row_fu_524_ap_done = ap_const_logic_0) or (ap_const_logic_0 = AB_port_AWREADY))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            AB_port_AWADDR <= sext_ln53_fu_929_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            AB_port_AWADDR <= grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWADDR;
        else 
            AB_port_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_port_AWLEN_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_ap_done, grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWLEN, AB_port_AWREADY, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((not(((grp_mm_Pipeline_row_fu_524_ap_done = ap_const_logic_0) or (ap_const_logic_0 = AB_port_AWREADY))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            AB_port_AWLEN <= ap_const_lv32_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            AB_port_AWLEN <= grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWLEN;
        else 
            AB_port_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_port_AWVALID_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_row_fu_524_ap_done, grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWVALID, AB_port_AWREADY, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((not(((grp_mm_Pipeline_row_fu_524_ap_done = ap_const_logic_0) or (ap_const_logic_0 = AB_port_AWREADY))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            AB_port_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            AB_port_AWVALID <= grp_mm_Pipeline_4_fu_608_m_axi_AB_port_AWVALID;
        else 
            AB_port_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    AB_port_BREADY_assign_proc : process(ap_CS_fsm_state19, grp_mm_Pipeline_4_fu_608_m_axi_AB_port_BREADY, AB_port_BVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = AB_port_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            AB_port_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            AB_port_BREADY <= grp_mm_Pipeline_4_fu_608_m_axi_AB_port_BREADY;
        else 
            AB_port_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    AB_port_WVALID_assign_proc : process(grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            AB_port_WVALID <= grp_mm_Pipeline_4_fu_608_m_axi_AB_port_WVALID;
        else 
            AB_port_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    AB_port_blk_n_AW_assign_proc : process(m_axi_AB_port_AWREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_port_blk_n_AW <= m_axi_AB_port_AWREADY;
        else 
            AB_port_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    AB_port_blk_n_B_assign_proc : process(m_axi_AB_port_BVALID, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            AB_port_blk_n_B <= m_axi_AB_port_BVALID;
        else 
            AB_port_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    A_buff_1_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_1_address0, grp_mm_Pipeline_row_fu_524_A_buff_1_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_1_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_1_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_1_address0;
        else 
            A_buff_1_address0 <= "XXX";
        end if; 
    end process;


    A_buff_1_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_1_ce0, grp_mm_Pipeline_row_fu_524_A_buff_1_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_1_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_1_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_1_ce0;
        else 
            A_buff_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_1_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_1_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_1_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_1_we0;
        else 
            A_buff_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_2_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_2_address0, grp_mm_Pipeline_row_fu_524_A_buff_2_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_2_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_2_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_2_address0;
        else 
            A_buff_2_address0 <= "XXX";
        end if; 
    end process;


    A_buff_2_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_2_ce0, grp_mm_Pipeline_row_fu_524_A_buff_2_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_2_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_2_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_2_ce0;
        else 
            A_buff_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_2_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_2_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_2_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_2_we0;
        else 
            A_buff_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_3_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_3_address0, grp_mm_Pipeline_row_fu_524_A_buff_3_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_3_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_3_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_3_address0;
        else 
            A_buff_3_address0 <= "XXX";
        end if; 
    end process;


    A_buff_3_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_3_ce0, grp_mm_Pipeline_row_fu_524_A_buff_3_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_3_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_3_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_3_ce0;
        else 
            A_buff_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_3_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_3_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_3_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_3_we0;
        else 
            A_buff_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_4_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_4_address0, grp_mm_Pipeline_row_fu_524_A_buff_4_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_4_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_4_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_4_address0;
        else 
            A_buff_4_address0 <= "XXX";
        end if; 
    end process;


    A_buff_4_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_4_ce0, grp_mm_Pipeline_row_fu_524_A_buff_4_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_4_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_4_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_4_ce0;
        else 
            A_buff_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_4_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_4_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_4_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_4_we0;
        else 
            A_buff_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_5_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_5_address0, grp_mm_Pipeline_row_fu_524_A_buff_5_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_5_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_5_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_5_address0;
        else 
            A_buff_5_address0 <= "XXX";
        end if; 
    end process;


    A_buff_5_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_5_ce0, grp_mm_Pipeline_row_fu_524_A_buff_5_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_5_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_5_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_5_ce0;
        else 
            A_buff_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_5_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_5_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_5_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_5_we0;
        else 
            A_buff_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_6_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_6_address0, grp_mm_Pipeline_row_fu_524_A_buff_6_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_6_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_6_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_6_address0;
        else 
            A_buff_6_address0 <= "XXX";
        end if; 
    end process;


    A_buff_6_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_6_ce0, grp_mm_Pipeline_row_fu_524_A_buff_6_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_6_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_6_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_6_ce0;
        else 
            A_buff_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_6_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_6_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_6_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_6_we0;
        else 
            A_buff_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_7_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_7_address0, grp_mm_Pipeline_row_fu_524_A_buff_7_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_7_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_7_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_7_address0;
        else 
            A_buff_7_address0 <= "XXX";
        end if; 
    end process;


    A_buff_7_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_7_ce0, grp_mm_Pipeline_row_fu_524_A_buff_7_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_7_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_7_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_7_ce0;
        else 
            A_buff_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_7_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_7_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_7_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_7_we0;
        else 
            A_buff_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_address0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_address0, grp_mm_Pipeline_row_fu_524_A_buff_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_address0 <= grp_mm_Pipeline_row_fu_524_A_buff_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_address0 <= grp_mm_Pipeline_1_fu_438_A_buff_address0;
        else 
            A_buff_address0 <= "XXX";
        end if; 
    end process;


    A_buff_ce0_assign_proc : process(ap_CS_fsm_state12, grp_mm_Pipeline_1_fu_438_A_buff_ce0, grp_mm_Pipeline_row_fu_524_A_buff_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_buff_ce0 <= grp_mm_Pipeline_row_fu_524_A_buff_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_ce0 <= grp_mm_Pipeline_1_fu_438_A_buff_ce0;
        else 
            A_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buff_we0_assign_proc : process(grp_mm_Pipeline_1_fu_438_A_buff_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_buff_we0 <= grp_mm_Pipeline_1_fu_438_A_buff_we0;
        else 
            A_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_port_ARADDR_assign_proc : process(ap_CS_fsm_state2, grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln34_fu_653_p1, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            A_port_ARADDR <= sext_ln34_fu_653_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_port_ARADDR <= grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARADDR;
        else 
            A_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_port_ARLEN_assign_proc : process(ap_CS_fsm_state2, grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            A_port_ARLEN <= ap_const_lv32_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_port_ARLEN <= grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARLEN;
        else 
            A_port_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_port_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            A_port_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_port_ARVALID <= grp_mm_Pipeline_1_fu_438_m_axi_A_port_ARVALID;
        else 
            A_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_port_RREADY_assign_proc : process(grp_mm_Pipeline_1_fu_438_m_axi_A_port_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_port_RREADY <= grp_mm_Pipeline_1_fu_438_m_axi_A_port_RREADY;
        else 
            A_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_port_blk_n_AR_assign_proc : process(m_axi_A_port_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_port_blk_n_AR <= m_axi_A_port_ARREADY;
        else 
            A_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B_port_ARADDR_assign_proc : process(ap_CS_fsm_state2, grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln35_fu_663_p1, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            B_port_ARADDR <= sext_ln35_fu_663_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            B_port_ARADDR <= grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARADDR;
        else 
            B_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_port_ARLEN_assign_proc : process(ap_CS_fsm_state2, grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            B_port_ARLEN <= ap_const_lv32_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            B_port_ARLEN <= grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARLEN;
        else 
            B_port_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_port_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            B_port_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            B_port_ARVALID <= grp_mm_Pipeline_2_fu_453_m_axi_B_port_ARVALID;
        else 
            B_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    B_port_RREADY_assign_proc : process(grp_mm_Pipeline_2_fu_453_m_axi_B_port_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            B_port_RREADY <= grp_mm_Pipeline_2_fu_453_m_axi_B_port_RREADY;
        else 
            B_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    B_port_blk_n_AR_assign_proc : process(m_axi_B_port_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_port_blk_n_AR <= m_axi_B_port_ARREADY;
        else 
            B_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_on_subcall_done)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_mm_Pipeline_row_fu_524_ap_done, AB_port_AWREADY)
    begin
        if (((grp_mm_Pipeline_row_fu_524_ap_done = ap_const_logic_0) or (ap_const_logic_0 = AB_port_AWREADY))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(grp_mm_Pipeline_4_fu_608_ap_done)
    begin
        if ((grp_mm_Pipeline_4_fu_608_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(AB_port_BVALID)
    begin
        if ((ap_const_logic_0 = AB_port_BVALID)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state10_on_subcall_done_assign_proc : process(grp_mm_Pipeline_1_fu_438_ap_done, grp_mm_Pipeline_2_fu_453_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_mm_Pipeline_2_fu_453_ap_done = ap_const_logic_0) or (grp_mm_Pipeline_1_fu_438_ap_done = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(A_port_ARREADY, B_port_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = A_port_ARREADY) or (ap_const_logic_0 = B_port_ARREADY));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19, AB_port_BVALID)
    begin
        if (((ap_const_logic_1 = AB_port_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, AB_port_BVALID)
    begin
        if (((ap_const_logic_1 = AB_port_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_mm_Pipeline_1_fu_438_ap_start <= grp_mm_Pipeline_1_fu_438_ap_start_reg;
    grp_mm_Pipeline_2_fu_453_ap_start <= grp_mm_Pipeline_2_fu_453_ap_start_reg;
    grp_mm_Pipeline_4_fu_608_ap_start <= grp_mm_Pipeline_4_fu_608_ap_start_reg;
    grp_mm_Pipeline_row_fu_524_ap_start <= grp_mm_Pipeline_row_fu_524_ap_start_reg;
        sext_ln34_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1323),64));

        sext_ln35_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1329),64));

        sext_ln53_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_1335),64));

end behav;
