// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mm_mm,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=2705,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=338,HLS_SYN_LUT=281,HLS_VERSION=2022_2}" *)

module mm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [5:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [5:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg AB_ce0;
reg AB_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] tmp_fu_137_p3;
reg   [5:0] tmp_reg_251;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln14_fu_151_p2;
reg   [3:0] add_ln14_reg_260;
wire   [5:0] zext_ln20_fu_157_p1;
reg   [5:0] zext_ln20_reg_265;
wire    ap_CS_fsm_state3;
reg   [5:0] AB_addr_reg_270;
wire   [3:0] add_ln15_fu_177_p2;
reg   [3:0] add_ln15_reg_278;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln17_fu_229_p2;
reg   [3:0] add_ln17_reg_296;
reg  signed [31:0] A_load_reg_301;
wire    ap_CS_fsm_state5;
reg  signed [31:0] B_load_reg_306;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] mul_ln18_reg_311;
wire    ap_CS_fsm_state7;
wire   [31:0] ABij_1_fu_239_p2;
wire    ap_CS_fsm_state8;
reg   [3:0] j_reg_90;
wire   [0:0] icmp_ln17_fu_223_p2;
wire   [0:0] icmp_ln14_fu_145_p2;
reg   [3:0] k_reg_101;
wire   [0:0] icmp_ln15_fu_171_p2;
reg   [31:0] ABij_reg_112;
wire   [63:0] zext_ln20_1_fu_166_p1;
wire   [63:0] zext_ln18_1_fu_200_p1;
wire   [63:0] zext_ln18_2_fu_218_p1;
reg   [3:0] i_fu_48;
wire   [2:0] trunc_ln18_fu_133_p1;
wire   [5:0] add_ln20_fu_161_p2;
wire   [5:0] zext_ln18_fu_191_p1;
wire   [5:0] add_ln18_fu_195_p2;
wire   [2:0] trunc_ln17_fu_187_p1;
wire   [5:0] tmp_1_fu_205_p3;
wire   [5:0] add_ln18_1_fu_213_p2;
wire    ap_CS_fsm_state6;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

mm_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_load_reg_306),
    .din1(A_load_reg_301),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln15_fu_171_p2 == 1'd0))) begin
        ABij_reg_112 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ABij_reg_112 <= ABij_1_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_48 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln15_fu_171_p2 == 1'd1))) begin
        i_fu_48 <= add_ln14_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln14_fu_145_p2 == 1'd0))) begin
        j_reg_90 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln17_fu_223_p2 == 1'd1))) begin
        j_reg_90 <= add_ln15_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln15_fu_171_p2 == 1'd0))) begin
        k_reg_101 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_reg_101 <= add_ln17_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        AB_addr_reg_270 <= zext_ln20_1_fu_166_p1;
        add_ln15_reg_278 <= add_ln15_fu_177_p2;
        zext_ln20_reg_265[3 : 0] <= zext_ln20_fu_157_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_load_reg_301 <= A_q0;
        B_load_reg_306 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln14_reg_260 <= add_ln14_fu_151_p2;
        tmp_reg_251[5 : 3] <= tmp_fu_137_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln17_reg_296 <= add_ln17_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln18_reg_311 <= grp_fu_235_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln17_fu_223_p2 == 1'd1))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln14_fu_145_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln14_fu_145_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln14_fu_145_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln15_fu_171_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln17_fu_223_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = AB_addr_reg_270;

assign AB_d0 = ABij_reg_112;

assign ABij_1_fu_239_p2 = (mul_ln18_reg_311 + ABij_reg_112);

assign A_address0 = zext_ln18_1_fu_200_p1;

assign B_address0 = zext_ln18_2_fu_218_p1;

assign add_ln14_fu_151_p2 = (i_fu_48 + 4'd1);

assign add_ln15_fu_177_p2 = (j_reg_90 + 4'd1);

assign add_ln17_fu_229_p2 = (k_reg_101 + 4'd1);

assign add_ln18_1_fu_213_p2 = (tmp_1_fu_205_p3 + zext_ln20_reg_265);

assign add_ln18_fu_195_p2 = (tmp_reg_251 + zext_ln18_fu_191_p1);

assign add_ln20_fu_161_p2 = (tmp_reg_251 + zext_ln20_fu_157_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign icmp_ln14_fu_145_p2 = ((i_fu_48 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_171_p2 = ((j_reg_90 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_223_p2 = ((k_reg_101 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_1_fu_205_p3 = {{trunc_ln17_fu_187_p1}, {3'd0}};

assign tmp_fu_137_p3 = {{trunc_ln18_fu_133_p1}, {3'd0}};

assign trunc_ln17_fu_187_p1 = k_reg_101[2:0];

assign trunc_ln18_fu_133_p1 = i_fu_48[2:0];

assign zext_ln18_1_fu_200_p1 = add_ln18_fu_195_p2;

assign zext_ln18_2_fu_218_p1 = add_ln18_1_fu_213_p2;

assign zext_ln18_fu_191_p1 = k_reg_101;

assign zext_ln20_1_fu_166_p1 = add_ln20_fu_161_p2;

assign zext_ln20_fu_157_p1 = j_reg_90;

always @ (posedge ap_clk) begin
    tmp_reg_251[2:0] <= 3'b000;
    zext_ln20_reg_265[5:4] <= 2'b00;
end

endmodule //mm
