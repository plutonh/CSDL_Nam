-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mm_mm,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.135000,HLS_SYN_LAT=259,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=217,HLS_SYN_LUT=742,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln14_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal tmp_cast_fu_308_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_reg_645 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln14_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln14_reg_665 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_fu_359_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast_reg_673 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln20_fu_377_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln20_reg_681 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln18_7_fu_460_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_7_reg_716 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_cast_fu_463_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_cast_reg_722 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln14_15_fu_521_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_15_reg_752 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_16_fu_526_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_16_reg_757 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_fu_553_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_reg_772 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_1_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln18_4_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln18_5_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_6_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_6_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln14_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln18_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_9_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln18_2_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_10_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_11_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_3_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln18_4_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_12_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_13_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_5_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln18_6_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_14_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_15_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_fu_417_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln14_1_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln14_1_fu_324_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln18_fu_304_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln14_fu_333_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln14_fu_339_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_255_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_260_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln14_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_8_fu_402_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_7_fu_406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln14_1_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln14_2_fu_449_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_8_fu_475_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln14_3_fu_499_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln14_4_fu_510_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_cast_fu_531_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_9_fu_543_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_492_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln14_5_fu_558_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln14_6_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln18_fu_578_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln18_fu_586_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln18_1_fu_591_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_3_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_5_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_2_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_242 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U1 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_q1,
        din1 => A_q1,
        dout => grp_fu_265_p2);

    mul_32s_32s_32_1_1_U2 : component mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => B_q0,
        din1 => A_q0,
        dout => grp_fu_271_p2);

    flow_control_loop_pipe_U : component mm_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_242)) then
                if ((icmp_ln14_fu_318_p2 = ap_const_lv1_0)) then 
                    i_fu_88 <= select_ln14_1_fu_369_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_242)) then
                if ((icmp_ln14_fu_318_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_92 <= add_ln14_1_fu_324_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_242)) then
                if ((icmp_ln14_fu_318_p2 = ap_const_lv1_0)) then 
                    j_fu_84 <= add_ln15_fu_417_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_84 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_653 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln18_1_reg_777 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln18_6_reg_812 <= add_ln18_6_fu_614_p2;
                icmp_ln14_reg_653 <= icmp_ln14_fu_318_p2;
                    tmp_cast_reg_645(5 downto 3) <= tmp_cast_fu_308_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_653 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln18_reg_737 <= add_ln18_fu_486_p2;
                    tmp_17_cast_reg_722(3 downto 0) <= tmp_17_cast_fu_463_p3(3 downto 0);
                    zext_ln18_7_reg_716(3 downto 0) <= zext_ln18_7_fu_460_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_653 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln20_reg_772 <= add_ln20_fu_553_p2;
                    select_ln14_15_reg_752(5 downto 3) <= select_ln14_15_fu_521_p3(5 downto 3);
                    select_ln14_16_reg_757(5 downto 3) <= select_ln14_16_fu_526_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_318_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln15_reg_657 <= icmp_ln15_fu_343_p2;
                select_ln14_reg_665 <= select_ln14_fu_351_p3;
                    tmp_8_cast_reg_673(5 downto 3) <= tmp_8_cast_fu_359_p3(5 downto 3);
                trunc_ln20_reg_681 <= trunc_ln20_fu_377_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_653 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln18_4_reg_802 <= grp_fu_265_p2;
                mul_ln18_5_reg_807 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_645(2 downto 0) <= "000";
    tmp_8_cast_reg_673(2 downto 0) <= "000";
    zext_ln18_7_reg_716(5 downto 4) <= "00";
    tmp_17_cast_reg_722(4) <= '1';
    select_ln14_15_reg_752(2 downto 0) <= "000";
    select_ln14_16_reg_757(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    AB_address0 <= zext_ln20_fu_620_p1(6 - 1 downto 0);

    AB_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= add_ln18_6_reg_812;

    AB_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln18_fu_392_p1, ap_block_pp0_stage1, zext_ln18_2_fu_455_p1, ap_block_pp0_stage2, zext_ln18_4_fu_516_p1, ap_block_pp0_stage3, zext_ln18_6_fu_573_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_address0 <= zext_ln18_6_fu_573_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_address0 <= zext_ln18_4_fu_516_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address0 <= zext_ln18_2_fu_455_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_address0 <= zext_ln18_fu_392_p1(6 - 1 downto 0);
            else 
                A_address0 <= "XXXXXX";
            end if;
        else 
            A_address0 <= "XXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, zext_ln14_fu_381_p1, ap_block_pp0_stage0, zext_ln18_1_fu_444_p1, ap_block_pp0_stage1, zext_ln18_3_fu_505_p1, ap_block_pp0_stage2, zext_ln18_5_fu_563_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_address1 <= zext_ln18_5_fu_563_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_address1 <= zext_ln18_3_fu_505_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address1 <= zext_ln18_1_fu_444_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_address1 <= zext_ln14_fu_381_p1(6 - 1 downto 0);
            else 
                A_address1 <= "XXXXXX";
            end if;
        else 
            A_address1 <= "XXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln18_9_fu_412_p1, ap_block_pp0_stage1, zext_ln18_11_fu_481_p1, ap_block_pp0_stage2, zext_ln18_13_fu_548_p1, ap_block_pp0_stage3, zext_ln18_15_fu_595_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_address0 <= zext_ln18_15_fu_595_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_address0 <= zext_ln18_13_fu_548_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_address0 <= zext_ln18_11_fu_481_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_address0 <= zext_ln18_9_fu_412_p1(6 - 1 downto 0);
            else 
                B_address0 <= "XXXXXX";
            end if;
        else 
            B_address0 <= "XXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, j_cast_fu_397_p1, ap_block_pp0_stage1, zext_ln18_10_fu_470_p1, ap_block_pp0_stage2, zext_ln18_12_fu_538_p1, ap_block_pp0_stage3, zext_ln18_14_fu_581_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_address1 <= zext_ln18_14_fu_581_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_address1 <= zext_ln18_12_fu_538_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_address1 <= zext_ln18_10_fu_470_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_address1 <= j_cast_fu_397_p1(6 - 1 downto 0);
            else 
                B_address1 <= "XXXXXX";
            end if;
        else 
            B_address1 <= "XXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln14_1_fu_324_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln14_fu_333_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    add_ln15_fu_417_p2 <= std_logic_vector(unsigned(select_ln14_fu_351_p3) + unsigned(ap_const_lv4_1));
    add_ln18_2_fu_600_p2 <= std_logic_vector(unsigned(add_ln18_1_reg_777) + unsigned(add_ln18_reg_737));
    add_ln18_3_fu_604_p2 <= std_logic_vector(unsigned(mul_ln18_4_reg_802) + unsigned(mul_ln18_5_reg_807));
    add_ln18_5_fu_608_p2 <= std_logic_vector(unsigned(grp_fu_277_p2) + unsigned(add_ln18_3_fu_604_p2));
    add_ln18_6_fu_614_p2 <= std_logic_vector(unsigned(add_ln18_5_fu_608_p2) + unsigned(add_ln18_2_fu_600_p2));
    add_ln18_7_fu_406_p2 <= std_logic_vector(unsigned(zext_ln18_8_fu_402_p1) + unsigned(ap_const_lv5_8));
    add_ln18_8_fu_475_p2 <= std_logic_vector(unsigned(zext_ln18_7_fu_460_p1) + unsigned(ap_const_lv6_18));
    add_ln18_9_fu_543_p2 <= std_logic_vector(unsigned(zext_ln18_7_reg_716) + unsigned(ap_const_lv6_28));
    add_ln18_fu_486_p2 <= std_logic_vector(unsigned(grp_fu_271_p2) + unsigned(grp_fu_265_p2));
    add_ln20_fu_553_p2 <= std_logic_vector(unsigned(tmp_s_fu_492_p3) + unsigned(zext_ln18_7_reg_716));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_242_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_242 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln14_reg_653)
    begin
        if (((icmp_ln14_reg_653 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_84;
        end if; 
    end process;


    grp_fu_255_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln15_fu_343_p2, icmp_ln15_reg_657, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_255_p0 <= icmp_ln15_reg_657;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_255_p0 <= icmp_ln15_fu_343_p2;
        else 
            grp_fu_255_p0 <= "X";
        end if; 
    end process;


    grp_fu_255_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_8_cast_fu_359_p3, tmp_8_cast_reg_673, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_255_p1 <= tmp_8_cast_reg_673;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_255_p1 <= tmp_8_cast_fu_359_p3;
        else 
            grp_fu_255_p1 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_255_p2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_cast_fu_308_p3, tmp_cast_reg_645, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_255_p2 <= tmp_cast_reg_645;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_255_p2 <= tmp_cast_fu_308_p3;
        else 
            grp_fu_255_p2 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_255_p3 <= 
        grp_fu_255_p1 when (grp_fu_255_p0(0) = '1') else 
        grp_fu_255_p2;

    grp_fu_260_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln15_fu_343_p2, icmp_ln15_reg_657, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_260_p0 <= icmp_ln15_reg_657;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_260_p0 <= icmp_ln15_fu_343_p2;
        else 
            grp_fu_260_p0 <= "X";
        end if; 
    end process;


    grp_fu_260_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_8_cast_fu_359_p3, tmp_8_cast_reg_673, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_260_p1 <= tmp_8_cast_reg_673;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_260_p1 <= tmp_8_cast_fu_359_p3;
        else 
            grp_fu_260_p1 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_260_p2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_cast_fu_308_p3, tmp_cast_reg_645, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_260_p2 <= tmp_cast_reg_645;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_260_p2 <= tmp_cast_fu_308_p3;
        else 
            grp_fu_260_p2 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_260_p3 <= 
        grp_fu_260_p1 when (grp_fu_260_p0(0) = '1') else 
        grp_fu_260_p2;
    grp_fu_277_p2 <= std_logic_vector(unsigned(grp_fu_265_p2) + unsigned(grp_fu_271_p2));
    icmp_ln14_fu_318_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln15_fu_343_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_8) else "0";
    j_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_351_p3),64));
    or_ln14_1_fu_438_p2 <= (grp_fu_255_p3 or ap_const_lv6_2);
    or_ln14_2_fu_449_p2 <= (grp_fu_260_p3 or ap_const_lv6_3);
    or_ln14_3_fu_499_p2 <= (grp_fu_255_p3 or ap_const_lv6_4);
    or_ln14_4_fu_510_p2 <= (grp_fu_260_p3 or ap_const_lv6_5);
    or_ln14_5_fu_558_p2 <= (select_ln14_15_reg_752 or ap_const_lv6_6);
    or_ln14_6_fu_568_p2 <= (select_ln14_16_reg_757 or ap_const_lv6_7);
    or_ln14_fu_386_p2 <= (grp_fu_260_p3 or ap_const_lv6_1);
    select_ln14_15_fu_521_p3 <= 
        tmp_8_cast_reg_673 when (icmp_ln15_reg_657(0) = '1') else 
        tmp_cast_reg_645;
    select_ln14_16_fu_526_p3 <= 
        tmp_8_cast_reg_673 when (icmp_ln15_reg_657(0) = '1') else 
        tmp_cast_reg_645;
    select_ln14_1_fu_369_p3 <= 
        add_ln14_fu_333_p2 when (icmp_ln15_fu_343_p2(0) = '1') else 
        ap_sig_allocacmp_i_1;
    select_ln14_fu_351_p3 <= 
        ap_const_lv4_0 when (icmp_ln15_fu_343_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln18_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln18_fu_586_p2),6));

        sext_ln18_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_cast_reg_722),6));

    tmp_17_cast_fu_463_p3 <= (ap_const_lv1_1 & select_ln14_reg_665);
    tmp_18_cast_fu_531_p3 <= (ap_const_lv2_2 & select_ln14_reg_665);
    tmp_8_cast_fu_359_p3 <= (trunc_ln14_fu_339_p1 & ap_const_lv3_0);
    tmp_cast_fu_308_p3 <= (trunc_ln18_fu_304_p1 & ap_const_lv3_0);
    tmp_s_fu_492_p3 <= (trunc_ln20_reg_681 & ap_const_lv3_0);
    trunc_ln14_fu_339_p1 <= add_ln14_fu_333_p2(3 - 1 downto 0);
    trunc_ln18_fu_304_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    trunc_ln20_fu_377_p1 <= select_ln14_1_fu_369_p3(3 - 1 downto 0);
    xor_ln18_fu_586_p2 <= (select_ln14_reg_665 xor ap_const_lv4_8);
    zext_ln14_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_255_p3),64));
    zext_ln18_10_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_cast_fu_463_p3),64));
    zext_ln18_11_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_8_fu_475_p2),64));
    zext_ln18_12_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_cast_fu_531_p3),64));
    zext_ln18_13_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_9_fu_543_p2),64));
    zext_ln18_14_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_fu_578_p1),64));
    zext_ln18_15_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_591_p1),64));
    zext_ln18_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_1_fu_438_p2),64));
    zext_ln18_2_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_2_fu_449_p2),64));
    zext_ln18_3_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_3_fu_499_p2),64));
    zext_ln18_4_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_4_fu_510_p2),64));
    zext_ln18_5_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_5_fu_558_p2),64));
    zext_ln18_6_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_6_fu_568_p2),64));
    zext_ln18_7_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_reg_665),6));
    zext_ln18_8_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_351_p3),5));
    zext_ln18_9_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_7_fu_406_p2),64));
    zext_ln18_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_fu_386_p2),64));
    zext_ln20_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_reg_772),64));
end behav;
