// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mm_mm_Pipeline_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        AB_buff_7_address0,
        AB_buff_7_ce0,
        AB_buff_7_we0,
        AB_buff_7_d0,
        AB_buff_6_address0,
        AB_buff_6_ce0,
        AB_buff_6_we0,
        AB_buff_6_d0,
        AB_buff_5_address0,
        AB_buff_5_ce0,
        AB_buff_5_we0,
        AB_buff_5_d0,
        AB_buff_4_address0,
        AB_buff_4_ce0,
        AB_buff_4_we0,
        AB_buff_4_d0,
        AB_buff_3_address0,
        AB_buff_3_ce0,
        AB_buff_3_we0,
        AB_buff_3_d0,
        AB_buff_2_address0,
        AB_buff_2_ce0,
        AB_buff_2_we0,
        AB_buff_2_d0,
        AB_buff_1_address0,
        AB_buff_1_ce0,
        AB_buff_1_we0,
        AB_buff_1_d0,
        AB_buff_address0,
        AB_buff_ce0,
        AB_buff_we0,
        AB_buff_d0,
        A_buff_address0,
        A_buff_ce0,
        A_buff_q0,
        B_buff_reload,
        A_buff_1_address0,
        A_buff_1_ce0,
        A_buff_1_q0,
        B_buff_8_reload,
        A_buff_2_address0,
        A_buff_2_ce0,
        A_buff_2_q0,
        B_buff_16_reload,
        A_buff_3_address0,
        A_buff_3_ce0,
        A_buff_3_q0,
        B_buff_24_reload,
        A_buff_4_address0,
        A_buff_4_ce0,
        A_buff_4_q0,
        B_buff_32_reload,
        A_buff_5_address0,
        A_buff_5_ce0,
        A_buff_5_q0,
        B_buff_40_reload,
        A_buff_6_address0,
        A_buff_6_ce0,
        A_buff_6_q0,
        B_buff_48_reload,
        A_buff_7_address0,
        A_buff_7_ce0,
        A_buff_7_q0,
        B_buff_56_reload,
        B_buff_1_reload,
        B_buff_9_reload,
        B_buff_17_reload,
        B_buff_25_reload,
        B_buff_33_reload,
        B_buff_41_reload,
        B_buff_49_reload,
        B_buff_57_reload,
        B_buff_2_reload,
        B_buff_10_reload,
        B_buff_18_reload,
        B_buff_26_reload,
        B_buff_34_reload,
        B_buff_42_reload,
        B_buff_50_reload,
        B_buff_58_reload,
        B_buff_3_reload,
        B_buff_11_reload,
        B_buff_19_reload,
        B_buff_27_reload,
        B_buff_35_reload,
        B_buff_43_reload,
        B_buff_51_reload,
        B_buff_59_reload,
        B_buff_4_reload,
        B_buff_12_reload,
        B_buff_20_reload,
        B_buff_28_reload,
        B_buff_36_reload,
        B_buff_44_reload,
        B_buff_52_reload,
        B_buff_60_reload,
        B_buff_5_reload,
        B_buff_13_reload,
        B_buff_21_reload,
        B_buff_29_reload,
        B_buff_37_reload,
        B_buff_45_reload,
        B_buff_53_reload,
        B_buff_61_reload,
        B_buff_6_reload,
        B_buff_14_reload,
        B_buff_22_reload,
        B_buff_30_reload,
        B_buff_38_reload,
        B_buff_46_reload,
        B_buff_54_reload,
        B_buff_62_reload,
        B_buff_7_reload,
        B_buff_15_reload,
        B_buff_23_reload,
        B_buff_31_reload,
        B_buff_39_reload,
        B_buff_47_reload,
        B_buff_55_reload,
        B_buff_63_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] AB_buff_7_address0;
output   AB_buff_7_ce0;
output   AB_buff_7_we0;
output  [31:0] AB_buff_7_d0;
output  [2:0] AB_buff_6_address0;
output   AB_buff_6_ce0;
output   AB_buff_6_we0;
output  [31:0] AB_buff_6_d0;
output  [2:0] AB_buff_5_address0;
output   AB_buff_5_ce0;
output   AB_buff_5_we0;
output  [31:0] AB_buff_5_d0;
output  [2:0] AB_buff_4_address0;
output   AB_buff_4_ce0;
output   AB_buff_4_we0;
output  [31:0] AB_buff_4_d0;
output  [2:0] AB_buff_3_address0;
output   AB_buff_3_ce0;
output   AB_buff_3_we0;
output  [31:0] AB_buff_3_d0;
output  [2:0] AB_buff_2_address0;
output   AB_buff_2_ce0;
output   AB_buff_2_we0;
output  [31:0] AB_buff_2_d0;
output  [2:0] AB_buff_1_address0;
output   AB_buff_1_ce0;
output   AB_buff_1_we0;
output  [31:0] AB_buff_1_d0;
output  [2:0] AB_buff_address0;
output   AB_buff_ce0;
output   AB_buff_we0;
output  [31:0] AB_buff_d0;
output  [2:0] A_buff_address0;
output   A_buff_ce0;
input  [31:0] A_buff_q0;
input  [31:0] B_buff_reload;
output  [2:0] A_buff_1_address0;
output   A_buff_1_ce0;
input  [31:0] A_buff_1_q0;
input  [31:0] B_buff_8_reload;
output  [2:0] A_buff_2_address0;
output   A_buff_2_ce0;
input  [31:0] A_buff_2_q0;
input  [31:0] B_buff_16_reload;
output  [2:0] A_buff_3_address0;
output   A_buff_3_ce0;
input  [31:0] A_buff_3_q0;
input  [31:0] B_buff_24_reload;
output  [2:0] A_buff_4_address0;
output   A_buff_4_ce0;
input  [31:0] A_buff_4_q0;
input  [31:0] B_buff_32_reload;
output  [2:0] A_buff_5_address0;
output   A_buff_5_ce0;
input  [31:0] A_buff_5_q0;
input  [31:0] B_buff_40_reload;
output  [2:0] A_buff_6_address0;
output   A_buff_6_ce0;
input  [31:0] A_buff_6_q0;
input  [31:0] B_buff_48_reload;
output  [2:0] A_buff_7_address0;
output   A_buff_7_ce0;
input  [31:0] A_buff_7_q0;
input  [31:0] B_buff_56_reload;
input  [31:0] B_buff_1_reload;
input  [31:0] B_buff_9_reload;
input  [31:0] B_buff_17_reload;
input  [31:0] B_buff_25_reload;
input  [31:0] B_buff_33_reload;
input  [31:0] B_buff_41_reload;
input  [31:0] B_buff_49_reload;
input  [31:0] B_buff_57_reload;
input  [31:0] B_buff_2_reload;
input  [31:0] B_buff_10_reload;
input  [31:0] B_buff_18_reload;
input  [31:0] B_buff_26_reload;
input  [31:0] B_buff_34_reload;
input  [31:0] B_buff_42_reload;
input  [31:0] B_buff_50_reload;
input  [31:0] B_buff_58_reload;
input  [31:0] B_buff_3_reload;
input  [31:0] B_buff_11_reload;
input  [31:0] B_buff_19_reload;
input  [31:0] B_buff_27_reload;
input  [31:0] B_buff_35_reload;
input  [31:0] B_buff_43_reload;
input  [31:0] B_buff_51_reload;
input  [31:0] B_buff_59_reload;
input  [31:0] B_buff_4_reload;
input  [31:0] B_buff_12_reload;
input  [31:0] B_buff_20_reload;
input  [31:0] B_buff_28_reload;
input  [31:0] B_buff_36_reload;
input  [31:0] B_buff_44_reload;
input  [31:0] B_buff_52_reload;
input  [31:0] B_buff_60_reload;
input  [31:0] B_buff_5_reload;
input  [31:0] B_buff_13_reload;
input  [31:0] B_buff_21_reload;
input  [31:0] B_buff_29_reload;
input  [31:0] B_buff_37_reload;
input  [31:0] B_buff_45_reload;
input  [31:0] B_buff_53_reload;
input  [31:0] B_buff_61_reload;
input  [31:0] B_buff_6_reload;
input  [31:0] B_buff_14_reload;
input  [31:0] B_buff_22_reload;
input  [31:0] B_buff_30_reload;
input  [31:0] B_buff_38_reload;
input  [31:0] B_buff_46_reload;
input  [31:0] B_buff_54_reload;
input  [31:0] B_buff_62_reload;
input  [31:0] B_buff_7_reload;
input  [31:0] B_buff_15_reload;
input  [31:0] B_buff_23_reload;
input  [31:0] B_buff_31_reload;
input  [31:0] B_buff_39_reload;
input  [31:0] B_buff_47_reload;
input  [31:0] B_buff_55_reload;
input  [31:0] B_buff_63_reload;

reg ap_idle;
reg AB_buff_7_ce0;
reg AB_buff_7_we0;
reg AB_buff_6_ce0;
reg AB_buff_6_we0;
reg AB_buff_5_ce0;
reg AB_buff_5_we0;
reg AB_buff_4_ce0;
reg AB_buff_4_we0;
reg AB_buff_3_ce0;
reg AB_buff_3_we0;
reg AB_buff_2_ce0;
reg AB_buff_2_we0;
reg AB_buff_1_ce0;
reg AB_buff_1_we0;
reg AB_buff_ce0;
reg AB_buff_we0;
reg A_buff_ce0;
reg A_buff_1_ce0;
reg A_buff_2_ce0;
reg A_buff_3_ce0;
reg A_buff_4_ce0;
reg A_buff_5_ce0;
reg A_buff_6_ce0;
reg A_buff_7_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln38_fu_792_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln38_reg_1780;
wire   [63:0] zext_ln38_fu_804_p1;
reg   [63:0] zext_ln38_reg_1784;
reg  signed [31:0] A_buff_load_reg_1836;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] A_buff_1_load_reg_1844;
reg  signed [31:0] A_buff_2_load_reg_1852;
reg  signed [31:0] A_buff_3_load_reg_1860;
reg  signed [31:0] A_buff_4_load_reg_1868;
reg  signed [31:0] A_buff_5_load_reg_1876;
reg  signed [31:0] A_buff_6_load_reg_1884;
reg  signed [31:0] A_buff_7_load_reg_1892;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [3:0] i_fu_188;
wire   [3:0] add_ln38_fu_798_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_1;
wire   [31:0] mul_ln44_fu_826_p2;
wire   [31:0] ABij_fu_821_p2;
wire   [31:0] mul_ln44_1_fu_831_p2;
wire   [31:0] mul_ln44_2_fu_836_p2;
wire   [31:0] add_ln44_1_fu_867_p2;
wire   [31:0] add_ln44_fu_861_p2;
wire   [31:0] mul_ln44_3_fu_841_p2;
wire   [31:0] mul_ln44_4_fu_846_p2;
wire   [31:0] mul_ln44_5_fu_851_p2;
wire   [31:0] mul_ln44_6_fu_856_p2;
wire   [31:0] add_ln44_4_fu_885_p2;
wire   [31:0] add_ln44_3_fu_879_p2;
wire   [31:0] add_ln44_5_fu_891_p2;
wire   [31:0] add_ln44_2_fu_873_p2;
wire   [31:0] mul_ln44_8_fu_909_p2;
wire   [31:0] ABij_2_fu_904_p2;
wire   [31:0] mul_ln44_9_fu_914_p2;
wire   [31:0] mul_ln44_10_fu_919_p2;
wire   [31:0] add_ln44_8_fu_950_p2;
wire   [31:0] add_ln44_7_fu_944_p2;
wire   [31:0] mul_ln44_11_fu_924_p2;
wire   [31:0] mul_ln44_12_fu_929_p2;
wire   [31:0] mul_ln44_13_fu_934_p2;
wire   [31:0] mul_ln44_14_fu_939_p2;
wire   [31:0] add_ln44_11_fu_968_p2;
wire   [31:0] add_ln44_10_fu_962_p2;
wire   [31:0] add_ln44_12_fu_974_p2;
wire   [31:0] add_ln44_9_fu_956_p2;
wire   [31:0] mul_ln44_16_fu_992_p2;
wire   [31:0] ABij_4_fu_987_p2;
wire   [31:0] mul_ln44_17_fu_997_p2;
wire   [31:0] mul_ln44_18_fu_1002_p2;
wire   [31:0] add_ln44_15_fu_1033_p2;
wire   [31:0] add_ln44_14_fu_1027_p2;
wire   [31:0] mul_ln44_19_fu_1007_p2;
wire   [31:0] mul_ln44_20_fu_1012_p2;
wire   [31:0] mul_ln44_21_fu_1017_p2;
wire   [31:0] mul_ln44_22_fu_1022_p2;
wire   [31:0] add_ln44_18_fu_1051_p2;
wire   [31:0] add_ln44_17_fu_1045_p2;
wire   [31:0] add_ln44_19_fu_1057_p2;
wire   [31:0] add_ln44_16_fu_1039_p2;
wire   [31:0] mul_ln44_24_fu_1075_p2;
wire   [31:0] ABij_6_fu_1070_p2;
wire   [31:0] mul_ln44_25_fu_1080_p2;
wire   [31:0] mul_ln44_26_fu_1085_p2;
wire   [31:0] add_ln44_22_fu_1116_p2;
wire   [31:0] add_ln44_21_fu_1110_p2;
wire   [31:0] mul_ln44_27_fu_1090_p2;
wire   [31:0] mul_ln44_28_fu_1095_p2;
wire   [31:0] mul_ln44_29_fu_1100_p2;
wire   [31:0] mul_ln44_30_fu_1105_p2;
wire   [31:0] add_ln44_25_fu_1134_p2;
wire   [31:0] add_ln44_24_fu_1128_p2;
wire   [31:0] add_ln44_26_fu_1140_p2;
wire   [31:0] add_ln44_23_fu_1122_p2;
wire   [31:0] mul_ln44_32_fu_1157_p2;
wire   [31:0] ABij_8_fu_1153_p2;
wire   [31:0] mul_ln44_33_fu_1161_p2;
wire   [31:0] mul_ln44_34_fu_1165_p2;
wire   [31:0] add_ln44_29_fu_1191_p2;
wire   [31:0] add_ln44_28_fu_1185_p2;
wire   [31:0] mul_ln44_35_fu_1169_p2;
wire   [31:0] mul_ln44_36_fu_1173_p2;
wire   [31:0] mul_ln44_37_fu_1177_p2;
wire   [31:0] mul_ln44_38_fu_1181_p2;
wire   [31:0] add_ln44_32_fu_1209_p2;
wire   [31:0] add_ln44_31_fu_1203_p2;
wire   [31:0] add_ln44_33_fu_1215_p2;
wire   [31:0] add_ln44_30_fu_1197_p2;
wire   [31:0] mul_ln44_40_fu_1232_p2;
wire   [31:0] ABij_10_fu_1228_p2;
wire   [31:0] mul_ln44_41_fu_1236_p2;
wire   [31:0] mul_ln44_42_fu_1240_p2;
wire   [31:0] add_ln44_36_fu_1266_p2;
wire   [31:0] add_ln44_35_fu_1260_p2;
wire   [31:0] mul_ln44_43_fu_1244_p2;
wire   [31:0] mul_ln44_44_fu_1248_p2;
wire   [31:0] mul_ln44_45_fu_1252_p2;
wire   [31:0] mul_ln44_46_fu_1256_p2;
wire   [31:0] add_ln44_39_fu_1284_p2;
wire   [31:0] add_ln44_38_fu_1278_p2;
wire   [31:0] add_ln44_40_fu_1290_p2;
wire   [31:0] add_ln44_37_fu_1272_p2;
wire   [31:0] mul_ln44_48_fu_1307_p2;
wire   [31:0] ABij_12_fu_1303_p2;
wire   [31:0] mul_ln44_49_fu_1311_p2;
wire   [31:0] mul_ln44_50_fu_1315_p2;
wire   [31:0] add_ln44_43_fu_1341_p2;
wire   [31:0] add_ln44_42_fu_1335_p2;
wire   [31:0] mul_ln44_51_fu_1319_p2;
wire   [31:0] mul_ln44_52_fu_1323_p2;
wire   [31:0] mul_ln44_53_fu_1327_p2;
wire   [31:0] mul_ln44_54_fu_1331_p2;
wire   [31:0] add_ln44_46_fu_1359_p2;
wire   [31:0] add_ln44_45_fu_1353_p2;
wire   [31:0] add_ln44_47_fu_1365_p2;
wire   [31:0] add_ln44_44_fu_1347_p2;
wire   [31:0] mul_ln44_56_fu_1382_p2;
wire   [31:0] ABij_14_fu_1378_p2;
wire   [31:0] mul_ln44_57_fu_1386_p2;
wire   [31:0] mul_ln44_58_fu_1390_p2;
wire   [31:0] add_ln44_50_fu_1416_p2;
wire   [31:0] add_ln44_49_fu_1410_p2;
wire   [31:0] mul_ln44_59_fu_1394_p2;
wire   [31:0] mul_ln44_60_fu_1398_p2;
wire   [31:0] mul_ln44_61_fu_1402_p2;
wire   [31:0] mul_ln44_62_fu_1406_p2;
wire   [31:0] add_ln44_53_fu_1434_p2;
wire   [31:0] add_ln44_52_fu_1428_p2;
wire   [31:0] add_ln44_54_fu_1440_p2;
wire   [31:0] add_ln44_51_fu_1422_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U77(
    .din0(A_buff_q0),
    .din1(B_buff_reload),
    .dout(ABij_fu_821_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U78(
    .din0(A_buff_1_q0),
    .din1(B_buff_8_reload),
    .dout(mul_ln44_fu_826_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U79(
    .din0(A_buff_2_q0),
    .din1(B_buff_16_reload),
    .dout(mul_ln44_1_fu_831_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U80(
    .din0(A_buff_3_q0),
    .din1(B_buff_24_reload),
    .dout(mul_ln44_2_fu_836_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U81(
    .din0(A_buff_4_q0),
    .din1(B_buff_32_reload),
    .dout(mul_ln44_3_fu_841_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U82(
    .din0(A_buff_5_q0),
    .din1(B_buff_40_reload),
    .dout(mul_ln44_4_fu_846_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U83(
    .din0(A_buff_6_q0),
    .din1(B_buff_48_reload),
    .dout(mul_ln44_5_fu_851_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U84(
    .din0(A_buff_7_q0),
    .din1(B_buff_56_reload),
    .dout(mul_ln44_6_fu_856_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U85(
    .din0(A_buff_q0),
    .din1(B_buff_1_reload),
    .dout(ABij_2_fu_904_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U86(
    .din0(A_buff_1_q0),
    .din1(B_buff_9_reload),
    .dout(mul_ln44_8_fu_909_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U87(
    .din0(A_buff_2_q0),
    .din1(B_buff_17_reload),
    .dout(mul_ln44_9_fu_914_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U88(
    .din0(A_buff_3_q0),
    .din1(B_buff_25_reload),
    .dout(mul_ln44_10_fu_919_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U89(
    .din0(A_buff_4_q0),
    .din1(B_buff_33_reload),
    .dout(mul_ln44_11_fu_924_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U90(
    .din0(A_buff_5_q0),
    .din1(B_buff_41_reload),
    .dout(mul_ln44_12_fu_929_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U91(
    .din0(A_buff_6_q0),
    .din1(B_buff_49_reload),
    .dout(mul_ln44_13_fu_934_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U92(
    .din0(A_buff_7_q0),
    .din1(B_buff_57_reload),
    .dout(mul_ln44_14_fu_939_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U93(
    .din0(A_buff_q0),
    .din1(B_buff_2_reload),
    .dout(ABij_4_fu_987_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U94(
    .din0(A_buff_1_q0),
    .din1(B_buff_10_reload),
    .dout(mul_ln44_16_fu_992_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U95(
    .din0(A_buff_2_q0),
    .din1(B_buff_18_reload),
    .dout(mul_ln44_17_fu_997_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U96(
    .din0(A_buff_3_q0),
    .din1(B_buff_26_reload),
    .dout(mul_ln44_18_fu_1002_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U97(
    .din0(A_buff_4_q0),
    .din1(B_buff_34_reload),
    .dout(mul_ln44_19_fu_1007_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U98(
    .din0(A_buff_5_q0),
    .din1(B_buff_42_reload),
    .dout(mul_ln44_20_fu_1012_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U99(
    .din0(A_buff_6_q0),
    .din1(B_buff_50_reload),
    .dout(mul_ln44_21_fu_1017_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U100(
    .din0(A_buff_7_q0),
    .din1(B_buff_58_reload),
    .dout(mul_ln44_22_fu_1022_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U101(
    .din0(A_buff_q0),
    .din1(B_buff_3_reload),
    .dout(ABij_6_fu_1070_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U102(
    .din0(A_buff_1_q0),
    .din1(B_buff_11_reload),
    .dout(mul_ln44_24_fu_1075_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U103(
    .din0(A_buff_2_q0),
    .din1(B_buff_19_reload),
    .dout(mul_ln44_25_fu_1080_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U104(
    .din0(A_buff_3_q0),
    .din1(B_buff_27_reload),
    .dout(mul_ln44_26_fu_1085_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U105(
    .din0(A_buff_4_q0),
    .din1(B_buff_35_reload),
    .dout(mul_ln44_27_fu_1090_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U106(
    .din0(A_buff_5_q0),
    .din1(B_buff_43_reload),
    .dout(mul_ln44_28_fu_1095_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U107(
    .din0(A_buff_6_q0),
    .din1(B_buff_51_reload),
    .dout(mul_ln44_29_fu_1100_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U108(
    .din0(A_buff_7_q0),
    .din1(B_buff_59_reload),
    .dout(mul_ln44_30_fu_1105_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U109(
    .din0(A_buff_load_reg_1836),
    .din1(B_buff_4_reload),
    .dout(ABij_8_fu_1153_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U110(
    .din0(A_buff_1_load_reg_1844),
    .din1(B_buff_12_reload),
    .dout(mul_ln44_32_fu_1157_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U111(
    .din0(A_buff_2_load_reg_1852),
    .din1(B_buff_20_reload),
    .dout(mul_ln44_33_fu_1161_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U112(
    .din0(A_buff_3_load_reg_1860),
    .din1(B_buff_28_reload),
    .dout(mul_ln44_34_fu_1165_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U113(
    .din0(A_buff_4_load_reg_1868),
    .din1(B_buff_36_reload),
    .dout(mul_ln44_35_fu_1169_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U114(
    .din0(A_buff_5_load_reg_1876),
    .din1(B_buff_44_reload),
    .dout(mul_ln44_36_fu_1173_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U115(
    .din0(A_buff_6_load_reg_1884),
    .din1(B_buff_52_reload),
    .dout(mul_ln44_37_fu_1177_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U116(
    .din0(A_buff_7_load_reg_1892),
    .din1(B_buff_60_reload),
    .dout(mul_ln44_38_fu_1181_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U117(
    .din0(A_buff_load_reg_1836),
    .din1(B_buff_5_reload),
    .dout(ABij_10_fu_1228_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U118(
    .din0(A_buff_1_load_reg_1844),
    .din1(B_buff_13_reload),
    .dout(mul_ln44_40_fu_1232_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U119(
    .din0(A_buff_2_load_reg_1852),
    .din1(B_buff_21_reload),
    .dout(mul_ln44_41_fu_1236_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U120(
    .din0(A_buff_3_load_reg_1860),
    .din1(B_buff_29_reload),
    .dout(mul_ln44_42_fu_1240_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U121(
    .din0(A_buff_4_load_reg_1868),
    .din1(B_buff_37_reload),
    .dout(mul_ln44_43_fu_1244_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U122(
    .din0(A_buff_5_load_reg_1876),
    .din1(B_buff_45_reload),
    .dout(mul_ln44_44_fu_1248_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U123(
    .din0(A_buff_6_load_reg_1884),
    .din1(B_buff_53_reload),
    .dout(mul_ln44_45_fu_1252_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U124(
    .din0(A_buff_7_load_reg_1892),
    .din1(B_buff_61_reload),
    .dout(mul_ln44_46_fu_1256_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U125(
    .din0(A_buff_load_reg_1836),
    .din1(B_buff_6_reload),
    .dout(ABij_12_fu_1303_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U126(
    .din0(A_buff_1_load_reg_1844),
    .din1(B_buff_14_reload),
    .dout(mul_ln44_48_fu_1307_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U127(
    .din0(A_buff_2_load_reg_1852),
    .din1(B_buff_22_reload),
    .dout(mul_ln44_49_fu_1311_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U128(
    .din0(A_buff_3_load_reg_1860),
    .din1(B_buff_30_reload),
    .dout(mul_ln44_50_fu_1315_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U129(
    .din0(A_buff_4_load_reg_1868),
    .din1(B_buff_38_reload),
    .dout(mul_ln44_51_fu_1319_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U130(
    .din0(A_buff_5_load_reg_1876),
    .din1(B_buff_46_reload),
    .dout(mul_ln44_52_fu_1323_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U131(
    .din0(A_buff_6_load_reg_1884),
    .din1(B_buff_54_reload),
    .dout(mul_ln44_53_fu_1327_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U132(
    .din0(A_buff_7_load_reg_1892),
    .din1(B_buff_62_reload),
    .dout(mul_ln44_54_fu_1331_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U133(
    .din0(A_buff_load_reg_1836),
    .din1(B_buff_7_reload),
    .dout(ABij_14_fu_1378_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U134(
    .din0(A_buff_1_load_reg_1844),
    .din1(B_buff_15_reload),
    .dout(mul_ln44_56_fu_1382_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U135(
    .din0(A_buff_2_load_reg_1852),
    .din1(B_buff_23_reload),
    .dout(mul_ln44_57_fu_1386_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U136(
    .din0(A_buff_3_load_reg_1860),
    .din1(B_buff_31_reload),
    .dout(mul_ln44_58_fu_1390_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U137(
    .din0(A_buff_4_load_reg_1868),
    .din1(B_buff_39_reload),
    .dout(mul_ln44_59_fu_1394_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U138(
    .din0(A_buff_5_load_reg_1876),
    .din1(B_buff_47_reload),
    .dout(mul_ln44_60_fu_1398_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U139(
    .din0(A_buff_6_load_reg_1884),
    .din1(B_buff_55_reload),
    .dout(mul_ln44_61_fu_1402_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U140(
    .din0(A_buff_7_load_reg_1892),
    .din1(B_buff_63_reload),
    .dout(mul_ln44_62_fu_1406_p2)
);

mm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln38_fu_792_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_188 <= add_ln38_fu_798_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_188 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1780 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_buff_1_load_reg_1844 <= A_buff_1_q0;
        A_buff_2_load_reg_1852 <= A_buff_2_q0;
        A_buff_3_load_reg_1860 <= A_buff_3_q0;
        A_buff_4_load_reg_1868 <= A_buff_4_q0;
        A_buff_5_load_reg_1876 <= A_buff_5_q0;
        A_buff_6_load_reg_1884 <= A_buff_6_q0;
        A_buff_7_load_reg_1892 <= A_buff_7_q0;
        A_buff_load_reg_1836 <= A_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln38_reg_1780 <= icmp_ln38_fu_792_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_792_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln38_reg_1784[3 : 0] <= zext_ln38_fu_804_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_1_ce0 = 1'b1;
    end else begin
        AB_buff_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1780 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_1_we0 = 1'b1;
    end else begin
        AB_buff_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_2_ce0 = 1'b1;
    end else begin
        AB_buff_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1780 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_2_we0 = 1'b1;
    end else begin
        AB_buff_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_3_ce0 = 1'b1;
    end else begin
        AB_buff_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1780 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_3_we0 = 1'b1;
    end else begin
        AB_buff_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_4_ce0 = 1'b1;
    end else begin
        AB_buff_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_4_we0 = 1'b1;
    end else begin
        AB_buff_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_5_ce0 = 1'b1;
    end else begin
        AB_buff_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_5_we0 = 1'b1;
    end else begin
        AB_buff_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_6_ce0 = 1'b1;
    end else begin
        AB_buff_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_6_we0 = 1'b1;
    end else begin
        AB_buff_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_7_ce0 = 1'b1;
    end else begin
        AB_buff_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_buff_7_we0 = 1'b1;
    end else begin
        AB_buff_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_ce0 = 1'b1;
    end else begin
        AB_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1780 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_buff_we0 = 1'b1;
    end else begin
        AB_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_1_ce0 = 1'b1;
    end else begin
        A_buff_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_2_ce0 = 1'b1;
    end else begin
        A_buff_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_3_ce0 = 1'b1;
    end else begin
        A_buff_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_4_ce0 = 1'b1;
    end else begin
        A_buff_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_5_ce0 = 1'b1;
    end else begin
        A_buff_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_6_ce0 = 1'b1;
    end else begin
        A_buff_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_7_ce0 = 1'b1;
    end else begin
        A_buff_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_buff_ce0 = 1'b1;
    end else begin
        A_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_792_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_188;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_buff_1_address0 = zext_ln38_reg_1784;

assign AB_buff_1_d0 = (add_ln44_12_fu_974_p2 + add_ln44_9_fu_956_p2);

assign AB_buff_2_address0 = zext_ln38_reg_1784;

assign AB_buff_2_d0 = (add_ln44_19_fu_1057_p2 + add_ln44_16_fu_1039_p2);

assign AB_buff_3_address0 = zext_ln38_reg_1784;

assign AB_buff_3_d0 = (add_ln44_26_fu_1140_p2 + add_ln44_23_fu_1122_p2);

assign AB_buff_4_address0 = zext_ln38_reg_1784;

assign AB_buff_4_d0 = (add_ln44_33_fu_1215_p2 + add_ln44_30_fu_1197_p2);

assign AB_buff_5_address0 = zext_ln38_reg_1784;

assign AB_buff_5_d0 = (add_ln44_40_fu_1290_p2 + add_ln44_37_fu_1272_p2);

assign AB_buff_6_address0 = zext_ln38_reg_1784;

assign AB_buff_6_d0 = (add_ln44_47_fu_1365_p2 + add_ln44_44_fu_1347_p2);

assign AB_buff_7_address0 = zext_ln38_reg_1784;

assign AB_buff_7_d0 = (add_ln44_54_fu_1440_p2 + add_ln44_51_fu_1422_p2);

assign AB_buff_address0 = zext_ln38_reg_1784;

assign AB_buff_d0 = (add_ln44_5_fu_891_p2 + add_ln44_2_fu_873_p2);

assign A_buff_1_address0 = zext_ln38_fu_804_p1;

assign A_buff_2_address0 = zext_ln38_fu_804_p1;

assign A_buff_3_address0 = zext_ln38_fu_804_p1;

assign A_buff_4_address0 = zext_ln38_fu_804_p1;

assign A_buff_5_address0 = zext_ln38_fu_804_p1;

assign A_buff_6_address0 = zext_ln38_fu_804_p1;

assign A_buff_7_address0 = zext_ln38_fu_804_p1;

assign A_buff_address0 = zext_ln38_fu_804_p1;

assign add_ln38_fu_798_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign add_ln44_10_fu_962_p2 = (mul_ln44_11_fu_924_p2 + mul_ln44_12_fu_929_p2);

assign add_ln44_11_fu_968_p2 = (mul_ln44_13_fu_934_p2 + mul_ln44_14_fu_939_p2);

assign add_ln44_12_fu_974_p2 = (add_ln44_11_fu_968_p2 + add_ln44_10_fu_962_p2);

assign add_ln44_14_fu_1027_p2 = (mul_ln44_16_fu_992_p2 + ABij_4_fu_987_p2);

assign add_ln44_15_fu_1033_p2 = (mul_ln44_17_fu_997_p2 + mul_ln44_18_fu_1002_p2);

assign add_ln44_16_fu_1039_p2 = (add_ln44_15_fu_1033_p2 + add_ln44_14_fu_1027_p2);

assign add_ln44_17_fu_1045_p2 = (mul_ln44_19_fu_1007_p2 + mul_ln44_20_fu_1012_p2);

assign add_ln44_18_fu_1051_p2 = (mul_ln44_21_fu_1017_p2 + mul_ln44_22_fu_1022_p2);

assign add_ln44_19_fu_1057_p2 = (add_ln44_18_fu_1051_p2 + add_ln44_17_fu_1045_p2);

assign add_ln44_1_fu_867_p2 = (mul_ln44_1_fu_831_p2 + mul_ln44_2_fu_836_p2);

assign add_ln44_21_fu_1110_p2 = (mul_ln44_24_fu_1075_p2 + ABij_6_fu_1070_p2);

assign add_ln44_22_fu_1116_p2 = (mul_ln44_25_fu_1080_p2 + mul_ln44_26_fu_1085_p2);

assign add_ln44_23_fu_1122_p2 = (add_ln44_22_fu_1116_p2 + add_ln44_21_fu_1110_p2);

assign add_ln44_24_fu_1128_p2 = (mul_ln44_27_fu_1090_p2 + mul_ln44_28_fu_1095_p2);

assign add_ln44_25_fu_1134_p2 = (mul_ln44_29_fu_1100_p2 + mul_ln44_30_fu_1105_p2);

assign add_ln44_26_fu_1140_p2 = (add_ln44_25_fu_1134_p2 + add_ln44_24_fu_1128_p2);

assign add_ln44_28_fu_1185_p2 = (mul_ln44_32_fu_1157_p2 + ABij_8_fu_1153_p2);

assign add_ln44_29_fu_1191_p2 = (mul_ln44_33_fu_1161_p2 + mul_ln44_34_fu_1165_p2);

assign add_ln44_2_fu_873_p2 = (add_ln44_1_fu_867_p2 + add_ln44_fu_861_p2);

assign add_ln44_30_fu_1197_p2 = (add_ln44_29_fu_1191_p2 + add_ln44_28_fu_1185_p2);

assign add_ln44_31_fu_1203_p2 = (mul_ln44_35_fu_1169_p2 + mul_ln44_36_fu_1173_p2);

assign add_ln44_32_fu_1209_p2 = (mul_ln44_37_fu_1177_p2 + mul_ln44_38_fu_1181_p2);

assign add_ln44_33_fu_1215_p2 = (add_ln44_32_fu_1209_p2 + add_ln44_31_fu_1203_p2);

assign add_ln44_35_fu_1260_p2 = (mul_ln44_40_fu_1232_p2 + ABij_10_fu_1228_p2);

assign add_ln44_36_fu_1266_p2 = (mul_ln44_41_fu_1236_p2 + mul_ln44_42_fu_1240_p2);

assign add_ln44_37_fu_1272_p2 = (add_ln44_36_fu_1266_p2 + add_ln44_35_fu_1260_p2);

assign add_ln44_38_fu_1278_p2 = (mul_ln44_43_fu_1244_p2 + mul_ln44_44_fu_1248_p2);

assign add_ln44_39_fu_1284_p2 = (mul_ln44_45_fu_1252_p2 + mul_ln44_46_fu_1256_p2);

assign add_ln44_3_fu_879_p2 = (mul_ln44_3_fu_841_p2 + mul_ln44_4_fu_846_p2);

assign add_ln44_40_fu_1290_p2 = (add_ln44_39_fu_1284_p2 + add_ln44_38_fu_1278_p2);

assign add_ln44_42_fu_1335_p2 = (mul_ln44_48_fu_1307_p2 + ABij_12_fu_1303_p2);

assign add_ln44_43_fu_1341_p2 = (mul_ln44_49_fu_1311_p2 + mul_ln44_50_fu_1315_p2);

assign add_ln44_44_fu_1347_p2 = (add_ln44_43_fu_1341_p2 + add_ln44_42_fu_1335_p2);

assign add_ln44_45_fu_1353_p2 = (mul_ln44_51_fu_1319_p2 + mul_ln44_52_fu_1323_p2);

assign add_ln44_46_fu_1359_p2 = (mul_ln44_53_fu_1327_p2 + mul_ln44_54_fu_1331_p2);

assign add_ln44_47_fu_1365_p2 = (add_ln44_46_fu_1359_p2 + add_ln44_45_fu_1353_p2);

assign add_ln44_49_fu_1410_p2 = (mul_ln44_56_fu_1382_p2 + ABij_14_fu_1378_p2);

assign add_ln44_4_fu_885_p2 = (mul_ln44_5_fu_851_p2 + mul_ln44_6_fu_856_p2);

assign add_ln44_50_fu_1416_p2 = (mul_ln44_57_fu_1386_p2 + mul_ln44_58_fu_1390_p2);

assign add_ln44_51_fu_1422_p2 = (add_ln44_50_fu_1416_p2 + add_ln44_49_fu_1410_p2);

assign add_ln44_52_fu_1428_p2 = (mul_ln44_59_fu_1394_p2 + mul_ln44_60_fu_1398_p2);

assign add_ln44_53_fu_1434_p2 = (mul_ln44_61_fu_1402_p2 + mul_ln44_62_fu_1406_p2);

assign add_ln44_54_fu_1440_p2 = (add_ln44_53_fu_1434_p2 + add_ln44_52_fu_1428_p2);

assign add_ln44_5_fu_891_p2 = (add_ln44_4_fu_885_p2 + add_ln44_3_fu_879_p2);

assign add_ln44_7_fu_944_p2 = (mul_ln44_8_fu_909_p2 + ABij_2_fu_904_p2);

assign add_ln44_8_fu_950_p2 = (mul_ln44_9_fu_914_p2 + mul_ln44_10_fu_919_p2);

assign add_ln44_9_fu_956_p2 = (add_ln44_8_fu_950_p2 + add_ln44_7_fu_944_p2);

assign add_ln44_fu_861_p2 = (mul_ln44_fu_826_p2 + ABij_fu_821_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln38_fu_792_p2 = ((ap_sig_allocacmp_i_1 == 4'd8) ? 1'b1 : 1'b0);

assign zext_ln38_fu_804_p1 = ap_sig_allocacmp_i_1;

always @ (posedge ap_clk) begin
    zext_ln38_reg_1784[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //mm_mm_Pipeline_row
