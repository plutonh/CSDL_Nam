-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm_gemm_Pipeline_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_c_port_AWVALID : OUT STD_LOGIC;
    m_axi_c_port_AWREADY : IN STD_LOGIC;
    m_axi_c_port_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_c_port_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_c_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_port_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_WVALID : OUT STD_LOGIC;
    m_axi_c_port_WREADY : IN STD_LOGIC;
    m_axi_c_port_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_c_port_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_port_WLAST : OUT STD_LOGIC;
    m_axi_c_port_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_ARVALID : OUT STD_LOGIC;
    m_axi_c_port_ARREADY : IN STD_LOGIC;
    m_axi_c_port_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_c_port_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_c_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_port_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_RVALID : IN STD_LOGIC;
    m_axi_c_port_RREADY : OUT STD_LOGIC;
    m_axi_c_port_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_c_port_RLAST : IN STD_LOGIC;
    m_axi_c_port_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_c_port_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_port_BVALID : IN STD_LOGIC;
    m_axi_c_port_BREADY : OUT STD_LOGIC;
    m_axi_c_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_port_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_port_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln62 : IN STD_LOGIC_VECTOR (61 downto 0);
    p_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_12254_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_22755_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_33256_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_43757_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_54258_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_64759_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_75260_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_161_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_162_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_263_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_364_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_465_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_566_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_667_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_768_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_269_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_170_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_271_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_372_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_473_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_574_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_675_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_776_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_377_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_178_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_279_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_380_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_481_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_582_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_683_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_784_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_485_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_4_186_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_4_287_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_4_388_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_4_489_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_4_590_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_4_691_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_4_792_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_593_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_5_194_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_5_295_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_5_396_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_5_497_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_5_598_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_5_699_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_5_7100_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6101_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6_1102_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6_2103_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6_3104_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6_4105_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6_5106_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6_6107_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_6_7108_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7109_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7_1110_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7_2111_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7_3112_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7_4113_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7_5114_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7_6115_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_7_7116_reload : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gemm_gemm_Pipeline_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond5_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal c_port_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_6_fu_806_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal loop_index_fu_184 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_23_fu_610_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_loop_index_load : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_24_fu_626_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_630_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_652_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_674_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_696_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_718_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_740_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_762_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_784_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_806_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gemm_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_83_32_1_1_U341 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => p_reload,
        din1 => add_12254_reload,
        din2 => add_22755_reload,
        din3 => add_33256_reload,
        din4 => add_43757_reload,
        din5 => add_54258_reload,
        din6 => add_64759_reload,
        din7 => add_75260_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_8_fu_630_p10);

    mux_83_32_1_1_U342 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => add_161_reload,
        din1 => add_1_162_reload,
        din2 => add_1_263_reload,
        din3 => add_1_364_reload,
        din4 => add_1_465_reload,
        din5 => add_1_566_reload,
        din6 => add_1_667_reload,
        din7 => add_1_768_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_9_fu_652_p10);

    mux_83_32_1_1_U343 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => add_269_reload,
        din1 => add_2_170_reload,
        din2 => add_2_271_reload,
        din3 => add_2_372_reload,
        din4 => add_2_473_reload,
        din5 => add_2_574_reload,
        din6 => add_2_675_reload,
        din7 => add_2_776_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_s_fu_674_p10);

    mux_83_32_1_1_U344 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => add_377_reload,
        din1 => add_3_178_reload,
        din2 => add_3_279_reload,
        din3 => add_3_380_reload,
        din4 => add_3_481_reload,
        din5 => add_3_582_reload,
        din6 => add_3_683_reload,
        din7 => add_3_784_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_1_fu_696_p10);

    mux_83_32_1_1_U345 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => add_485_reload,
        din1 => add_4_186_reload,
        din2 => add_4_287_reload,
        din3 => add_4_388_reload,
        din4 => add_4_489_reload,
        din5 => add_4_590_reload,
        din6 => add_4_691_reload,
        din7 => add_4_792_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_2_fu_718_p10);

    mux_83_32_1_1_U346 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => add_593_reload,
        din1 => add_5_194_reload,
        din2 => add_5_295_reload,
        din3 => add_5_396_reload,
        din4 => add_5_497_reload,
        din5 => add_5_598_reload,
        din6 => add_5_699_reload,
        din7 => add_5_7100_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_3_fu_740_p10);

    mux_83_32_1_1_U347 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => add_6101_reload,
        din1 => add_6_1102_reload,
        din2 => add_6_2103_reload,
        din3 => add_6_3104_reload,
        din4 => add_6_4105_reload,
        din5 => add_6_5106_reload,
        din6 => add_6_6107_reload,
        din7 => add_6_7108_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_4_fu_762_p10);

    mux_83_32_1_1_U348 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => add_7109_reload,
        din1 => add_7_1110_reload,
        din2 => add_7_2111_reload,
        din3 => add_7_3112_reload,
        din4 => add_7_4113_reload,
        din5 => add_7_5114_reload,
        din6 => add_7_6115_reload,
        din7 => add_7_7116_reload,
        din8 => empty_24_fu_626_p1,
        dout => tmp_5_fu_784_p10);

    mux_83_32_1_1_U349 : component gemm_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_8_fu_630_p10,
        din1 => tmp_9_fu_652_p10,
        din2 => tmp_s_fu_674_p10,
        din3 => tmp_1_fu_696_p10,
        din4 => tmp_2_fu_718_p10,
        din5 => tmp_3_fu_740_p10,
        din6 => tmp_4_fu_762_p10,
        din7 => tmp_5_fu_784_p10,
        din8 => tmp_6_fu_806_p9,
        dout => tmp_6_fu_806_p10);

    flow_control_loop_pipe_sequential_init_U : component gemm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    loop_index_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond5_fu_604_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    loop_index_fu_184 <= empty_23_fu_610_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index_fu_184 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_604_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_reg_852 <= tmp_6_fu_806_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_c_port_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_c_port_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_c_port_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_c_port_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, exitcond5_fu_604_p2)
    begin
        if (((exitcond5_fu_604_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_loop_index_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, loop_index_fu_184, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_loop_index_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_loop_index_load <= loop_index_fu_184;
        end if; 
    end process;


    c_port_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_c_port_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_port_blk_n_W <= m_axi_c_port_WREADY;
        else 
            c_port_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_23_fu_610_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_loop_index_load) + unsigned(ap_const_lv7_1));
    empty_24_fu_626_p1 <= ap_sig_allocacmp_loop_index_load(3 - 1 downto 0);
    exitcond5_fu_604_p2 <= "1" when (ap_sig_allocacmp_loop_index_load = ap_const_lv7_40) else "0";
    m_axi_c_port_ARADDR <= ap_const_lv64_0;
    m_axi_c_port_ARBURST <= ap_const_lv2_0;
    m_axi_c_port_ARCACHE <= ap_const_lv4_0;
    m_axi_c_port_ARID <= ap_const_lv1_0;
    m_axi_c_port_ARLEN <= ap_const_lv32_0;
    m_axi_c_port_ARLOCK <= ap_const_lv2_0;
    m_axi_c_port_ARPROT <= ap_const_lv3_0;
    m_axi_c_port_ARQOS <= ap_const_lv4_0;
    m_axi_c_port_ARREGION <= ap_const_lv4_0;
    m_axi_c_port_ARSIZE <= ap_const_lv3_0;
    m_axi_c_port_ARUSER <= ap_const_lv1_0;
    m_axi_c_port_ARVALID <= ap_const_logic_0;
    m_axi_c_port_AWADDR <= ap_const_lv64_0;
    m_axi_c_port_AWBURST <= ap_const_lv2_0;
    m_axi_c_port_AWCACHE <= ap_const_lv4_0;
    m_axi_c_port_AWID <= ap_const_lv1_0;
    m_axi_c_port_AWLEN <= ap_const_lv32_0;
    m_axi_c_port_AWLOCK <= ap_const_lv2_0;
    m_axi_c_port_AWPROT <= ap_const_lv3_0;
    m_axi_c_port_AWQOS <= ap_const_lv4_0;
    m_axi_c_port_AWREGION <= ap_const_lv4_0;
    m_axi_c_port_AWSIZE <= ap_const_lv3_0;
    m_axi_c_port_AWUSER <= ap_const_lv1_0;
    m_axi_c_port_AWVALID <= ap_const_logic_0;
    m_axi_c_port_BREADY <= ap_const_logic_0;
    m_axi_c_port_RREADY <= ap_const_logic_0;
    m_axi_c_port_WDATA <= tmp_6_reg_852;
    m_axi_c_port_WID <= ap_const_lv1_0;
    m_axi_c_port_WLAST <= ap_const_logic_0;
    m_axi_c_port_WSTRB <= ap_const_lv4_F;
    m_axi_c_port_WUSER <= ap_const_lv1_0;

    m_axi_c_port_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_c_port_WVALID <= ap_const_logic_1;
        else 
            m_axi_c_port_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_fu_806_p9 <= ap_sig_allocacmp_loop_index_load(5 downto 3);
end behav;
