// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gemm_gemm_Pipeline_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_c_port_AWVALID,
        m_axi_c_port_AWREADY,
        m_axi_c_port_AWADDR,
        m_axi_c_port_AWID,
        m_axi_c_port_AWLEN,
        m_axi_c_port_AWSIZE,
        m_axi_c_port_AWBURST,
        m_axi_c_port_AWLOCK,
        m_axi_c_port_AWCACHE,
        m_axi_c_port_AWPROT,
        m_axi_c_port_AWQOS,
        m_axi_c_port_AWREGION,
        m_axi_c_port_AWUSER,
        m_axi_c_port_WVALID,
        m_axi_c_port_WREADY,
        m_axi_c_port_WDATA,
        m_axi_c_port_WSTRB,
        m_axi_c_port_WLAST,
        m_axi_c_port_WID,
        m_axi_c_port_WUSER,
        m_axi_c_port_ARVALID,
        m_axi_c_port_ARREADY,
        m_axi_c_port_ARADDR,
        m_axi_c_port_ARID,
        m_axi_c_port_ARLEN,
        m_axi_c_port_ARSIZE,
        m_axi_c_port_ARBURST,
        m_axi_c_port_ARLOCK,
        m_axi_c_port_ARCACHE,
        m_axi_c_port_ARPROT,
        m_axi_c_port_ARQOS,
        m_axi_c_port_ARREGION,
        m_axi_c_port_ARUSER,
        m_axi_c_port_RVALID,
        m_axi_c_port_RREADY,
        m_axi_c_port_RDATA,
        m_axi_c_port_RLAST,
        m_axi_c_port_RID,
        m_axi_c_port_RFIFONUM,
        m_axi_c_port_RUSER,
        m_axi_c_port_RRESP,
        m_axi_c_port_BVALID,
        m_axi_c_port_BREADY,
        m_axi_c_port_BRESP,
        m_axi_c_port_BID,
        m_axi_c_port_BUSER,
        sext_ln62,
        p_reload,
        add_12254_reload,
        add_22755_reload,
        add_33256_reload,
        add_43757_reload,
        add_54258_reload,
        add_64759_reload,
        add_75260_reload,
        add_161_reload,
        add_1_162_reload,
        add_1_263_reload,
        add_1_364_reload,
        add_1_465_reload,
        add_1_566_reload,
        add_1_667_reload,
        add_1_768_reload,
        add_269_reload,
        add_2_170_reload,
        add_2_271_reload,
        add_2_372_reload,
        add_2_473_reload,
        add_2_574_reload,
        add_2_675_reload,
        add_2_776_reload,
        add_377_reload,
        add_3_178_reload,
        add_3_279_reload,
        add_3_380_reload,
        add_3_481_reload,
        add_3_582_reload,
        add_3_683_reload,
        add_3_784_reload,
        add_485_reload,
        add_4_186_reload,
        add_4_287_reload,
        add_4_388_reload,
        add_4_489_reload,
        add_4_590_reload,
        add_4_691_reload,
        add_4_792_reload,
        add_593_reload,
        add_5_194_reload,
        add_5_295_reload,
        add_5_396_reload,
        add_5_497_reload,
        add_5_598_reload,
        add_5_699_reload,
        add_5_7100_reload,
        add_6101_reload,
        add_6_1102_reload,
        add_6_2103_reload,
        add_6_3104_reload,
        add_6_4105_reload,
        add_6_5106_reload,
        add_6_6107_reload,
        add_6_7108_reload,
        add_7109_reload,
        add_7_1110_reload,
        add_7_2111_reload,
        add_7_3112_reload,
        add_7_4113_reload,
        add_7_5114_reload,
        add_7_6115_reload,
        add_7_7116_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_c_port_AWVALID;
input   m_axi_c_port_AWREADY;
output  [63:0] m_axi_c_port_AWADDR;
output  [0:0] m_axi_c_port_AWID;
output  [31:0] m_axi_c_port_AWLEN;
output  [2:0] m_axi_c_port_AWSIZE;
output  [1:0] m_axi_c_port_AWBURST;
output  [1:0] m_axi_c_port_AWLOCK;
output  [3:0] m_axi_c_port_AWCACHE;
output  [2:0] m_axi_c_port_AWPROT;
output  [3:0] m_axi_c_port_AWQOS;
output  [3:0] m_axi_c_port_AWREGION;
output  [0:0] m_axi_c_port_AWUSER;
output   m_axi_c_port_WVALID;
input   m_axi_c_port_WREADY;
output  [31:0] m_axi_c_port_WDATA;
output  [3:0] m_axi_c_port_WSTRB;
output   m_axi_c_port_WLAST;
output  [0:0] m_axi_c_port_WID;
output  [0:0] m_axi_c_port_WUSER;
output   m_axi_c_port_ARVALID;
input   m_axi_c_port_ARREADY;
output  [63:0] m_axi_c_port_ARADDR;
output  [0:0] m_axi_c_port_ARID;
output  [31:0] m_axi_c_port_ARLEN;
output  [2:0] m_axi_c_port_ARSIZE;
output  [1:0] m_axi_c_port_ARBURST;
output  [1:0] m_axi_c_port_ARLOCK;
output  [3:0] m_axi_c_port_ARCACHE;
output  [2:0] m_axi_c_port_ARPROT;
output  [3:0] m_axi_c_port_ARQOS;
output  [3:0] m_axi_c_port_ARREGION;
output  [0:0] m_axi_c_port_ARUSER;
input   m_axi_c_port_RVALID;
output   m_axi_c_port_RREADY;
input  [31:0] m_axi_c_port_RDATA;
input   m_axi_c_port_RLAST;
input  [0:0] m_axi_c_port_RID;
input  [8:0] m_axi_c_port_RFIFONUM;
input  [0:0] m_axi_c_port_RUSER;
input  [1:0] m_axi_c_port_RRESP;
input   m_axi_c_port_BVALID;
output   m_axi_c_port_BREADY;
input  [1:0] m_axi_c_port_BRESP;
input  [0:0] m_axi_c_port_BID;
input  [0:0] m_axi_c_port_BUSER;
input  [61:0] sext_ln62;
input  [31:0] p_reload;
input  [31:0] add_12254_reload;
input  [31:0] add_22755_reload;
input  [31:0] add_33256_reload;
input  [31:0] add_43757_reload;
input  [31:0] add_54258_reload;
input  [31:0] add_64759_reload;
input  [31:0] add_75260_reload;
input  [31:0] add_161_reload;
input  [31:0] add_1_162_reload;
input  [31:0] add_1_263_reload;
input  [31:0] add_1_364_reload;
input  [31:0] add_1_465_reload;
input  [31:0] add_1_566_reload;
input  [31:0] add_1_667_reload;
input  [31:0] add_1_768_reload;
input  [31:0] add_269_reload;
input  [31:0] add_2_170_reload;
input  [31:0] add_2_271_reload;
input  [31:0] add_2_372_reload;
input  [31:0] add_2_473_reload;
input  [31:0] add_2_574_reload;
input  [31:0] add_2_675_reload;
input  [31:0] add_2_776_reload;
input  [31:0] add_377_reload;
input  [31:0] add_3_178_reload;
input  [31:0] add_3_279_reload;
input  [31:0] add_3_380_reload;
input  [31:0] add_3_481_reload;
input  [31:0] add_3_582_reload;
input  [31:0] add_3_683_reload;
input  [31:0] add_3_784_reload;
input  [31:0] add_485_reload;
input  [31:0] add_4_186_reload;
input  [31:0] add_4_287_reload;
input  [31:0] add_4_388_reload;
input  [31:0] add_4_489_reload;
input  [31:0] add_4_590_reload;
input  [31:0] add_4_691_reload;
input  [31:0] add_4_792_reload;
input  [31:0] add_593_reload;
input  [31:0] add_5_194_reload;
input  [31:0] add_5_295_reload;
input  [31:0] add_5_396_reload;
input  [31:0] add_5_497_reload;
input  [31:0] add_5_598_reload;
input  [31:0] add_5_699_reload;
input  [31:0] add_5_7100_reload;
input  [31:0] add_6101_reload;
input  [31:0] add_6_1102_reload;
input  [31:0] add_6_2103_reload;
input  [31:0] add_6_3104_reload;
input  [31:0] add_6_4105_reload;
input  [31:0] add_6_5106_reload;
input  [31:0] add_6_6107_reload;
input  [31:0] add_6_7108_reload;
input  [31:0] add_7109_reload;
input  [31:0] add_7_1110_reload;
input  [31:0] add_7_2111_reload;
input  [31:0] add_7_3112_reload;
input  [31:0] add_7_4113_reload;
input  [31:0] add_7_5114_reload;
input  [31:0] add_7_6115_reload;
input  [31:0] add_7_7116_reload;

reg ap_idle;
reg m_axi_c_port_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond5_fu_604_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    c_port_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_6_fu_806_p10;
reg   [31:0] tmp_6_reg_852;
wire    ap_block_pp0_stage0_01001;
reg   [6:0] loop_index_fu_184;
wire   [6:0] empty_23_fu_610_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_loop_index_load;
wire   [2:0] empty_24_fu_626_p1;
wire   [31:0] tmp_8_fu_630_p10;
wire   [31:0] tmp_9_fu_652_p10;
wire   [31:0] tmp_s_fu_674_p10;
wire   [31:0] tmp_1_fu_696_p10;
wire   [31:0] tmp_2_fu_718_p10;
wire   [31:0] tmp_3_fu_740_p10;
wire   [31:0] tmp_4_fu_762_p10;
wire   [31:0] tmp_5_fu_784_p10;
wire   [2:0] tmp_6_fu_806_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U341(
    .din0(p_reload),
    .din1(add_12254_reload),
    .din2(add_22755_reload),
    .din3(add_33256_reload),
    .din4(add_43757_reload),
    .din5(add_54258_reload),
    .din6(add_64759_reload),
    .din7(add_75260_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_8_fu_630_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U342(
    .din0(add_161_reload),
    .din1(add_1_162_reload),
    .din2(add_1_263_reload),
    .din3(add_1_364_reload),
    .din4(add_1_465_reload),
    .din5(add_1_566_reload),
    .din6(add_1_667_reload),
    .din7(add_1_768_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_9_fu_652_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U343(
    .din0(add_269_reload),
    .din1(add_2_170_reload),
    .din2(add_2_271_reload),
    .din3(add_2_372_reload),
    .din4(add_2_473_reload),
    .din5(add_2_574_reload),
    .din6(add_2_675_reload),
    .din7(add_2_776_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_s_fu_674_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U344(
    .din0(add_377_reload),
    .din1(add_3_178_reload),
    .din2(add_3_279_reload),
    .din3(add_3_380_reload),
    .din4(add_3_481_reload),
    .din5(add_3_582_reload),
    .din6(add_3_683_reload),
    .din7(add_3_784_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_1_fu_696_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U345(
    .din0(add_485_reload),
    .din1(add_4_186_reload),
    .din2(add_4_287_reload),
    .din3(add_4_388_reload),
    .din4(add_4_489_reload),
    .din5(add_4_590_reload),
    .din6(add_4_691_reload),
    .din7(add_4_792_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_2_fu_718_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U346(
    .din0(add_593_reload),
    .din1(add_5_194_reload),
    .din2(add_5_295_reload),
    .din3(add_5_396_reload),
    .din4(add_5_497_reload),
    .din5(add_5_598_reload),
    .din6(add_5_699_reload),
    .din7(add_5_7100_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_3_fu_740_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U347(
    .din0(add_6101_reload),
    .din1(add_6_1102_reload),
    .din2(add_6_2103_reload),
    .din3(add_6_3104_reload),
    .din4(add_6_4105_reload),
    .din5(add_6_5106_reload),
    .din6(add_6_6107_reload),
    .din7(add_6_7108_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_4_fu_762_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U348(
    .din0(add_7109_reload),
    .din1(add_7_1110_reload),
    .din2(add_7_2111_reload),
    .din3(add_7_3112_reload),
    .din4(add_7_4113_reload),
    .din5(add_7_5114_reload),
    .din6(add_7_6115_reload),
    .din7(add_7_7116_reload),
    .din8(empty_24_fu_626_p1),
    .dout(tmp_5_fu_784_p10)
);

gemm_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U349(
    .din0(tmp_8_fu_630_p10),
    .din1(tmp_9_fu_652_p10),
    .din2(tmp_s_fu_674_p10),
    .din3(tmp_1_fu_696_p10),
    .din4(tmp_2_fu_718_p10),
    .din5(tmp_3_fu_740_p10),
    .din6(tmp_4_fu_762_p10),
    .din7(tmp_5_fu_784_p10),
    .din8(tmp_6_fu_806_p9),
    .dout(tmp_6_fu_806_p10)
);

gemm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond5_fu_604_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            loop_index_fu_184 <= empty_23_fu_610_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index_fu_184 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_604_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_reg_852 <= tmp_6_fu_806_p10;
    end
end

always @ (*) begin
    if (((exitcond5_fu_604_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_loop_index_load = 7'd0;
    end else begin
        ap_sig_allocacmp_loop_index_load = loop_index_fu_184;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_port_blk_n_W = m_axi_c_port_WREADY;
    end else begin
        c_port_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_c_port_WVALID = 1'b1;
    end else begin
        m_axi_c_port_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_c_port_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_c_port_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_23_fu_610_p2 = (ap_sig_allocacmp_loop_index_load + 7'd1);

assign empty_24_fu_626_p1 = ap_sig_allocacmp_loop_index_load[2:0];

assign exitcond5_fu_604_p2 = ((ap_sig_allocacmp_loop_index_load == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_c_port_ARADDR = 64'd0;

assign m_axi_c_port_ARBURST = 2'd0;

assign m_axi_c_port_ARCACHE = 4'd0;

assign m_axi_c_port_ARID = 1'd0;

assign m_axi_c_port_ARLEN = 32'd0;

assign m_axi_c_port_ARLOCK = 2'd0;

assign m_axi_c_port_ARPROT = 3'd0;

assign m_axi_c_port_ARQOS = 4'd0;

assign m_axi_c_port_ARREGION = 4'd0;

assign m_axi_c_port_ARSIZE = 3'd0;

assign m_axi_c_port_ARUSER = 1'd0;

assign m_axi_c_port_ARVALID = 1'b0;

assign m_axi_c_port_AWADDR = 64'd0;

assign m_axi_c_port_AWBURST = 2'd0;

assign m_axi_c_port_AWCACHE = 4'd0;

assign m_axi_c_port_AWID = 1'd0;

assign m_axi_c_port_AWLEN = 32'd0;

assign m_axi_c_port_AWLOCK = 2'd0;

assign m_axi_c_port_AWPROT = 3'd0;

assign m_axi_c_port_AWQOS = 4'd0;

assign m_axi_c_port_AWREGION = 4'd0;

assign m_axi_c_port_AWSIZE = 3'd0;

assign m_axi_c_port_AWUSER = 1'd0;

assign m_axi_c_port_AWVALID = 1'b0;

assign m_axi_c_port_BREADY = 1'b0;

assign m_axi_c_port_RREADY = 1'b0;

assign m_axi_c_port_WDATA = tmp_6_reg_852;

assign m_axi_c_port_WID = 1'd0;

assign m_axi_c_port_WLAST = 1'b0;

assign m_axi_c_port_WSTRB = 4'd15;

assign m_axi_c_port_WUSER = 1'd0;

assign tmp_6_fu_806_p9 = {{ap_sig_allocacmp_loop_index_load[5:3]}};

endmodule //gemm_gemm_Pipeline_5
