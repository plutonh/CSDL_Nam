// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gemm_gemm_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_buff_63_out,
        c_buff_63_out_ap_vld,
        c_buff_62_out,
        c_buff_62_out_ap_vld,
        c_buff_61_out,
        c_buff_61_out_ap_vld,
        c_buff_60_out,
        c_buff_60_out_ap_vld,
        c_buff_59_out,
        c_buff_59_out_ap_vld,
        c_buff_58_out,
        c_buff_58_out_ap_vld,
        c_buff_57_out,
        c_buff_57_out_ap_vld,
        c_buff_56_out,
        c_buff_56_out_ap_vld,
        c_buff_55_out,
        c_buff_55_out_ap_vld,
        c_buff_54_out,
        c_buff_54_out_ap_vld,
        c_buff_53_out,
        c_buff_53_out_ap_vld,
        c_buff_52_out,
        c_buff_52_out_ap_vld,
        c_buff_51_out,
        c_buff_51_out_ap_vld,
        c_buff_50_out,
        c_buff_50_out_ap_vld,
        c_buff_49_out,
        c_buff_49_out_ap_vld,
        c_buff_48_out,
        c_buff_48_out_ap_vld,
        c_buff_47_out,
        c_buff_47_out_ap_vld,
        c_buff_46_out,
        c_buff_46_out_ap_vld,
        c_buff_45_out,
        c_buff_45_out_ap_vld,
        c_buff_44_out,
        c_buff_44_out_ap_vld,
        c_buff_43_out,
        c_buff_43_out_ap_vld,
        c_buff_42_out,
        c_buff_42_out_ap_vld,
        c_buff_41_out,
        c_buff_41_out_ap_vld,
        c_buff_40_out,
        c_buff_40_out_ap_vld,
        c_buff_39_out,
        c_buff_39_out_ap_vld,
        c_buff_38_out,
        c_buff_38_out_ap_vld,
        c_buff_37_out,
        c_buff_37_out_ap_vld,
        c_buff_36_out,
        c_buff_36_out_ap_vld,
        c_buff_35_out,
        c_buff_35_out_ap_vld,
        c_buff_34_out,
        c_buff_34_out_ap_vld,
        c_buff_33_out,
        c_buff_33_out_ap_vld,
        c_buff_32_out,
        c_buff_32_out_ap_vld,
        c_buff_31_out,
        c_buff_31_out_ap_vld,
        c_buff_30_out,
        c_buff_30_out_ap_vld,
        c_buff_29_out,
        c_buff_29_out_ap_vld,
        c_buff_28_out,
        c_buff_28_out_ap_vld,
        c_buff_27_out,
        c_buff_27_out_ap_vld,
        c_buff_26_out,
        c_buff_26_out_ap_vld,
        c_buff_25_out,
        c_buff_25_out_ap_vld,
        c_buff_24_out,
        c_buff_24_out_ap_vld,
        c_buff_23_out,
        c_buff_23_out_ap_vld,
        c_buff_22_out,
        c_buff_22_out_ap_vld,
        c_buff_21_out,
        c_buff_21_out_ap_vld,
        c_buff_20_out,
        c_buff_20_out_ap_vld,
        c_buff_19_out,
        c_buff_19_out_ap_vld,
        c_buff_18_out,
        c_buff_18_out_ap_vld,
        c_buff_17_out,
        c_buff_17_out_ap_vld,
        c_buff_16_out,
        c_buff_16_out_ap_vld,
        c_buff_15_out,
        c_buff_15_out_ap_vld,
        c_buff_14_out,
        c_buff_14_out_ap_vld,
        c_buff_13_out,
        c_buff_13_out_ap_vld,
        c_buff_12_out,
        c_buff_12_out_ap_vld,
        c_buff_11_out,
        c_buff_11_out_ap_vld,
        c_buff_10_out,
        c_buff_10_out_ap_vld,
        c_buff_9_out,
        c_buff_9_out_ap_vld,
        c_buff_8_out,
        c_buff_8_out_ap_vld,
        c_buff_7_out,
        c_buff_7_out_ap_vld,
        c_buff_6_out,
        c_buff_6_out_ap_vld,
        c_buff_5_out,
        c_buff_5_out_ap_vld,
        c_buff_4_out,
        c_buff_4_out_ap_vld,
        c_buff_3_out,
        c_buff_3_out_ap_vld,
        c_buff_2_out,
        c_buff_2_out_ap_vld,
        c_buff_1_out,
        c_buff_1_out_ap_vld,
        c_buff_out,
        c_buff_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] c_buff_63_out;
output   c_buff_63_out_ap_vld;
output  [31:0] c_buff_62_out;
output   c_buff_62_out_ap_vld;
output  [31:0] c_buff_61_out;
output   c_buff_61_out_ap_vld;
output  [31:0] c_buff_60_out;
output   c_buff_60_out_ap_vld;
output  [31:0] c_buff_59_out;
output   c_buff_59_out_ap_vld;
output  [31:0] c_buff_58_out;
output   c_buff_58_out_ap_vld;
output  [31:0] c_buff_57_out;
output   c_buff_57_out_ap_vld;
output  [31:0] c_buff_56_out;
output   c_buff_56_out_ap_vld;
output  [31:0] c_buff_55_out;
output   c_buff_55_out_ap_vld;
output  [31:0] c_buff_54_out;
output   c_buff_54_out_ap_vld;
output  [31:0] c_buff_53_out;
output   c_buff_53_out_ap_vld;
output  [31:0] c_buff_52_out;
output   c_buff_52_out_ap_vld;
output  [31:0] c_buff_51_out;
output   c_buff_51_out_ap_vld;
output  [31:0] c_buff_50_out;
output   c_buff_50_out_ap_vld;
output  [31:0] c_buff_49_out;
output   c_buff_49_out_ap_vld;
output  [31:0] c_buff_48_out;
output   c_buff_48_out_ap_vld;
output  [31:0] c_buff_47_out;
output   c_buff_47_out_ap_vld;
output  [31:0] c_buff_46_out;
output   c_buff_46_out_ap_vld;
output  [31:0] c_buff_45_out;
output   c_buff_45_out_ap_vld;
output  [31:0] c_buff_44_out;
output   c_buff_44_out_ap_vld;
output  [31:0] c_buff_43_out;
output   c_buff_43_out_ap_vld;
output  [31:0] c_buff_42_out;
output   c_buff_42_out_ap_vld;
output  [31:0] c_buff_41_out;
output   c_buff_41_out_ap_vld;
output  [31:0] c_buff_40_out;
output   c_buff_40_out_ap_vld;
output  [31:0] c_buff_39_out;
output   c_buff_39_out_ap_vld;
output  [31:0] c_buff_38_out;
output   c_buff_38_out_ap_vld;
output  [31:0] c_buff_37_out;
output   c_buff_37_out_ap_vld;
output  [31:0] c_buff_36_out;
output   c_buff_36_out_ap_vld;
output  [31:0] c_buff_35_out;
output   c_buff_35_out_ap_vld;
output  [31:0] c_buff_34_out;
output   c_buff_34_out_ap_vld;
output  [31:0] c_buff_33_out;
output   c_buff_33_out_ap_vld;
output  [31:0] c_buff_32_out;
output   c_buff_32_out_ap_vld;
output  [31:0] c_buff_31_out;
output   c_buff_31_out_ap_vld;
output  [31:0] c_buff_30_out;
output   c_buff_30_out_ap_vld;
output  [31:0] c_buff_29_out;
output   c_buff_29_out_ap_vld;
output  [31:0] c_buff_28_out;
output   c_buff_28_out_ap_vld;
output  [31:0] c_buff_27_out;
output   c_buff_27_out_ap_vld;
output  [31:0] c_buff_26_out;
output   c_buff_26_out_ap_vld;
output  [31:0] c_buff_25_out;
output   c_buff_25_out_ap_vld;
output  [31:0] c_buff_24_out;
output   c_buff_24_out_ap_vld;
output  [31:0] c_buff_23_out;
output   c_buff_23_out_ap_vld;
output  [31:0] c_buff_22_out;
output   c_buff_22_out_ap_vld;
output  [31:0] c_buff_21_out;
output   c_buff_21_out_ap_vld;
output  [31:0] c_buff_20_out;
output   c_buff_20_out_ap_vld;
output  [31:0] c_buff_19_out;
output   c_buff_19_out_ap_vld;
output  [31:0] c_buff_18_out;
output   c_buff_18_out_ap_vld;
output  [31:0] c_buff_17_out;
output   c_buff_17_out_ap_vld;
output  [31:0] c_buff_16_out;
output   c_buff_16_out_ap_vld;
output  [31:0] c_buff_15_out;
output   c_buff_15_out_ap_vld;
output  [31:0] c_buff_14_out;
output   c_buff_14_out_ap_vld;
output  [31:0] c_buff_13_out;
output   c_buff_13_out_ap_vld;
output  [31:0] c_buff_12_out;
output   c_buff_12_out_ap_vld;
output  [31:0] c_buff_11_out;
output   c_buff_11_out_ap_vld;
output  [31:0] c_buff_10_out;
output   c_buff_10_out_ap_vld;
output  [31:0] c_buff_9_out;
output   c_buff_9_out_ap_vld;
output  [31:0] c_buff_8_out;
output   c_buff_8_out_ap_vld;
output  [31:0] c_buff_7_out;
output   c_buff_7_out_ap_vld;
output  [31:0] c_buff_6_out;
output   c_buff_6_out_ap_vld;
output  [31:0] c_buff_5_out;
output   c_buff_5_out_ap_vld;
output  [31:0] c_buff_4_out;
output   c_buff_4_out_ap_vld;
output  [31:0] c_buff_3_out;
output   c_buff_3_out_ap_vld;
output  [31:0] c_buff_2_out;
output   c_buff_2_out_ap_vld;
output  [31:0] c_buff_1_out;
output   c_buff_1_out_ap_vld;
output  [31:0] c_buff_out;
output   c_buff_out_ap_vld;

reg ap_idle;
reg c_buff_63_out_ap_vld;
reg c_buff_62_out_ap_vld;
reg c_buff_61_out_ap_vld;
reg c_buff_60_out_ap_vld;
reg c_buff_59_out_ap_vld;
reg c_buff_58_out_ap_vld;
reg c_buff_57_out_ap_vld;
reg c_buff_56_out_ap_vld;
reg c_buff_55_out_ap_vld;
reg c_buff_54_out_ap_vld;
reg c_buff_53_out_ap_vld;
reg c_buff_52_out_ap_vld;
reg c_buff_51_out_ap_vld;
reg c_buff_50_out_ap_vld;
reg c_buff_49_out_ap_vld;
reg c_buff_48_out_ap_vld;
reg c_buff_47_out_ap_vld;
reg c_buff_46_out_ap_vld;
reg c_buff_45_out_ap_vld;
reg c_buff_44_out_ap_vld;
reg c_buff_43_out_ap_vld;
reg c_buff_42_out_ap_vld;
reg c_buff_41_out_ap_vld;
reg c_buff_40_out_ap_vld;
reg c_buff_39_out_ap_vld;
reg c_buff_38_out_ap_vld;
reg c_buff_37_out_ap_vld;
reg c_buff_36_out_ap_vld;
reg c_buff_35_out_ap_vld;
reg c_buff_34_out_ap_vld;
reg c_buff_33_out_ap_vld;
reg c_buff_32_out_ap_vld;
reg c_buff_31_out_ap_vld;
reg c_buff_30_out_ap_vld;
reg c_buff_29_out_ap_vld;
reg c_buff_28_out_ap_vld;
reg c_buff_27_out_ap_vld;
reg c_buff_26_out_ap_vld;
reg c_buff_25_out_ap_vld;
reg c_buff_24_out_ap_vld;
reg c_buff_23_out_ap_vld;
reg c_buff_22_out_ap_vld;
reg c_buff_21_out_ap_vld;
reg c_buff_20_out_ap_vld;
reg c_buff_19_out_ap_vld;
reg c_buff_18_out_ap_vld;
reg c_buff_17_out_ap_vld;
reg c_buff_16_out_ap_vld;
reg c_buff_15_out_ap_vld;
reg c_buff_14_out_ap_vld;
reg c_buff_13_out_ap_vld;
reg c_buff_12_out_ap_vld;
reg c_buff_11_out_ap_vld;
reg c_buff_10_out_ap_vld;
reg c_buff_9_out_ap_vld;
reg c_buff_8_out_ap_vld;
reg c_buff_7_out_ap_vld;
reg c_buff_6_out_ap_vld;
reg c_buff_5_out_ap_vld;
reg c_buff_4_out_ap_vld;
reg c_buff_3_out_ap_vld;
reg c_buff_2_out_ap_vld;
reg c_buff_1_out_ap_vld;
reg c_buff_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln45_fu_912_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] o_fu_178;
wire   [3:0] add_ln46_fu_1286_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_o_load;
reg   [3:0] m_fu_182;
wire   [3:0] select_ln30_1_fu_950_p3;
reg   [3:0] ap_sig_allocacmp_m_load;
reg   [6:0] indvar_flatten_fu_186;
wire   [6:0] add_ln45_fu_918_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln46_fu_930_p2;
wire   [3:0] add_ln45_1_fu_944_p2;
wire   [3:0] select_ln30_fu_936_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

gemm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln45_fu_912_p2 == 1'd0)) begin
            indvar_flatten_fu_186 <= add_ln45_fu_918_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_186 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln45_fu_912_p2 == 1'd0)) begin
            m_fu_182 <= select_ln30_1_fu_950_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            m_fu_182 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln45_fu_912_p2 == 1'd0)) begin
            o_fu_178 <= add_ln46_fu_1286_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            o_fu_178 <= 4'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_186;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_m_load = 4'd0;
    end else begin
        ap_sig_allocacmp_m_load = m_fu_182;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_o_load = 4'd0;
    end else begin
        ap_sig_allocacmp_o_load = o_fu_178;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_10_out_ap_vld = 1'b1;
    end else begin
        c_buff_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_11_out_ap_vld = 1'b1;
    end else begin
        c_buff_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_12_out_ap_vld = 1'b1;
    end else begin
        c_buff_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_13_out_ap_vld = 1'b1;
    end else begin
        c_buff_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_14_out_ap_vld = 1'b1;
    end else begin
        c_buff_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_15_out_ap_vld = 1'b1;
    end else begin
        c_buff_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_16_out_ap_vld = 1'b1;
    end else begin
        c_buff_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_17_out_ap_vld = 1'b1;
    end else begin
        c_buff_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_18_out_ap_vld = 1'b1;
    end else begin
        c_buff_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_19_out_ap_vld = 1'b1;
    end else begin
        c_buff_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_1_out_ap_vld = 1'b1;
    end else begin
        c_buff_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_20_out_ap_vld = 1'b1;
    end else begin
        c_buff_20_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_21_out_ap_vld = 1'b1;
    end else begin
        c_buff_21_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_22_out_ap_vld = 1'b1;
    end else begin
        c_buff_22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_23_out_ap_vld = 1'b1;
    end else begin
        c_buff_23_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_24_out_ap_vld = 1'b1;
    end else begin
        c_buff_24_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_25_out_ap_vld = 1'b1;
    end else begin
        c_buff_25_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_26_out_ap_vld = 1'b1;
    end else begin
        c_buff_26_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_27_out_ap_vld = 1'b1;
    end else begin
        c_buff_27_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_28_out_ap_vld = 1'b1;
    end else begin
        c_buff_28_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_29_out_ap_vld = 1'b1;
    end else begin
        c_buff_29_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_2_out_ap_vld = 1'b1;
    end else begin
        c_buff_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_30_out_ap_vld = 1'b1;
    end else begin
        c_buff_30_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_31_out_ap_vld = 1'b1;
    end else begin
        c_buff_31_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_32_out_ap_vld = 1'b1;
    end else begin
        c_buff_32_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_33_out_ap_vld = 1'b1;
    end else begin
        c_buff_33_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_34_out_ap_vld = 1'b1;
    end else begin
        c_buff_34_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_35_out_ap_vld = 1'b1;
    end else begin
        c_buff_35_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_36_out_ap_vld = 1'b1;
    end else begin
        c_buff_36_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_37_out_ap_vld = 1'b1;
    end else begin
        c_buff_37_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_38_out_ap_vld = 1'b1;
    end else begin
        c_buff_38_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_39_out_ap_vld = 1'b1;
    end else begin
        c_buff_39_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_3_out_ap_vld = 1'b1;
    end else begin
        c_buff_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_40_out_ap_vld = 1'b1;
    end else begin
        c_buff_40_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_41_out_ap_vld = 1'b1;
    end else begin
        c_buff_41_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_42_out_ap_vld = 1'b1;
    end else begin
        c_buff_42_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_43_out_ap_vld = 1'b1;
    end else begin
        c_buff_43_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_44_out_ap_vld = 1'b1;
    end else begin
        c_buff_44_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_45_out_ap_vld = 1'b1;
    end else begin
        c_buff_45_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_46_out_ap_vld = 1'b1;
    end else begin
        c_buff_46_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_47_out_ap_vld = 1'b1;
    end else begin
        c_buff_47_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_48_out_ap_vld = 1'b1;
    end else begin
        c_buff_48_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_49_out_ap_vld = 1'b1;
    end else begin
        c_buff_49_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_4_out_ap_vld = 1'b1;
    end else begin
        c_buff_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_50_out_ap_vld = 1'b1;
    end else begin
        c_buff_50_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_51_out_ap_vld = 1'b1;
    end else begin
        c_buff_51_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_52_out_ap_vld = 1'b1;
    end else begin
        c_buff_52_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_53_out_ap_vld = 1'b1;
    end else begin
        c_buff_53_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_54_out_ap_vld = 1'b1;
    end else begin
        c_buff_54_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_55_out_ap_vld = 1'b1;
    end else begin
        c_buff_55_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_56_out_ap_vld = 1'b1;
    end else begin
        c_buff_56_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_57_out_ap_vld = 1'b1;
    end else begin
        c_buff_57_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_58_out_ap_vld = 1'b1;
    end else begin
        c_buff_58_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_59_out_ap_vld = 1'b1;
    end else begin
        c_buff_59_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_5_out_ap_vld = 1'b1;
    end else begin
        c_buff_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_60_out_ap_vld = 1'b1;
    end else begin
        c_buff_60_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_61_out_ap_vld = 1'b1;
    end else begin
        c_buff_61_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_62_out_ap_vld = 1'b1;
    end else begin
        c_buff_62_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_63_out_ap_vld = 1'b1;
    end else begin
        c_buff_63_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_6_out_ap_vld = 1'b1;
    end else begin
        c_buff_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_7_out_ap_vld = 1'b1;
    end else begin
        c_buff_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_8_out_ap_vld = 1'b1;
    end else begin
        c_buff_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_9_out_ap_vld = 1'b1;
    end else begin
        c_buff_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln45_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_buff_out_ap_vld = 1'b1;
    end else begin
        c_buff_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_1_fu_944_p2 = (ap_sig_allocacmp_m_load + 4'd1);

assign add_ln45_fu_918_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln46_fu_1286_p2 = (select_ln30_fu_936_p3 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_buff_10_out = 32'd0;

assign c_buff_11_out = 32'd0;

assign c_buff_12_out = 32'd0;

assign c_buff_13_out = 32'd0;

assign c_buff_14_out = 32'd0;

assign c_buff_15_out = 32'd0;

assign c_buff_16_out = 32'd0;

assign c_buff_17_out = 32'd0;

assign c_buff_18_out = 32'd0;

assign c_buff_19_out = 32'd0;

assign c_buff_1_out = 32'd0;

assign c_buff_20_out = 32'd0;

assign c_buff_21_out = 32'd0;

assign c_buff_22_out = 32'd0;

assign c_buff_23_out = 32'd0;

assign c_buff_24_out = 32'd0;

assign c_buff_25_out = 32'd0;

assign c_buff_26_out = 32'd0;

assign c_buff_27_out = 32'd0;

assign c_buff_28_out = 32'd0;

assign c_buff_29_out = 32'd0;

assign c_buff_2_out = 32'd0;

assign c_buff_30_out = 32'd0;

assign c_buff_31_out = 32'd0;

assign c_buff_32_out = 32'd0;

assign c_buff_33_out = 32'd0;

assign c_buff_34_out = 32'd0;

assign c_buff_35_out = 32'd0;

assign c_buff_36_out = 32'd0;

assign c_buff_37_out = 32'd0;

assign c_buff_38_out = 32'd0;

assign c_buff_39_out = 32'd0;

assign c_buff_3_out = 32'd0;

assign c_buff_40_out = 32'd0;

assign c_buff_41_out = 32'd0;

assign c_buff_42_out = 32'd0;

assign c_buff_43_out = 32'd0;

assign c_buff_44_out = 32'd0;

assign c_buff_45_out = 32'd0;

assign c_buff_46_out = 32'd0;

assign c_buff_47_out = 32'd0;

assign c_buff_48_out = 32'd0;

assign c_buff_49_out = 32'd0;

assign c_buff_4_out = 32'd0;

assign c_buff_50_out = 32'd0;

assign c_buff_51_out = 32'd0;

assign c_buff_52_out = 32'd0;

assign c_buff_53_out = 32'd0;

assign c_buff_54_out = 32'd0;

assign c_buff_55_out = 32'd0;

assign c_buff_56_out = 32'd0;

assign c_buff_57_out = 32'd0;

assign c_buff_58_out = 32'd0;

assign c_buff_59_out = 32'd0;

assign c_buff_5_out = 32'd0;

assign c_buff_60_out = 32'd0;

assign c_buff_61_out = 32'd0;

assign c_buff_62_out = 32'd0;

assign c_buff_63_out = 32'd0;

assign c_buff_6_out = 32'd0;

assign c_buff_7_out = 32'd0;

assign c_buff_8_out = 32'd0;

assign c_buff_9_out = 32'd0;

assign c_buff_out = 32'd0;

assign icmp_ln45_fu_912_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_930_p2 = ((ap_sig_allocacmp_o_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln30_1_fu_950_p3 = ((icmp_ln46_fu_930_p2[0:0] == 1'b1) ? add_ln45_1_fu_944_p2 : ap_sig_allocacmp_m_load);

assign select_ln30_fu_936_p3 = ((icmp_ln46_fu_930_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_o_load);

endmodule //gemm_gemm_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2
