// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mm_mm,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.252000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2059,HLS_SYN_LUT=3301,HLS_VERSION=2022_2}" *)

module mm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0,
        A_4_address0,
        A_4_ce0,
        A_4_q0,
        A_5_address0,
        A_5_ce0,
        A_5_q0,
        A_6_address0,
        A_6_ce0,
        A_6_q0,
        A_7_address0,
        A_7_ce0,
        A_7_q0,
        B_0_0,
        B_0_1,
        B_0_2,
        B_0_3,
        B_0_4,
        B_0_5,
        B_0_6,
        B_0_7,
        B_1_0,
        B_1_1,
        B_1_2,
        B_1_3,
        B_1_4,
        B_1_5,
        B_1_6,
        B_1_7,
        B_2_0,
        B_2_1,
        B_2_2,
        B_2_3,
        B_2_4,
        B_2_5,
        B_2_6,
        B_2_7,
        B_3_0,
        B_3_1,
        B_3_2,
        B_3_3,
        B_3_4,
        B_3_5,
        B_3_6,
        B_3_7,
        B_4_0,
        B_4_1,
        B_4_2,
        B_4_3,
        B_4_4,
        B_4_5,
        B_4_6,
        B_4_7,
        B_5_0,
        B_5_1,
        B_5_2,
        B_5_3,
        B_5_4,
        B_5_5,
        B_5_6,
        B_5_7,
        B_6_0,
        B_6_1,
        B_6_2,
        B_6_3,
        B_6_4,
        B_6_5,
        B_6_6,
        B_6_7,
        B_7_0,
        B_7_1,
        B_7_2,
        B_7_3,
        B_7_4,
        B_7_5,
        B_7_6,
        B_7_7,
        AB_0_address0,
        AB_0_ce0,
        AB_0_we0,
        AB_0_d0,
        AB_1_address0,
        AB_1_ce0,
        AB_1_we0,
        AB_1_d0,
        AB_2_address0,
        AB_2_ce0,
        AB_2_we0,
        AB_2_d0,
        AB_3_address0,
        AB_3_ce0,
        AB_3_we0,
        AB_3_d0,
        AB_4_address0,
        AB_4_ce0,
        AB_4_we0,
        AB_4_d0,
        AB_5_address0,
        AB_5_ce0,
        AB_5_we0,
        AB_5_d0,
        AB_6_address0,
        AB_6_ce0,
        AB_6_we0,
        AB_6_d0,
        AB_7_address0,
        AB_7_ce0,
        AB_7_we0,
        AB_7_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] A_0_address0;
output   A_0_ce0;
input  [31:0] A_0_q0;
output  [2:0] A_1_address0;
output   A_1_ce0;
input  [31:0] A_1_q0;
output  [2:0] A_2_address0;
output   A_2_ce0;
input  [31:0] A_2_q0;
output  [2:0] A_3_address0;
output   A_3_ce0;
input  [31:0] A_3_q0;
output  [2:0] A_4_address0;
output   A_4_ce0;
input  [31:0] A_4_q0;
output  [2:0] A_5_address0;
output   A_5_ce0;
input  [31:0] A_5_q0;
output  [2:0] A_6_address0;
output   A_6_ce0;
input  [31:0] A_6_q0;
output  [2:0] A_7_address0;
output   A_7_ce0;
input  [31:0] A_7_q0;
input  [31:0] B_0_0;
input  [31:0] B_0_1;
input  [31:0] B_0_2;
input  [31:0] B_0_3;
input  [31:0] B_0_4;
input  [31:0] B_0_5;
input  [31:0] B_0_6;
input  [31:0] B_0_7;
input  [31:0] B_1_0;
input  [31:0] B_1_1;
input  [31:0] B_1_2;
input  [31:0] B_1_3;
input  [31:0] B_1_4;
input  [31:0] B_1_5;
input  [31:0] B_1_6;
input  [31:0] B_1_7;
input  [31:0] B_2_0;
input  [31:0] B_2_1;
input  [31:0] B_2_2;
input  [31:0] B_2_3;
input  [31:0] B_2_4;
input  [31:0] B_2_5;
input  [31:0] B_2_6;
input  [31:0] B_2_7;
input  [31:0] B_3_0;
input  [31:0] B_3_1;
input  [31:0] B_3_2;
input  [31:0] B_3_3;
input  [31:0] B_3_4;
input  [31:0] B_3_5;
input  [31:0] B_3_6;
input  [31:0] B_3_7;
input  [31:0] B_4_0;
input  [31:0] B_4_1;
input  [31:0] B_4_2;
input  [31:0] B_4_3;
input  [31:0] B_4_4;
input  [31:0] B_4_5;
input  [31:0] B_4_6;
input  [31:0] B_4_7;
input  [31:0] B_5_0;
input  [31:0] B_5_1;
input  [31:0] B_5_2;
input  [31:0] B_5_3;
input  [31:0] B_5_4;
input  [31:0] B_5_5;
input  [31:0] B_5_6;
input  [31:0] B_5_7;
input  [31:0] B_6_0;
input  [31:0] B_6_1;
input  [31:0] B_6_2;
input  [31:0] B_6_3;
input  [31:0] B_6_4;
input  [31:0] B_6_5;
input  [31:0] B_6_6;
input  [31:0] B_6_7;
input  [31:0] B_7_0;
input  [31:0] B_7_1;
input  [31:0] B_7_2;
input  [31:0] B_7_3;
input  [31:0] B_7_4;
input  [31:0] B_7_5;
input  [31:0] B_7_6;
input  [31:0] B_7_7;
output  [2:0] AB_0_address0;
output   AB_0_ce0;
output   AB_0_we0;
output  [31:0] AB_0_d0;
output  [2:0] AB_1_address0;
output   AB_1_ce0;
output   AB_1_we0;
output  [31:0] AB_1_d0;
output  [2:0] AB_2_address0;
output   AB_2_ce0;
output   AB_2_we0;
output  [31:0] AB_2_d0;
output  [2:0] AB_3_address0;
output   AB_3_ce0;
output   AB_3_we0;
output  [31:0] AB_3_d0;
output  [2:0] AB_4_address0;
output   AB_4_ce0;
output   AB_4_we0;
output  [31:0] AB_4_d0;
output  [2:0] AB_5_address0;
output   AB_5_ce0;
output   AB_5_we0;
output  [31:0] AB_5_d0;
output  [2:0] AB_6_address0;
output   AB_6_ce0;
output   AB_6_we0;
output  [31:0] AB_6_d0;
output  [2:0] AB_7_address0;
output   AB_7_ce0;
output   AB_7_we0;
output  [31:0] AB_7_d0;

reg ap_idle;
reg A_0_ce0;
reg A_1_ce0;
reg A_2_ce0;
reg A_3_ce0;
reg A_4_ce0;
reg A_5_ce0;
reg A_6_ce0;
reg A_7_ce0;
reg AB_0_ce0;
reg AB_0_we0;
reg AB_1_ce0;
reg AB_1_we0;
reg AB_2_ce0;
reg AB_2_we0;
reg AB_3_ce0;
reg AB_3_we0;
reg AB_4_ce0;
reg AB_4_we0;
reg AB_5_ce0;
reg AB_5_we0;
reg AB_6_ce0;
reg AB_6_we0;
reg AB_7_ce0;
reg AB_7_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln16_fu_804_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [31:0] B_0_0_read_reg_1504;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] B_1_0_read_reg_1509;
reg  signed [31:0] B_2_0_read_reg_1514;
reg  signed [31:0] B_3_0_read_reg_1519;
reg  signed [31:0] B_4_0_read_reg_1524;
reg  signed [31:0] B_5_0_read_reg_1529;
reg  signed [31:0] B_6_0_read_reg_1534;
reg  signed [31:0] B_7_0_read_reg_1539;
reg  signed [31:0] B_0_1_read_reg_1544;
reg  signed [31:0] B_1_1_read_reg_1549;
reg  signed [31:0] B_2_1_read_reg_1554;
reg  signed [31:0] B_3_1_read_reg_1559;
reg  signed [31:0] B_4_1_read_reg_1564;
reg  signed [31:0] B_5_1_read_reg_1569;
reg  signed [31:0] B_6_1_read_reg_1574;
reg  signed [31:0] B_7_1_read_reg_1579;
reg  signed [31:0] B_0_2_read_reg_1584;
reg  signed [31:0] B_1_2_read_reg_1589;
reg  signed [31:0] B_2_2_read_reg_1594;
reg  signed [31:0] B_3_2_read_reg_1599;
reg  signed [31:0] B_4_2_read_reg_1604;
reg  signed [31:0] B_5_2_read_reg_1609;
reg  signed [31:0] B_6_2_read_reg_1614;
reg  signed [31:0] B_7_2_read_reg_1619;
reg  signed [31:0] B_0_3_read_reg_1624;
reg  signed [31:0] B_1_3_read_reg_1629;
reg  signed [31:0] B_2_3_read_reg_1634;
reg  signed [31:0] B_3_3_read_reg_1639;
reg  signed [31:0] B_4_3_read_reg_1644;
reg  signed [31:0] B_5_3_read_reg_1649;
reg  signed [31:0] B_6_3_read_reg_1654;
reg  signed [31:0] B_7_3_read_reg_1659;
reg  signed [31:0] B_0_4_read_reg_1664;
reg  signed [31:0] B_1_4_read_reg_1669;
reg  signed [31:0] B_2_4_read_reg_1674;
reg  signed [31:0] B_3_4_read_reg_1679;
reg  signed [31:0] B_4_4_read_reg_1684;
reg  signed [31:0] B_5_4_read_reg_1689;
reg  signed [31:0] B_6_4_read_reg_1694;
reg  signed [31:0] B_7_4_read_reg_1699;
reg  signed [31:0] B_0_5_read_reg_1704;
reg  signed [31:0] B_1_5_read_reg_1709;
reg  signed [31:0] B_2_5_read_reg_1714;
reg  signed [31:0] B_3_5_read_reg_1719;
reg  signed [31:0] B_4_5_read_reg_1724;
reg  signed [31:0] B_5_5_read_reg_1729;
reg  signed [31:0] B_6_5_read_reg_1734;
reg  signed [31:0] B_7_5_read_reg_1739;
reg  signed [31:0] B_0_6_read_reg_1744;
reg  signed [31:0] B_1_6_read_reg_1749;
reg  signed [31:0] B_2_6_read_reg_1754;
reg  signed [31:0] B_3_6_read_reg_1759;
reg  signed [31:0] B_4_6_read_reg_1764;
reg  signed [31:0] B_5_6_read_reg_1769;
reg  signed [31:0] B_6_6_read_reg_1774;
reg  signed [31:0] B_7_6_read_reg_1779;
reg  signed [31:0] B_0_7_read_reg_1784;
reg  signed [31:0] B_1_7_read_reg_1789;
reg  signed [31:0] B_2_7_read_reg_1794;
reg  signed [31:0] B_3_7_read_reg_1799;
reg  signed [31:0] B_4_7_read_reg_1804;
reg  signed [31:0] B_5_7_read_reg_1809;
reg  signed [31:0] B_6_7_read_reg_1814;
reg  signed [31:0] B_7_7_read_reg_1819;
wire   [63:0] zext_ln16_fu_816_p1;
reg   [63:0] zext_ln16_reg_1827;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_200;
wire   [3:0] add_ln16_fu_810_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_1;
wire   [31:0] mul_ln21_fu_838_p2;
wire   [31:0] ABij_fu_833_p2;
wire   [31:0] mul_ln21_1_fu_843_p2;
wire   [31:0] mul_ln21_2_fu_848_p2;
wire   [31:0] add_ln21_1_fu_879_p2;
wire   [31:0] add_ln21_fu_873_p2;
wire   [31:0] mul_ln21_3_fu_853_p2;
wire   [31:0] mul_ln21_4_fu_858_p2;
wire   [31:0] mul_ln21_5_fu_863_p2;
wire   [31:0] mul_ln21_6_fu_868_p2;
wire   [31:0] add_ln21_4_fu_897_p2;
wire   [31:0] add_ln21_3_fu_891_p2;
wire   [31:0] add_ln21_5_fu_903_p2;
wire   [31:0] add_ln21_2_fu_885_p2;
wire   [31:0] mul_ln21_8_fu_921_p2;
wire   [31:0] ABij_2_fu_916_p2;
wire   [31:0] mul_ln21_9_fu_926_p2;
wire   [31:0] mul_ln21_10_fu_931_p2;
wire   [31:0] add_ln21_8_fu_962_p2;
wire   [31:0] add_ln21_7_fu_956_p2;
wire   [31:0] mul_ln21_11_fu_936_p2;
wire   [31:0] mul_ln21_12_fu_941_p2;
wire   [31:0] mul_ln21_13_fu_946_p2;
wire   [31:0] mul_ln21_14_fu_951_p2;
wire   [31:0] add_ln21_11_fu_980_p2;
wire   [31:0] add_ln21_10_fu_974_p2;
wire   [31:0] add_ln21_12_fu_986_p2;
wire   [31:0] add_ln21_9_fu_968_p2;
wire   [31:0] mul_ln21_16_fu_1004_p2;
wire   [31:0] ABij_4_fu_999_p2;
wire   [31:0] mul_ln21_17_fu_1009_p2;
wire   [31:0] mul_ln21_18_fu_1014_p2;
wire   [31:0] add_ln21_15_fu_1045_p2;
wire   [31:0] add_ln21_14_fu_1039_p2;
wire   [31:0] mul_ln21_19_fu_1019_p2;
wire   [31:0] mul_ln21_20_fu_1024_p2;
wire   [31:0] mul_ln21_21_fu_1029_p2;
wire   [31:0] mul_ln21_22_fu_1034_p2;
wire   [31:0] add_ln21_18_fu_1063_p2;
wire   [31:0] add_ln21_17_fu_1057_p2;
wire   [31:0] add_ln21_19_fu_1069_p2;
wire   [31:0] add_ln21_16_fu_1051_p2;
wire   [31:0] mul_ln21_24_fu_1087_p2;
wire   [31:0] ABij_6_fu_1082_p2;
wire   [31:0] mul_ln21_25_fu_1092_p2;
wire   [31:0] mul_ln21_26_fu_1097_p2;
wire   [31:0] add_ln21_22_fu_1128_p2;
wire   [31:0] add_ln21_21_fu_1122_p2;
wire   [31:0] mul_ln21_27_fu_1102_p2;
wire   [31:0] mul_ln21_28_fu_1107_p2;
wire   [31:0] mul_ln21_29_fu_1112_p2;
wire   [31:0] mul_ln21_30_fu_1117_p2;
wire   [31:0] add_ln21_25_fu_1146_p2;
wire   [31:0] add_ln21_24_fu_1140_p2;
wire   [31:0] add_ln21_26_fu_1152_p2;
wire   [31:0] add_ln21_23_fu_1134_p2;
wire   [31:0] mul_ln21_32_fu_1170_p2;
wire   [31:0] ABij_8_fu_1165_p2;
wire   [31:0] mul_ln21_33_fu_1175_p2;
wire   [31:0] mul_ln21_34_fu_1180_p2;
wire   [31:0] add_ln21_29_fu_1211_p2;
wire   [31:0] add_ln21_28_fu_1205_p2;
wire   [31:0] mul_ln21_35_fu_1185_p2;
wire   [31:0] mul_ln21_36_fu_1190_p2;
wire   [31:0] mul_ln21_37_fu_1195_p2;
wire   [31:0] mul_ln21_38_fu_1200_p2;
wire   [31:0] add_ln21_32_fu_1229_p2;
wire   [31:0] add_ln21_31_fu_1223_p2;
wire   [31:0] add_ln21_33_fu_1235_p2;
wire   [31:0] add_ln21_30_fu_1217_p2;
wire   [31:0] mul_ln21_40_fu_1253_p2;
wire   [31:0] ABij_10_fu_1248_p2;
wire   [31:0] mul_ln21_41_fu_1258_p2;
wire   [31:0] mul_ln21_42_fu_1263_p2;
wire   [31:0] add_ln21_36_fu_1294_p2;
wire   [31:0] add_ln21_35_fu_1288_p2;
wire   [31:0] mul_ln21_43_fu_1268_p2;
wire   [31:0] mul_ln21_44_fu_1273_p2;
wire   [31:0] mul_ln21_45_fu_1278_p2;
wire   [31:0] mul_ln21_46_fu_1283_p2;
wire   [31:0] add_ln21_39_fu_1312_p2;
wire   [31:0] add_ln21_38_fu_1306_p2;
wire   [31:0] add_ln21_40_fu_1318_p2;
wire   [31:0] add_ln21_37_fu_1300_p2;
wire   [31:0] mul_ln21_48_fu_1336_p2;
wire   [31:0] ABij_12_fu_1331_p2;
wire   [31:0] mul_ln21_49_fu_1341_p2;
wire   [31:0] mul_ln21_50_fu_1346_p2;
wire   [31:0] add_ln21_43_fu_1377_p2;
wire   [31:0] add_ln21_42_fu_1371_p2;
wire   [31:0] mul_ln21_51_fu_1351_p2;
wire   [31:0] mul_ln21_52_fu_1356_p2;
wire   [31:0] mul_ln21_53_fu_1361_p2;
wire   [31:0] mul_ln21_54_fu_1366_p2;
wire   [31:0] add_ln21_46_fu_1395_p2;
wire   [31:0] add_ln21_45_fu_1389_p2;
wire   [31:0] add_ln21_47_fu_1401_p2;
wire   [31:0] add_ln21_44_fu_1383_p2;
wire   [31:0] mul_ln21_56_fu_1419_p2;
wire   [31:0] ABij_14_fu_1414_p2;
wire   [31:0] mul_ln21_57_fu_1424_p2;
wire   [31:0] mul_ln21_58_fu_1429_p2;
wire   [31:0] add_ln21_50_fu_1460_p2;
wire   [31:0] add_ln21_49_fu_1454_p2;
wire   [31:0] mul_ln21_59_fu_1434_p2;
wire   [31:0] mul_ln21_60_fu_1439_p2;
wire   [31:0] mul_ln21_61_fu_1444_p2;
wire   [31:0] mul_ln21_62_fu_1449_p2;
wire   [31:0] add_ln21_53_fu_1478_p2;
wire   [31:0] add_ln21_52_fu_1472_p2;
wire   [31:0] add_ln21_54_fu_1484_p2;
wire   [31:0] add_ln21_51_fu_1466_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_391;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(A_0_q0),
    .din1(B_0_0_read_reg_1504),
    .dout(ABij_fu_833_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(A_1_q0),
    .din1(B_1_0_read_reg_1509),
    .dout(mul_ln21_fu_838_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(A_2_q0),
    .din1(B_2_0_read_reg_1514),
    .dout(mul_ln21_1_fu_843_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(A_3_q0),
    .din1(B_3_0_read_reg_1519),
    .dout(mul_ln21_2_fu_848_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(A_4_q0),
    .din1(B_4_0_read_reg_1524),
    .dout(mul_ln21_3_fu_853_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(A_5_q0),
    .din1(B_5_0_read_reg_1529),
    .dout(mul_ln21_4_fu_858_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(A_6_q0),
    .din1(B_6_0_read_reg_1534),
    .dout(mul_ln21_5_fu_863_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(A_7_q0),
    .din1(B_7_0_read_reg_1539),
    .dout(mul_ln21_6_fu_868_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(A_0_q0),
    .din1(B_0_1_read_reg_1544),
    .dout(ABij_2_fu_916_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U10(
    .din0(A_1_q0),
    .din1(B_1_1_read_reg_1549),
    .dout(mul_ln21_8_fu_921_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(A_2_q0),
    .din1(B_2_1_read_reg_1554),
    .dout(mul_ln21_9_fu_926_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U12(
    .din0(A_3_q0),
    .din1(B_3_1_read_reg_1559),
    .dout(mul_ln21_10_fu_931_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U13(
    .din0(A_4_q0),
    .din1(B_4_1_read_reg_1564),
    .dout(mul_ln21_11_fu_936_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U14(
    .din0(A_5_q0),
    .din1(B_5_1_read_reg_1569),
    .dout(mul_ln21_12_fu_941_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U15(
    .din0(A_6_q0),
    .din1(B_6_1_read_reg_1574),
    .dout(mul_ln21_13_fu_946_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U16(
    .din0(A_7_q0),
    .din1(B_7_1_read_reg_1579),
    .dout(mul_ln21_14_fu_951_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U17(
    .din0(A_0_q0),
    .din1(B_0_2_read_reg_1584),
    .dout(ABij_4_fu_999_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U18(
    .din0(A_1_q0),
    .din1(B_1_2_read_reg_1589),
    .dout(mul_ln21_16_fu_1004_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U19(
    .din0(A_2_q0),
    .din1(B_2_2_read_reg_1594),
    .dout(mul_ln21_17_fu_1009_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U20(
    .din0(A_3_q0),
    .din1(B_3_2_read_reg_1599),
    .dout(mul_ln21_18_fu_1014_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U21(
    .din0(A_4_q0),
    .din1(B_4_2_read_reg_1604),
    .dout(mul_ln21_19_fu_1019_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U22(
    .din0(A_5_q0),
    .din1(B_5_2_read_reg_1609),
    .dout(mul_ln21_20_fu_1024_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U23(
    .din0(A_6_q0),
    .din1(B_6_2_read_reg_1614),
    .dout(mul_ln21_21_fu_1029_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U24(
    .din0(A_7_q0),
    .din1(B_7_2_read_reg_1619),
    .dout(mul_ln21_22_fu_1034_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U25(
    .din0(A_0_q0),
    .din1(B_0_3_read_reg_1624),
    .dout(ABij_6_fu_1082_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U26(
    .din0(A_1_q0),
    .din1(B_1_3_read_reg_1629),
    .dout(mul_ln21_24_fu_1087_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U27(
    .din0(A_2_q0),
    .din1(B_2_3_read_reg_1634),
    .dout(mul_ln21_25_fu_1092_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U28(
    .din0(A_3_q0),
    .din1(B_3_3_read_reg_1639),
    .dout(mul_ln21_26_fu_1097_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U29(
    .din0(A_4_q0),
    .din1(B_4_3_read_reg_1644),
    .dout(mul_ln21_27_fu_1102_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U30(
    .din0(A_5_q0),
    .din1(B_5_3_read_reg_1649),
    .dout(mul_ln21_28_fu_1107_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U31(
    .din0(A_6_q0),
    .din1(B_6_3_read_reg_1654),
    .dout(mul_ln21_29_fu_1112_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(A_7_q0),
    .din1(B_7_3_read_reg_1659),
    .dout(mul_ln21_30_fu_1117_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(A_0_q0),
    .din1(B_0_4_read_reg_1664),
    .dout(ABij_8_fu_1165_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U34(
    .din0(A_1_q0),
    .din1(B_1_4_read_reg_1669),
    .dout(mul_ln21_32_fu_1170_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U35(
    .din0(A_2_q0),
    .din1(B_2_4_read_reg_1674),
    .dout(mul_ln21_33_fu_1175_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U36(
    .din0(A_3_q0),
    .din1(B_3_4_read_reg_1679),
    .dout(mul_ln21_34_fu_1180_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U37(
    .din0(A_4_q0),
    .din1(B_4_4_read_reg_1684),
    .dout(mul_ln21_35_fu_1185_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U38(
    .din0(A_5_q0),
    .din1(B_5_4_read_reg_1689),
    .dout(mul_ln21_36_fu_1190_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U39(
    .din0(A_6_q0),
    .din1(B_6_4_read_reg_1694),
    .dout(mul_ln21_37_fu_1195_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U40(
    .din0(A_7_q0),
    .din1(B_7_4_read_reg_1699),
    .dout(mul_ln21_38_fu_1200_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U41(
    .din0(A_0_q0),
    .din1(B_0_5_read_reg_1704),
    .dout(ABij_10_fu_1248_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U42(
    .din0(A_1_q0),
    .din1(B_1_5_read_reg_1709),
    .dout(mul_ln21_40_fu_1253_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U43(
    .din0(A_2_q0),
    .din1(B_2_5_read_reg_1714),
    .dout(mul_ln21_41_fu_1258_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U44(
    .din0(A_3_q0),
    .din1(B_3_5_read_reg_1719),
    .dout(mul_ln21_42_fu_1263_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U45(
    .din0(A_4_q0),
    .din1(B_4_5_read_reg_1724),
    .dout(mul_ln21_43_fu_1268_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U46(
    .din0(A_5_q0),
    .din1(B_5_5_read_reg_1729),
    .dout(mul_ln21_44_fu_1273_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U47(
    .din0(A_6_q0),
    .din1(B_6_5_read_reg_1734),
    .dout(mul_ln21_45_fu_1278_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U48(
    .din0(A_7_q0),
    .din1(B_7_5_read_reg_1739),
    .dout(mul_ln21_46_fu_1283_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U49(
    .din0(A_0_q0),
    .din1(B_0_6_read_reg_1744),
    .dout(ABij_12_fu_1331_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U50(
    .din0(A_1_q0),
    .din1(B_1_6_read_reg_1749),
    .dout(mul_ln21_48_fu_1336_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U51(
    .din0(A_2_q0),
    .din1(B_2_6_read_reg_1754),
    .dout(mul_ln21_49_fu_1341_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U52(
    .din0(A_3_q0),
    .din1(B_3_6_read_reg_1759),
    .dout(mul_ln21_50_fu_1346_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U53(
    .din0(A_4_q0),
    .din1(B_4_6_read_reg_1764),
    .dout(mul_ln21_51_fu_1351_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U54(
    .din0(A_5_q0),
    .din1(B_5_6_read_reg_1769),
    .dout(mul_ln21_52_fu_1356_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U55(
    .din0(A_6_q0),
    .din1(B_6_6_read_reg_1774),
    .dout(mul_ln21_53_fu_1361_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U56(
    .din0(A_7_q0),
    .din1(B_7_6_read_reg_1779),
    .dout(mul_ln21_54_fu_1366_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U57(
    .din0(A_0_q0),
    .din1(B_0_7_read_reg_1784),
    .dout(ABij_14_fu_1414_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U58(
    .din0(A_1_q0),
    .din1(B_1_7_read_reg_1789),
    .dout(mul_ln21_56_fu_1419_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U59(
    .din0(A_2_q0),
    .din1(B_2_7_read_reg_1794),
    .dout(mul_ln21_57_fu_1424_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U60(
    .din0(A_3_q0),
    .din1(B_3_7_read_reg_1799),
    .dout(mul_ln21_58_fu_1429_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U61(
    .din0(A_4_q0),
    .din1(B_4_7_read_reg_1804),
    .dout(mul_ln21_59_fu_1434_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U62(
    .din0(A_5_q0),
    .din1(B_5_7_read_reg_1809),
    .dout(mul_ln21_60_fu_1439_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U63(
    .din0(A_6_q0),
    .din1(B_6_7_read_reg_1814),
    .dout(mul_ln21_61_fu_1444_p2)
);

mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U64(
    .din0(A_7_q0),
    .din1(B_7_7_read_reg_1819),
    .dout(mul_ln21_62_fu_1449_p2)
);

mm_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_391)) begin
        if ((icmp_ln16_fu_804_p2 == 1'd0)) begin
            i_fu_200 <= add_ln16_fu_810_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_200 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_0_0_read_reg_1504 <= B_0_0;
        B_0_1_read_reg_1544 <= B_0_1;
        B_0_2_read_reg_1584 <= B_0_2;
        B_0_3_read_reg_1624 <= B_0_3;
        B_0_4_read_reg_1664 <= B_0_4;
        B_0_5_read_reg_1704 <= B_0_5;
        B_0_6_read_reg_1744 <= B_0_6;
        B_0_7_read_reg_1784 <= B_0_7;
        B_1_0_read_reg_1509 <= B_1_0;
        B_1_1_read_reg_1549 <= B_1_1;
        B_1_2_read_reg_1589 <= B_1_2;
        B_1_3_read_reg_1629 <= B_1_3;
        B_1_4_read_reg_1669 <= B_1_4;
        B_1_5_read_reg_1709 <= B_1_5;
        B_1_6_read_reg_1749 <= B_1_6;
        B_1_7_read_reg_1789 <= B_1_7;
        B_2_0_read_reg_1514 <= B_2_0;
        B_2_1_read_reg_1554 <= B_2_1;
        B_2_2_read_reg_1594 <= B_2_2;
        B_2_3_read_reg_1634 <= B_2_3;
        B_2_4_read_reg_1674 <= B_2_4;
        B_2_5_read_reg_1714 <= B_2_5;
        B_2_6_read_reg_1754 <= B_2_6;
        B_2_7_read_reg_1794 <= B_2_7;
        B_3_0_read_reg_1519 <= B_3_0;
        B_3_1_read_reg_1559 <= B_3_1;
        B_3_2_read_reg_1599 <= B_3_2;
        B_3_3_read_reg_1639 <= B_3_3;
        B_3_4_read_reg_1679 <= B_3_4;
        B_3_5_read_reg_1719 <= B_3_5;
        B_3_6_read_reg_1759 <= B_3_6;
        B_3_7_read_reg_1799 <= B_3_7;
        B_4_0_read_reg_1524 <= B_4_0;
        B_4_1_read_reg_1564 <= B_4_1;
        B_4_2_read_reg_1604 <= B_4_2;
        B_4_3_read_reg_1644 <= B_4_3;
        B_4_4_read_reg_1684 <= B_4_4;
        B_4_5_read_reg_1724 <= B_4_5;
        B_4_6_read_reg_1764 <= B_4_6;
        B_4_7_read_reg_1804 <= B_4_7;
        B_5_0_read_reg_1529 <= B_5_0;
        B_5_1_read_reg_1569 <= B_5_1;
        B_5_2_read_reg_1609 <= B_5_2;
        B_5_3_read_reg_1649 <= B_5_3;
        B_5_4_read_reg_1689 <= B_5_4;
        B_5_5_read_reg_1729 <= B_5_5;
        B_5_6_read_reg_1769 <= B_5_6;
        B_5_7_read_reg_1809 <= B_5_7;
        B_6_0_read_reg_1534 <= B_6_0;
        B_6_1_read_reg_1574 <= B_6_1;
        B_6_2_read_reg_1614 <= B_6_2;
        B_6_3_read_reg_1654 <= B_6_3;
        B_6_4_read_reg_1694 <= B_6_4;
        B_6_5_read_reg_1734 <= B_6_5;
        B_6_6_read_reg_1774 <= B_6_6;
        B_6_7_read_reg_1814 <= B_6_7;
        B_7_0_read_reg_1539 <= B_7_0;
        B_7_1_read_reg_1579 <= B_7_1;
        B_7_2_read_reg_1619 <= B_7_2;
        B_7_3_read_reg_1659 <= B_7_3;
        B_7_4_read_reg_1699 <= B_7_4;
        B_7_5_read_reg_1739 <= B_7_5;
        B_7_6_read_reg_1779 <= B_7_6;
        B_7_7_read_reg_1819 <= B_7_7;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_804_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln16_reg_1827[3 : 0] <= zext_ln16_fu_816_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_0_ce0 = 1'b1;
    end else begin
        AB_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_0_we0 = 1'b1;
    end else begin
        AB_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_1_ce0 = 1'b1;
    end else begin
        AB_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_1_we0 = 1'b1;
    end else begin
        AB_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_2_ce0 = 1'b1;
    end else begin
        AB_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_2_we0 = 1'b1;
    end else begin
        AB_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_3_ce0 = 1'b1;
    end else begin
        AB_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_3_we0 = 1'b1;
    end else begin
        AB_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_4_ce0 = 1'b1;
    end else begin
        AB_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_4_we0 = 1'b1;
    end else begin
        AB_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_5_ce0 = 1'b1;
    end else begin
        AB_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_5_we0 = 1'b1;
    end else begin
        AB_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_6_ce0 = 1'b1;
    end else begin
        AB_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_6_we0 = 1'b1;
    end else begin
        AB_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_7_ce0 = 1'b1;
    end else begin
        AB_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_7_we0 = 1'b1;
    end else begin
        AB_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_ce0 = 1'b1;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_ce0 = 1'b1;
    end else begin
        A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_4_ce0 = 1'b1;
    end else begin
        A_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_5_ce0 = 1'b1;
    end else begin
        A_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_6_ce0 = 1'b1;
    end else begin
        A_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_7_ce0 = 1'b1;
    end else begin
        A_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_804_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_200;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_0_address0 = zext_ln16_reg_1827;

assign AB_0_d0 = (add_ln21_5_fu_903_p2 + add_ln21_2_fu_885_p2);

assign AB_1_address0 = zext_ln16_reg_1827;

assign AB_1_d0 = (add_ln21_12_fu_986_p2 + add_ln21_9_fu_968_p2);

assign AB_2_address0 = zext_ln16_reg_1827;

assign AB_2_d0 = (add_ln21_19_fu_1069_p2 + add_ln21_16_fu_1051_p2);

assign AB_3_address0 = zext_ln16_reg_1827;

assign AB_3_d0 = (add_ln21_26_fu_1152_p2 + add_ln21_23_fu_1134_p2);

assign AB_4_address0 = zext_ln16_reg_1827;

assign AB_4_d0 = (add_ln21_33_fu_1235_p2 + add_ln21_30_fu_1217_p2);

assign AB_5_address0 = zext_ln16_reg_1827;

assign AB_5_d0 = (add_ln21_40_fu_1318_p2 + add_ln21_37_fu_1300_p2);

assign AB_6_address0 = zext_ln16_reg_1827;

assign AB_6_d0 = (add_ln21_47_fu_1401_p2 + add_ln21_44_fu_1383_p2);

assign AB_7_address0 = zext_ln16_reg_1827;

assign AB_7_d0 = (add_ln21_54_fu_1484_p2 + add_ln21_51_fu_1466_p2);

assign A_0_address0 = zext_ln16_fu_816_p1;

assign A_1_address0 = zext_ln16_fu_816_p1;

assign A_2_address0 = zext_ln16_fu_816_p1;

assign A_3_address0 = zext_ln16_fu_816_p1;

assign A_4_address0 = zext_ln16_fu_816_p1;

assign A_5_address0 = zext_ln16_fu_816_p1;

assign A_6_address0 = zext_ln16_fu_816_p1;

assign A_7_address0 = zext_ln16_fu_816_p1;

assign add_ln16_fu_810_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign add_ln21_10_fu_974_p2 = (mul_ln21_11_fu_936_p2 + mul_ln21_12_fu_941_p2);

assign add_ln21_11_fu_980_p2 = (mul_ln21_13_fu_946_p2 + mul_ln21_14_fu_951_p2);

assign add_ln21_12_fu_986_p2 = (add_ln21_11_fu_980_p2 + add_ln21_10_fu_974_p2);

assign add_ln21_14_fu_1039_p2 = (mul_ln21_16_fu_1004_p2 + ABij_4_fu_999_p2);

assign add_ln21_15_fu_1045_p2 = (mul_ln21_17_fu_1009_p2 + mul_ln21_18_fu_1014_p2);

assign add_ln21_16_fu_1051_p2 = (add_ln21_15_fu_1045_p2 + add_ln21_14_fu_1039_p2);

assign add_ln21_17_fu_1057_p2 = (mul_ln21_19_fu_1019_p2 + mul_ln21_20_fu_1024_p2);

assign add_ln21_18_fu_1063_p2 = (mul_ln21_21_fu_1029_p2 + mul_ln21_22_fu_1034_p2);

assign add_ln21_19_fu_1069_p2 = (add_ln21_18_fu_1063_p2 + add_ln21_17_fu_1057_p2);

assign add_ln21_1_fu_879_p2 = (mul_ln21_1_fu_843_p2 + mul_ln21_2_fu_848_p2);

assign add_ln21_21_fu_1122_p2 = (mul_ln21_24_fu_1087_p2 + ABij_6_fu_1082_p2);

assign add_ln21_22_fu_1128_p2 = (mul_ln21_25_fu_1092_p2 + mul_ln21_26_fu_1097_p2);

assign add_ln21_23_fu_1134_p2 = (add_ln21_22_fu_1128_p2 + add_ln21_21_fu_1122_p2);

assign add_ln21_24_fu_1140_p2 = (mul_ln21_27_fu_1102_p2 + mul_ln21_28_fu_1107_p2);

assign add_ln21_25_fu_1146_p2 = (mul_ln21_29_fu_1112_p2 + mul_ln21_30_fu_1117_p2);

assign add_ln21_26_fu_1152_p2 = (add_ln21_25_fu_1146_p2 + add_ln21_24_fu_1140_p2);

assign add_ln21_28_fu_1205_p2 = (mul_ln21_32_fu_1170_p2 + ABij_8_fu_1165_p2);

assign add_ln21_29_fu_1211_p2 = (mul_ln21_33_fu_1175_p2 + mul_ln21_34_fu_1180_p2);

assign add_ln21_2_fu_885_p2 = (add_ln21_1_fu_879_p2 + add_ln21_fu_873_p2);

assign add_ln21_30_fu_1217_p2 = (add_ln21_29_fu_1211_p2 + add_ln21_28_fu_1205_p2);

assign add_ln21_31_fu_1223_p2 = (mul_ln21_35_fu_1185_p2 + mul_ln21_36_fu_1190_p2);

assign add_ln21_32_fu_1229_p2 = (mul_ln21_37_fu_1195_p2 + mul_ln21_38_fu_1200_p2);

assign add_ln21_33_fu_1235_p2 = (add_ln21_32_fu_1229_p2 + add_ln21_31_fu_1223_p2);

assign add_ln21_35_fu_1288_p2 = (mul_ln21_40_fu_1253_p2 + ABij_10_fu_1248_p2);

assign add_ln21_36_fu_1294_p2 = (mul_ln21_41_fu_1258_p2 + mul_ln21_42_fu_1263_p2);

assign add_ln21_37_fu_1300_p2 = (add_ln21_36_fu_1294_p2 + add_ln21_35_fu_1288_p2);

assign add_ln21_38_fu_1306_p2 = (mul_ln21_43_fu_1268_p2 + mul_ln21_44_fu_1273_p2);

assign add_ln21_39_fu_1312_p2 = (mul_ln21_45_fu_1278_p2 + mul_ln21_46_fu_1283_p2);

assign add_ln21_3_fu_891_p2 = (mul_ln21_3_fu_853_p2 + mul_ln21_4_fu_858_p2);

assign add_ln21_40_fu_1318_p2 = (add_ln21_39_fu_1312_p2 + add_ln21_38_fu_1306_p2);

assign add_ln21_42_fu_1371_p2 = (mul_ln21_48_fu_1336_p2 + ABij_12_fu_1331_p2);

assign add_ln21_43_fu_1377_p2 = (mul_ln21_49_fu_1341_p2 + mul_ln21_50_fu_1346_p2);

assign add_ln21_44_fu_1383_p2 = (add_ln21_43_fu_1377_p2 + add_ln21_42_fu_1371_p2);

assign add_ln21_45_fu_1389_p2 = (mul_ln21_51_fu_1351_p2 + mul_ln21_52_fu_1356_p2);

assign add_ln21_46_fu_1395_p2 = (mul_ln21_53_fu_1361_p2 + mul_ln21_54_fu_1366_p2);

assign add_ln21_47_fu_1401_p2 = (add_ln21_46_fu_1395_p2 + add_ln21_45_fu_1389_p2);

assign add_ln21_49_fu_1454_p2 = (mul_ln21_56_fu_1419_p2 + ABij_14_fu_1414_p2);

assign add_ln21_4_fu_897_p2 = (mul_ln21_5_fu_863_p2 + mul_ln21_6_fu_868_p2);

assign add_ln21_50_fu_1460_p2 = (mul_ln21_57_fu_1424_p2 + mul_ln21_58_fu_1429_p2);

assign add_ln21_51_fu_1466_p2 = (add_ln21_50_fu_1460_p2 + add_ln21_49_fu_1454_p2);

assign add_ln21_52_fu_1472_p2 = (mul_ln21_59_fu_1434_p2 + mul_ln21_60_fu_1439_p2);

assign add_ln21_53_fu_1478_p2 = (mul_ln21_61_fu_1444_p2 + mul_ln21_62_fu_1449_p2);

assign add_ln21_54_fu_1484_p2 = (add_ln21_53_fu_1478_p2 + add_ln21_52_fu_1472_p2);

assign add_ln21_5_fu_903_p2 = (add_ln21_4_fu_897_p2 + add_ln21_3_fu_891_p2);

assign add_ln21_7_fu_956_p2 = (mul_ln21_8_fu_921_p2 + ABij_2_fu_916_p2);

assign add_ln21_8_fu_962_p2 = (mul_ln21_9_fu_926_p2 + mul_ln21_10_fu_931_p2);

assign add_ln21_9_fu_968_p2 = (add_ln21_8_fu_962_p2 + add_ln21_7_fu_956_p2);

assign add_ln21_fu_873_p2 = (mul_ln21_fu_838_p2 + ABij_fu_833_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_391 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln16_fu_804_p2 = ((ap_sig_allocacmp_i_1 == 4'd8) ? 1'b1 : 1'b0);

assign zext_ln16_fu_816_p1 = ap_sig_allocacmp_i_1;

always @ (posedge ap_clk) begin
    zext_ln16_reg_1827[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //mm
